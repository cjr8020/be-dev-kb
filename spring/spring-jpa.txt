
	@@@@@@@@@@@@@@@@@@

		spring JPA

	@@@@@@@@@@@@@@@@@@

================================================================================

  Production DataSource Support
  ***************************

Java's javax.sql.DataSource interface provides a standard method of working with
database connections. 

Production database connections can also be auto-configed by using a pooling
DataSource.  SB uses the following alg for choosing specific impl:

  1. prefers HikariCP for its performance and concurrency, if available
  2. next, prefer Tomcat pooling DataSource if avail
  3. if neither above is avail, use Commons DBCP2 if available.

If you use 

  spring-boot-starter-jdbc
  spring-boot-starter-jpa

you automatically get HikariCP.

  However, you can bypass that algorithm and specify the CP by setting the 
  spring.datasource.type property.  This is particularly important if you run
  your application in a Tomcat container, as tomcat-jdbc is provided by default.

Additoinal CPs can be configured manually.  If you define your own DataSource
bean, auto-config does not occur.

DataSource configuration is controlled by extnernal config properties in 

  spring.datasource.*  

For pooling DataSource to be created, we need to be able to verify that a valid
Driver class is available, so we can check that before we do anything:

  spring.datasource.driver-class-name=com.mysql.jdbc.Driver


DataSource Properties
--------------------------

See DataSourceProperties for more of the supported options. These are the standard options that work regardless of the actual implementation. 

https://github.com/spring-projects/spring-boot/blob/v2.0.3.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java

It is also possible to fine-tune implementation-specific settings by using their respective prefix (spring.datasource.hikari.*, spring.datasource.tomcat.*, and spring.datasource.dbcp2.*)


  Hikari DataSource properties
  -----------------------------

  http://www.baeldung.com/hikaricp  - BENCHMARKS

  This is a very lightweight (at roughly 130Kb) and lightning fast JDBC connection pooling framework developed by Brett Wooldridge around 2012.


  Java 8:

    <dependency>
      <groupId>com.zaxxer</groupId>
      <artifactId>HikariCP</artifactId>
      <version>2.6.1</version>
    </dependency>

  Java 9:

    <dependency>
        <groupId>com.zaxxer</groupId>
        <artifactId>HikariCP-java9ea</artifactId>
        <version>2.6.1</version>
    </dependency>  

  HikariConfig is the configuration class used to utilize a data source.
  It comes with 4 well-known must-used params:
    username
    password
    jdbcUrl
    dataSourceClassName


  Out of `jdbcUrl` and `dataSourceClassName`, either one is to be used at a time.
  (with older drivers, we may need to use both).

  In addition to the standard 4 props, the following are available:
  (detailed description: https://github.com/brettwooldridge/HikariCP )

    autoCommit
    connectionTimeout
    idleTimeout
    maxLifetime
    connectionTestQuery
    connectionInitSql
    validationTimeout
    maximumPoolSize
    poolName
    allowPoolSuspension
    readOnly
    transactionIsolation
    leakDetectionThreshold

  HikariCP stands out b/c of these db properties.
  It's advanced enough to even detect connection leaks by itself!


================================================================================

  Configuring custom DataSource
  *****************************
To configure your own DataSource, define a @Bean of that type in your config.
Spring reuses your DataSource anywhere one is required, including database
initialization.  

  Externalizing DataSouce configuration
  -------------------------------------
  https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-3rd-party-configuration


The following example shows how to define a data source in a bean:

  @Bean
  @ConfigurationProperties(prefix="app.datasource")
  public DataSource dataSource() {
    return new FancyDataSource();
  }

The above assumes that your FancyDataSource has regular JavaBean props for the 
URL, the username, and the pool size.

SB also provides a utility builder class, called DataSourceBuilder, that can be
used to create one of the standard data sources (if it is on the classpath).
The builder can detect the one to use based on what's available on the classpath.
It also auto-detects the driver based on the JDBC URL. 

The following example shows how to create a data source by using a DataSourceBuilder:

  @Bean
  @ConfigurationProperties("app.datasource")
  public DataSource dataSource() {
    return DataSourceBuilder.create().build();
  }

     
The following example shows how to define a data source by setting properties:

  app.datasource.url=jdbc:h2:mem:mydb
  app.datasource.username=sa
  app.datasource.password=dbpass
  app.datasource.pool-size=30


However, there is a CATCH - the actual size of the connection pool is not exposed - 
no keys are generated in the metadata for your custom DataSource
(b/c the DataSource interface exposes no properties).
If you happen to have Hikari on the classpath, this basic setup does not work,
b/c Hikari has no `url` property (but does have a `jdbcUrl` property).

  How to configure HikariCP
  --------------------------

To fix the limitations of `DataSource`, force the connection pool to use and
return a dedicated implementation rather than DataSource.
Here is how to create a HikariDataSource with DataSourceBuilder:

  @Bean
  @ConfigurationProperties("app.datasource")
  public HikariDataSource dataSource() {
    return DataSourceBuilder.create().type(HikariDataSource.class).build();
  }

You can go further by leveraging what DataSourceProperties.
 - It can provide a default embedded database with a sensible username and pass
if no URL is provided.
 - you can easily initialize a DataSourceBuilder from the state of any 
 DataSourceProperties object, so you could also inject the DataSource that SB
 creates automatically.

 Create a custom DataSourceProperties on your custom namespace:

    @Bean
    @Primary
    @ConfigurationProperties("app.datasource")
    public DataSourceProperties dataSourceProperties() {
      return new DataSourceProperties();
    }

    @Bean
    @ConfigurationProperties("app.datasource")
    public HikariDataSource dataSource(DataSourceProperties properties) {
      return properties.initializeDataSourceBuilder().type(HikariDataSource.class)
          .build();
    }

The above setup puts you in sync with what SB does for you by default, except
that a dedicated connection pool is chosen (in code) and its settings are 
exposed in the same namespace.

B/c `DataSourceProperties` is taking care of the url/jdbUrl translation for you,
you can configure it as follows:

  app.datasource.url=jdbc:mysql://localhost/test
  app.datasource.username=dbuser
  app.datasource.password=dbpass
  app.datasource.maximum-pool-size=30


Note: `app.datasource.type` has no effect in this custom configuration 
b/c the builder is initialized with whatever value you might set there, and

then overridden by the call to `.type()`  in the `dataSource()` method.


================================================================================

  configuring Two DataSources
  ***************************

When you define multiple data sources, you need to mark one of the `DataSource`
instances as @Primary b/c various auto-configurations down the road expect to 
be able to get one by type.


#first db
app.datasource.db1.url = [url]
app.datasource.db1.username = [username]
app.datasource.db1.password = [password]
app.datasource.db1.driverClassName = oracle.jdbc.OracleDriver
app.datasource.db1.type=com.zaxxer.hikari.HikariDataSource # either here or in code

#second db ...
app.datasource.db2.url = [url]
app.datasource.db2.username = [username]
app.datasource.db2.password = [password]
app.datasource.db2.driverClassName = oracle.jdbc.OracleDriver


@Bean
@Primary
@ConfigurationProperties("app.datasource.db1")
public DataSourceProperties firstDataSourceProperties() {
  return new DataSourceProperties();
}

@Bean
@Primary
@ConfigurationProperties("app.datasource.db1")
public DataSource firstDataSource() {
  return firstDataSourceProperties()
      .initializeDataSourceBuilder()
      .type(HikariDataSource.class)
      .build();
}

@Bean
@ConfigurationProperties("app.datasource.db2")
public DataSourceProperties secondDataSourceProperties() {
  return new DataSourceProperties();
}

@Bean
@ConfigurationProperties("app.datasource.db2")
public DataSource secondDataSource() {
  return secondDataSourceProperties()
      .initializeDataSourceBuilder()
      .type(HikariDataSource.class)
      .build();
}



================================================================================
================================================================================

  CrudRepository
  **************

 typical CRUD functionality:

save(…) – save an Iterable of entities. Here, we can pass multiple objects to save them in a batch
findOne(…) – get a single entity based on passed primary key value
findAll() – get an Iterable of all available entities in database
count() – return the count of total entities in a table
delete(…) – delete an entity based on the passed object
exists(…) – verify if an entity exists based on the passed primary key value  

  PagingAndSortingRepository
  **************************

public interface PagingAndSortingRepository<T, ID extends Serializable> 
  extends CrudRepository<T, ID> {
 
    Iterable<T> findAll(Sort sort);
 
    Page<T> findAll(Pageable pageable);
}

This interface provides a method findAll(Pageable pageable), which is the key to implementing Pagination.

When using Pageable, we create a Pageable object with certain properties and we’ve to specify at least:

  Page size
  Current page number
  Sorting

So, let’s assume that we want to show the first page of a result set sorted by lastName, ascending, having no more than five records each. This is how we can achieve this using a PageRequest and a Sort definition:

  Sort sort = new Sort(new Sort.Order(Direction.ASC, "lastName"));
  Pageable pageable = new PageRequest(0, 5, sort);

Passing the pageable object to the Spring data query will return the results in question (the first parameter of PageRequest is zero-based).  


  JpaRepository
  *************

public interface JpaRepository<T, ID extends Serializable> extends
  PagingAndSortingRepository<T, ID> {
 
    List<T> findAll();
 
    List<T> findAll(Sort sort);
 
    List<T> save(Iterable<? extends T> entities);
 
    void flush();
 
    T saveAndFlush(T entity);
 
    void deleteInBatch(Iterable<T> entities);
}  

findAll() – get a List of all available entities in database
findAll(…) – get a List of all available entities and sort them using the provided condition
save(…) – save an Iterable of entities. Here, we can pass multiple objects to save them in a batch
flush() – flush all pending task to the database
saveAndFlush(…) – save the entity and flush changes immediately
deleteInBatch(…) – delete an Iterable of entities. Here, we can pass multiple objects to delete them in a batch  

================================================================================

Entity class name is transformed into SQL table name with underscores
*********************************************************************

@Entity
@Table(name = "EmailTemplate")		
public class EmailTemplate {
	
}

despite the annotation, SQLException: Invalid object name: 'email_template'

For SpringBoot 1.5.x Hibernate 5.x

spring.jpa.hibernate.naming.physical-strategy=
org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

e.g.:

spring:
  datasource:
    username: sa
    platform: h2
    password:
    url: "jdbc:h2:./target/db/testdb;INIT=CREATE SCHEMA IF NOT EXISTS CIS;MODE=Oracle;MV_STORE=FALSE;MVCC=FALSE;AUTO_SERVER=TRUE;"
    driver-class-name: org.h2.Driver
  jpa:
    generate-ddl: false
    hibernate:
      ddl-auto: validate
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        default_schema: CIS
    show-sql: true
    
================================================================================

	EmbeddedDatabaseBuilder
	***********************

https://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html#jdbc-embedded-database-support	

Spring provides `org.springframework.jdbc.datasource.embedded` package in 
support of embedded Java database engines.  Support for
 
 HSQL
 H2
 Derby

is provided natively.

The EmbeddedDatabaseBuilder class provides a fluent API for constructing an embedded database programmatically. Use this when you need to create an embedded database instance in a standalone environment, such as a data access object unit test:

    EmbeddedDatabaseBuilder builder = new EmbeddedDatabaseBuilder();
    EmbeddedDatabase db = builder.setType(H2).addScript("my-schema.sql").addScript("my-test-data.sql").build();
    // do stuff against the db (EmbeddedDatabase extends javax.sql.DataSource)
    db.shutdown()

You could also create a DataSource bean 


================================================================================