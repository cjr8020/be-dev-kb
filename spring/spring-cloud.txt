
	*********************

		Spring Cloud

	*********************



Release train Spring Boot compatibility
Release Train					 Boot Version
-------------------------------------------------
Greenwich 						2.1.x
Finchley 							2.0.x
Edgware 							1.5.x
Dalston 							1.5.x


Greenwich.RELEASE
-----------------
https://spring.io/blog/2019/01/23/spring-cloud-greenwich-release-is-now-available

Spring Cloud Sleuth				2.1.0.RELEASE	(issues)
Spring Cloud Gcp					1.1.0.RELEASE	(issues)
Spring Cloud Build				2.1.2.RELEASE	 
Spring Cloud Netflix			2.1.0.RELEASE	(issues)
Spring Cloud Consul				2.1.0.RELEASE	 
Spring Cloud Gateway			2.1.0.RELEASE	(issues)
Spring Cloud							Greenwich.RELEASE	 
Spring Cloud Function			2.0.0.RELEASE	(issues)
Spring Cloud Stream				Fishtown.RELEASE	 
Spring Cloud Zookeeper		2.1.0.RELEASE	 
Spring Cloud Cloudfoundry	2.1.0.RELEASE	 
Spring Cloud Aws					2.1.0.RELEASE	 
Spring Cloud Task					2.1.0.RELEASE	 
Spring Cloud Kubernetes		1.0.0.RELEASE	(issues)
Spring Cloud Contract			2.1.0.RELEASE	(issues)
Spring Cloud Release			Greenwich.RELEASE	 
Spring Cloud Security			2.1.0.RELEASE	 
Spring Cloud Starter			Greenwich.RELEASE	 
Spring Cloud Bus					2.1.0.RELEASE	(issues)
Spring Cloud Config				2.1.0.RELEASE	(issues)
Spring Cloud Vault				2.1.0.RELEASE	(issues)
Spring Cloud Openfeign		2.1.0.RELEASE	(issues)
Spring Cloud Commons			2.1.0.RELEASE	 
Spring Cloud Dependencies	2.1.2.RELEASE


https://spring.io/projects/spring-cloud

Features:
 - Distributed/versioned configuration
 - Service registration and discovery
 - Routing
 - Service-to-service calls
 - Load balancing
 - Circuit Breakers
 - Global locks
 - Leadership election and cluster state
 - Distributed messaging


Spring Cloud Config
--------------------------------------------------------------------------------

centralized external CM backed by a git repo.
configuration resources map directly to Spring `environment` but could be 
used by non-spring apps if desired.


Spring Cloud Consul
--------------------------------------------------------------------------------

service discovery and CM with Hashicorp Consul.


================================================================================

	Bootstrap Context
	*****************

A Spring Cloud application operates by creating a “bootstrap” context, which is a parent context for the main application.   It is responsible for loading configuration properties from the external sources and for decrypting properties in the local external configuration files.

The two contexts share an Environment, which is the source of external properties for any Spring application. By default, bootstrap properties (not bootstrap.properties, but properties that are loaded during the bootstrap phase) are added with high precedence, so they cannot be overridden by local configuration.

bootstrap.yml is loaded before application.yml

Instead of application.yml (or .properties), you can use bootstrap.yml, keeping the external configuration for bootstrap and main context nicely separate. 

ex: bootstrap.yml
------------------

spring:
  application:
    name: foo
  cloud:
    config:
      uri: ${SPRING_CONFIG_URI:http://localhost:8888}


If your application needs any application-specific configuration from the server, it is a good idea to set the spring.application.name (in bootstrap.yml or application.yml).
 

You can disable the bootstrap process completely by setting 

	spring.cloud.bootstrap.enabled=false 

(for example, in system properties).

    public static void main(String[] args) throws IOException {
        System.setProperty("spring.cloud.bootstrap.enabled","false")
        run(Application.class, args)
    }

 or

 bootstrap-local.yml
 -------------------

spring.application.name: blah-springboot-hello-world
spring.cloud.bootstrap.enabled: false
spring.cloud.consul.enabled: false
spring.cloud.vault.enabled: false
log.location: logs


location of bootstrap properties
================================

The bootstrap.yml (or .properties) location can be specified by setting 

	spring.cloud.bootstrap.name (default: bootstrap) 
or 
	spring.cloud.bootstrap.location (default: empty)

in System properties.

If there is an active profile 
(from spring.profiles.active or through the Environment API in the context you are building), 
properties in that profile get loaded as well, the same as in a regular Spring Boot app
for example, from bootstrap-development.properties for a development profile.

or

	-Dspring.profiles.active=dev

via env variable

	export spring_profiles_active=dev



================================================================================

	Bootstrap Configuration
	***********************


Consul provides components for resolving some of the most common challenges in 
a microservice architecture:

- Service discovery - automatically register/unregister the network locations
  of service instances

- Health checking - detect when a service instance is up and running

- Distributed configuration - ensure all service instances use the same 
  configuration.


Note for OS X:
--------------

	Consul uses your hostname as the default node name.
	If your hostname contains periods, DNS queries to that node will not work with Consul.
	To avoid this, explicitly set the name of your node with the -node flag:

		$ consul agent -dev -node machine


================================================================================
================================================================================
================================================================================


	Spring Cloud Demo
	*****************

Using Vault and Consul instances created with `docker-compose` as described here:

	https://testdriven.io/blog/managing-secrets-with-vault-and-consul/
	https://github.com/testdrivenio/vault-consul-docker

To start the demo:
------------------

	$ docker-compose up -d --build


To shutdown and cleanup:
-------------------------

	$ docker-compose down -v --rmi all --remove-orphans
	$ docker system prune
	$ docker ps -a


Run the demo once started
--------------------------


https://www.baeldung.com/spring-cloud-consul


start bash shell into consul

	$ docker-compose exec consul bash

list consul members

	$ consul members [-detailed]
	Node          Address          Status  Type    Build  Protocol  DC         Segment
	b6f742be6509  172.21.0.2:8301  alive   server  1.2.1  2         localhost  <all>




================================================================================
================================================================================
================================================================================


