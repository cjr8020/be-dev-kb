
	*********************

		Spring Cloud

	*********************



Release train Spring Boot compatibility
Release Train					 Boot Version
-------------------------------------------------
Greenwich 						2.1.x
Finchley 							2.0.x
Edgware 							1.5.x
Dalston 							1.5.x


Greenwich.RELEASE
-----------------
https://spring.io/blog/2019/01/23/spring-cloud-greenwich-release-is-now-available

Spring Cloud Sleuth				2.1.0.RELEASE	(issues)
Spring Cloud Gcp					1.1.0.RELEASE	(issues)
Spring Cloud Build				2.1.2.RELEASE	 
Spring Cloud Netflix			2.1.0.RELEASE	(issues)
Spring Cloud Consul				2.1.0.RELEASE	 
Spring Cloud Gateway			2.1.0.RELEASE	(issues)
Spring Cloud							Greenwich.RELEASE	 
Spring Cloud Function			2.0.0.RELEASE	(issues)
Spring Cloud Stream				Fishtown.RELEASE	 
Spring Cloud Zookeeper		2.1.0.RELEASE	 
Spring Cloud Cloudfoundry	2.1.0.RELEASE	 
Spring Cloud Aws					2.1.0.RELEASE	 
Spring Cloud Task					2.1.0.RELEASE	 
Spring Cloud Kubernetes		1.0.0.RELEASE	(issues)
Spring Cloud Contract			2.1.0.RELEASE	(issues)
Spring Cloud Release			Greenwich.RELEASE	 
Spring Cloud Security			2.1.0.RELEASE	 
Spring Cloud Starter			Greenwich.RELEASE	 
Spring Cloud Bus					2.1.0.RELEASE	(issues)
Spring Cloud Config				2.1.0.RELEASE	(issues)
Spring Cloud Vault				2.1.0.RELEASE	(issues)
Spring Cloud Openfeign		2.1.0.RELEASE	(issues)
Spring Cloud Commons			2.1.0.RELEASE	 
Spring Cloud Dependencies	2.1.2.RELEASE


https://spring.io/projects/spring-cloud

Features:
 - Distributed/versioned configuration
 - Service registration and discovery
 - Routing
 - Service-to-service calls
 - Load balancing
 - Circuit Breakers
 - Global locks
 - Leadership election and cluster state
 - Distributed messaging


Spring Cloud Config
--------------------------------------------------------------------------------

centralized external CM backed by a git repo.
configuration resources map directly to Spring `environment` but could be 
used by non-spring apps if desired.


Spring Cloud Consul
--------------------------------------------------------------------------------

service discovery and CM with Hashicorp Consul.


================================================================================

	Bootstrap Context
	*****************

A Spring Cloud application operates by creating a “bootstrap” context, which is a parent context for the main application.   It is responsible for loading configuration properties from the external sources and for decrypting properties in the local external configuration files.

The two contexts share an Environment, which is the source of external properties for any Spring application. By default, bootstrap properties (not bootstrap.properties, but properties that are loaded during the bootstrap phase) are added with high precedence, so they cannot be overridden by local configuration.

bootstrap.yml is loaded before application.yml

Instead of application.yml (or .properties), you can use bootstrap.yml, keeping the external configuration for bootstrap and main context nicely separate. 

ex: bootstrap.yml
------------------

spring:
  application:
    name: foo
  cloud:
    config:
      uri: ${SPRING_CONFIG_URI:http://localhost:8888}


If your application needs any application-specific configuration from the server, it is a good idea to set the spring.application.name (in bootstrap.yml or application.yml).
 

You can disable the bootstrap process completely by setting 

	spring.cloud.bootstrap.enabled=false 

(for example, in system properties).

    public static void main(String[] args) throws IOException {
        System.setProperty("spring.cloud.bootstrap.enabled","false")
        run(Application.class, args)
    }

 or

 bootstrap-local.yml
 -------------------

spring.application.name: blah-springboot-hello-world
spring.cloud.bootstrap.enabled: false
spring.cloud.consul.enabled: false
spring.cloud.vault.enabled: false
log.location: logs


location of bootstrap properties
================================

The bootstrap.yml (or .properties) location can be specified by setting 

	spring.cloud.bootstrap.name (default: bootstrap) 
or 
	spring.cloud.bootstrap.location (default: empty)

in System properties.

If there is an active profile 
(from spring.profiles.active or through the Environment API in the context you are building), 
properties in that profile get loaded as well, the same as in a regular Spring Boot app
for example, from bootstrap-development.properties for a development profile.

or

	-Dspring.profiles.active=dev

via env variable

	export spring_profiles_active=dev



================================================================================

	Bootstrap Configuration
	***********************


Consul provides components for resolving some of the most common challenges in 
a microservice architecture:

- Service discovery - automatically register/unregister the network locations
  of service instances

- Health checking - detect when a service instance is up and running

- Distributed configuration - ensure all service instances use the same 
  configuration.


Note for OS X:
--------------

	Consul uses your hostname as the default node name.
	If your hostname contains periods, DNS queries to that node will not work with Consul.
	To avoid this, explicitly set the name of your node with the -node flag:

		$ consul agent -dev -node machine



================================================================================
=========================== spring-cloud-vault =================================
================================================================================

provides client-side support for externalized configuration

vault can 
 - manage static and dynamic secrets (like username/password) for remote 
   applications and resources
 - provide credentials for external services like databases, Consul, AWS, etc.

Spring Cloud Vault accesses different resources.
By default, the `secret` backend is enabled which accesses secret configs via
endpoints in the form:

/secret/{application}/{profile}
/secret/{application}
/secret/{defaultContext}/{profile}
/secret/{defaultContext}

where 
  `application` is injected from `spring.application.name`

	spring.application.name: some-app

  `profile` is an active profile (or comma-separated list of properties)

	spring.profiles.active: foo,dev


Discovery
=========

you can use a `DiscoveryClient` (like Spring Cloud Consul) to locate a Vault
server by setting

	spring.cloud.vault.discovery.enabled=true # default is false

so all you'd need is a `bootstrap.yml` with the appropriate discovery configuration.
default `serviceId` is "vault", but you can change that on the client with

	spring.cloud.vault.discovery.serviceId=

spring.cloud.vault:
  authentication: APPROLE
  app-role:
    role-id: some-id
  scheme: https

  discovery:
    enabled: true
    service-id: my-vault-service

Authentication methods
======================

Spring Cloud Vault supports:

	token
	AppId (deprecated as of Vault 0.6.1 in favor of AppRole)
	AppRole



token authentication
--------------------
Default method.
Token auth requires a static token to be provided using the Bootstrap Application Context.

spring.cloud.vault:
  authentication: TOKEN
  token: 00000000-0000-0000-0000-000000000000

AppRole authentication 
-----------------------
AppRole is intended for machine authentication.
AppRole authentication consists of two hard to guess (secret) tokens: 
 - RoleId and 
 - SecretId

spring.cloud.vault:
  authentication: APPROLE
  app-role:
    role-id: bde2076b-cccb-3cf0-d57e-bca7b1e83a52


generic.enabled: true|false
---------------------------

enables|disables non-versioned key-value backends.
	$ vault secrets enable -version=1 kv


Config Backends
***********************************************

Consul
======

Spring Cloud Vault can obtain credentials for Consul.
The Consul integration requires 

	spring-cloud-vault-config-consul

The integration can be enabled by setting

	spring.cloud.vault.consul.enabled=true  # default is "false"
	spring.cloud.vault.consul.role=<role-id>

spring.cloud.vault:
  authentication: APPROLE
  app-role.role-id: ${role-id}
  generic.enabled: false
  kv:
    enabled: true
  scheme: https
  consul:
    enabled: true
    role: ${spring.cloud.vault.application-name:${spring.application.name}}

enabled
	`true` enables the Consul backend config usage
role
	sets the role name of the Consul role definition
backend
	sets the path of the Consul mount to use
token-property
	sets the property name in which the Consul ACL token is stored


================================================================================
========================== spring-cloud-consul =================================
================================================================================

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.3.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<java.version>1.8</java.version>
		<spring-cloud.version>Greenwich.SR1</spring-cloud.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-consul-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-consul-discovery</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>


bootstrap.yml
--------------

spring:
  application:
    name: my-app
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery:
        enabled: true
        instance-id: ${spring.application.name}:${random.value}	


application.yml
---------------

management:
  endpoints:
    web:
      exposure:
        include: "*"


DiscoveryClientAPI
------------------

enabled with @EnableDiscoveryClient:

@SpringBootApplication
@EnableDiscoveryClient
public class DiscoveryClientApplication {
    // ...
}


Distributed Configuration with Consul
*************************************

Consul provides a key/value store for storing configuration and other metadata.
Configuration is loaded into the Spring Environment during the special bootstrap
phase.   Configuration is stored in the `/config` folder (on Consul) by default.
E.g., an application with name "my-app" and with the "dev" profile will have 
the following property sources:

	config/my-app,dev/
	config/my-app/
	config/application,dev/
	config/application/

The most specific property source is at the top.
Properties in the `config/application` folder are applicable to all applications
using consul for configuration.
Properties in the `config/my-app` are only available to the instances of the 
service named "my-app".

To activate

	spring-cloud-starter-consul-config

spring.cloud.consul.config.enabled: true  # <- default
spring.cloud.consul.config.enabled: false # disables Consul Config


demo:
-----

bootstrap.yml
-------------

spring:
  profiles:
    active: prod
  application:
    name: <your-app>
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery:
        enabled: true  
        instance-id: ${spring.application.name}:${random.value}
      config:
        enabled: true <-- seems to be the default

/**
 * assumes you have the following KVs defined in Consul
 * config/<your-app>,dev/my/prop=Hello DEV
 * config/<your-app>,prod/my/prop=Hello PROD
 */
@RestController
public class DistributedPropertiesController {

  @Value("${my.prop}")
  String value;

  @Autowired
  private MyProperties properties;

  @GetMapping("/getConfigFromValue")
  public String getConfigFromValue() {
    return value;
  }

  @GetMapping("/getConfigFromProperty")
  public String getConfigFromProperty() {
    return properties.getProp();
  }

}

properties class
-----------------

@RefreshScope
@Configuration
@ConfigurationProperties("my")
public class MyProperties {

  private String prop;

  public String getProp() {
    return prop;
  }

  public void setProp(String prop) {
    this.prop = prop;
  }

}


================================================================================
================================================================================
================================================================================


	Spring Cloud Demo
	*****************

Using Vault and Consul instances created with `docker-compose` as described here:

	https://testdriven.io/blog/managing-secrets-with-vault-and-consul/
	https://github.com/testdrivenio/vault-consul-docker

To start the demo:
------------------

	$ docker-compose up -d --build


To shutdown and cleanup:
-------------------------

	$ docker-compose down -v --rmi all --remove-orphans
	$ docker system prune
	$ docker ps -a


Run the demo once started
--------------------------


https://www.baeldung.com/spring-cloud-consul


start bash shell into consul

	$ docker-compose exec consul bash

list consul members

	$ consul members [-detailed]
	Node          Address          Status  Type    Build  Protocol  DC         Segment
	b6f742be6509  172.21.0.2:8301  alive   server  1.2.1  2         localhost  <all>




================================================================================
================================================================================
================================================================================


