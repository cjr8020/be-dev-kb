
*****************************

	concurrency in spring

*****************************


================================================================================

	using @Async
	************

1. enable Async support

	 @Configuration
	 @EnableAsync
	 public class AppConfig implements AsyncConfigurer {
	 	. . . 

	 }	

2. Provide your own customized Executor

	By default, SimpleAsyncTaskExecutor will be used which does not impose 
	a limit upone the number of spawned threads.


	2.1. Override the Executor at the Application Level to configure:

		core pool size

			When a new task is submitted, and fewer than corePoolSize threads are running, a new thread is created to handle the request, even if other worker threads are idle.

		max pool size

			If there are more than corePoolSize but less than  maximumPoolSize threads running, a new thread will be created only if the queue is full. By setting  corePoolSize and maximumPoolSize the same, you create a fixed-size thread pool. 

		queue capacity


	example: 
 
		Starting thread pool size: 1
		core pool size is 5
		max pool size is 10
		queue capacity: 100

	As requests come in, threads will be created up to 5 and then tasks will be added to the queue until it reaches 100. When the queue is full new threads will be created up to maxPoolSize. Once all the threads are in use and the queue is full tasks will be rejected. As the queue reduces, so does the number of active threads.


	 @Configuration
	 @EnableAsync
	 public class SpringAsyncConfig implements AsyncConfigurer {

	     @Override
	     public Executor getAsyncExecutor() {
	         ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
	         executor.setCorePoolSize(7);
	         executor.setMaxPoolSize(42);
	         executor.setQueueCapacity(11);
	         executor.setThreadNamePrefix("MyExecutor-");
	         executor.initialize();
	         return executor;
	     }

	     @Override
	     public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {
	         return new MyAsyncUncaughtExceptionHandler();
	     }
	 }


	2.2. Override the Executor at the Method Level

		Create a @Bean:

			@Configuration
			@EnableAsync
			public class SpringAsyncConfig {
			     
			    @Bean(name = "threadPoolTaskExecutor")
			    public Executor threadPoolTaskExecutor() {
			        return new ThreadPoolTaskExecutor();
			    }
			}

		Then the executor name should be provided as an attribute in @Async:


			@Async("threadPoolTaskExecutor")
			public void asyncMethodWithConfiguredExecutor() {
			    System.out.println("Execute method with configured executor - "
			      + Thread.currentThread().getName());
			}



3. provide AsyncUncaughtExceptionHandler 



================================================================================

	TaskExecutor
	************

org.springframework.core.task.TaskExecutor

extends Java's 
java.util.concurrent.Executor

https://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/scheduling.html

There are a number of pre-built implementations of TaskExecutor included with the Spring distribution. In all likelihood, you shouldn't ever need to implement your own.

================================================================================

	Spring Async Processing
	************************

https://spring.io/guides/gs/async-method/	

Spring has support to configure a TaskExecutor and the ability to async.ly 
execute methods annotated with @Async.

@SpringBootApplication
@EnableAsync

Spring Boot will by default create a TaskExecutor named `applicationTaskExecutor`.
When enabling @EnableAsync, it will automatically detect this instance and use 
it for async execution of methods, and will also enable the detection of 
@Async annotated methods.


Configuring the TaskExecutor
-----------------------------

Spring Boot will automatically configure a `ThreadPoolTaskExecutor`.
This can be configured through the properties in `spring.task.execution` 
namespace.

spring.task.execution.pool.core-size=4
spring.task.execution.pool.max-size=16
spring.task.execution.pool.queue-capacity=125
spring.task.execution.pool.thread-name-prefix=sbr-exec-


Constructing TaskExecutor
-------------------------

If you need to construct a TaskExecutor, Spring Boot provides the 
`TaskExecutorBuilder` - this builder class makes it easier to construct a
`TreadPoolTaskExecutor`.

@Bean 
public TaskExecutor customTaskExecutor(TaskExecutorBuilder builder) {
	return builder.corePoolSize(4)
		.maxPoolSize(16)
		.queueCapacity(125)
		.threadNamePrefix("sbr-exec-").build();
}

If there are, for some reason, multiple taskExectuor instances in your application,
you would need to either mark one of them as @Primary to be used as default
TaskExecutor, or use the AsyncConfigurer interface and implement the taskExecutor
method to return the default TaskExecutor to use.

@SringBootApplication
@EnableAsync
public class AsyncApp implements AsyncConfigurer {
	
	@Bean
	public ThreadPoolTaskExecutor taskExecutor() {...}

	@Override
	public Executor getAsyncExecutor() {
		return taskExecutor();
	}
}


Timeout
--------

Timeouts are not provided by the @Async annotation, since the timeout should be decided by the caller of the function, not the function itself.

methods should return an instance of Future, and the get() method on Future is used to specify the timeout.


	@Async
	public Future<String> doSomething() {
	   return new AsyncResult<String>("test");
	}

and then

	// spring makes this an async call
	Future<String> futureResult = obj.doSomething();  
	String result = futureResult.get(1, TimeUnit.SECOND);	

================================================================================

	Future vs CompletableFuture
	***************************

https://www.callicoder.com/java-8-completablefuture-tutorial/	

Java 8 CompletableFutures do not do timeouts.
Java 9 CompletableFutures improve timeout handling:
	orTimeout
	completeOnTimeOut 


CompletableFuture is an extension to Java's Future API introduced in Java 5.

A `Future` is used as a reference to the result of an async computation.
It provides an `isDone()` method to check whether the computation is done or not, 
and a `get()` method to retrieve the result of the computation when it is done.

`Future` API lacked important features:

- cannot be manually completed
- does not notify you of completion
- provides a `get()` method which blocks until the result is available
- multiple Futures cannot be chained together
- cannot combine multiple Futures together (cannot run multiple in parallel)
- no exception handling construct

CompletableFuture implements Future, CompletionStage


Combining CompletableFutures together
-------------------------------------

Let’s say that you want to fetch the details of a user from a remote API service and once the user’s detail is available, you want to fetch his Credit rating from another service.

Consider the following implementations of getUserDetail() and getCreditRating() methods -

CompletableFuture<User> getUsersDetail(String userId) {
	return CompletableFuture.supplyAsync(() -> {
		UserService.getUserDetails(userId);
	});	
}

CompletableFuture<Double> getCreditRating(User user) {
	return CompletableFuture.supplyAsync(() -> {
		CreditRatingService.getCreditRating(user);
	});
}


CompletableFuture.allOf()

	CompletableFuture.allOf is used in scenarios when you have a List of independent futures that you want to run in parallel and do something after all of them are complete.



CompletableFuture.anyOf()


join()
	join() - Returns the result value when complete, or throws an (unchecked) exception if completed exceptionally.
	


================================================================================

	Avoid OutOfMemoryError when @Async
	**********************************

OutOfMemoryError: unable to create new native thread error

https://craftingjava.com/prevent-oome-async/

@EnableAsync
-------------------------

	public @interface EnableAsync {

	  Class<? extends Annotation> annotation() default Annotation.class;
	  boolean proxyTargetClass() default false;
	  AdviceMode mode() default AdviceMode.PROXY;
	  int order() default Ordered.LOWEST_PRECEDENCE;

	}

@EnableAsync enables async method execution capability.

https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/EnableAsync.html

	By default, Spring will be searching for an associated thread pool definition: either a unique TaskExecutor bean in the context, or an Executor bean named "taskExecutor" otherwise. If neither of the two is resolvable, a SimpleAsyncTaskExecutor will be used to process async method invocations. Besides, annotated methods having a void return type cannot transmit any exception back to the caller. By default, such uncaught exceptions are only logged.

`SimpleAsyncTaskExecutor` will be used without explicitly configured Executor ..
(when mode is AdviceMode.PROXY (default))
which DOES NOT IMPOSE A LIMIT ON THE NUMBER OF SPAWNED THREADS


	To customize all this, implement AsyncConfigurer and provide:

	your own Executor through the getAsyncExecutor() method, and
	your own AsyncUncaughtExceptionHandler through the getAsyncUncaughtExceptionHandler() method.

AsyncConfiguration.java implementing AsyncConfigurer
------------------------

@Data
@EnableAsync
@Configuration
@ConfigurationProperties(prefix = "async.thread.pool")
public class AsyncConfiguration implements AsyncConfigurer {

  private int coreSize;
  private int maxSize;
  private int queueCapacity;

  @Override
  public Executor getAsyncExecutor() {
    ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
    executor.setCorePoolSize(coreSize);
    executor.setMaxPoolSize(maxSize);
    executor.setQueueCapacity(queueCapacity);
    executor.setThreadNamePrefix("worker-exec-");
    executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
    return executor;
  }

  @Override
  public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {
    return (ex, method, params) -> {
      Class<?> targetClass = method.getDeclaringClass();
      Logger logger = LoggerFactory.getLogger(targetClass);
      logger.error(ex.getMessage(), ex);
    };
  }

}


	NOTE: AsyncConfigurer configuration classes get initialized early in the application context bootstrap. If you need any dependencies on other beans there, make sure to declare them 'lazy' as far as possible in order to let them go through other post-processors as well.


	 @Configuration
	 @EnableAsync
	 public class AppConfig implements AsyncConfigurer {

	     @Override
	     public Executor getAsyncExecutor() {
	         ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
	         executor.setCorePoolSize(7);
	         executor.setMaxPoolSize(42);
	         executor.setQueueCapacity(11);
	         executor.setThreadNamePrefix("MyExecutor-");
	         executor.initialize();
	         return executor;
	     }

	     @Override
	     public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {
	         return new MyAsyncUncaughtExceptionHandler();
	     }
	 }

Note: In the above example the ThreadPoolTaskExecutor is not a fully managed Spring bean. Add the @Bean annotation to the getAsyncExecutor() method if you want a fully managed bean. In such circumstances it is no longer necessary to manually call the executor.initialize() method as this will be invoked automatically when the bean is initialized.


	 If only one item needs to be customized, null can be returned to keep the default settings. Consider also extending from AsyncConfigurerSupport when possible.





================================================================================

	Custom AsyncUncaughtExceptionHandler
	************************************

When a method return type is a Future, exception handling is easy – Future.get() method will throw the exception.

But, if the return type is void, exceptions will not be propagated to the calling thread. Hence we need to add extra configurations to handle exceptions.


public class CustomAsyncExceptionHandler
  implements AsyncUncaughtExceptionHandler {
 
    @Override
    public void handleUncaughtException(
      Throwable throwable, Method method, Object... obj) {
  
        System.out.println("Exception message - " + throwable.getMessage());
        System.out.println("Method name - " + method.getName());
        for (Object param : obj) {
            System.out.println("Parameter value - " + param);
        }
    }
     
}


================================================================================
