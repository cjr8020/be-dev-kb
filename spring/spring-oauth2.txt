
	OAuth 2.0 
	*********

http://projects.spring.io/spring-security-oauth/docs/oauth2.html

Other resources:
https://medium.com/@nydiarra/secure-a-spring-boot-rest-api-with-json-web-token-reference-to-angular-integration-e57a25806c50
https://github.com/nydiarra/springboot-jwt

https://medium.com/@nydiarra/secure-a-spring-boot-rest-api-with-json-web-token-reference-to-angular-integration-e57a25806c50
https://github.com/warumono-for-develop/spring-boot-oauth2-authorization-server-tutorial
https://github.com/warumono-for-develop/spring-boot-oauth2-resource-server-tutorial

http://stytex.de/blog/2016/02/01/spring-cloud-security-with-oauth2/
https://jugbd.org/2017/09/19/implementing-oauth2-spring-boot-spring-security/

RFCs:

https://tools.ietf.org/html/rfc7519


JwtClaimsSetVerifier
http://www.baeldung.com/spring-security-oauth-2-verify-claims

================================================================================

	oauth2
	******
The OAuth2 protocol is a delegated authz mechanism, where a client application
requests access to resources controlled by the user (resource owner) and hosted
by an API (resource server), and the authz server issues the client a more 
restricted set of credentials than those of the user.


	scopes
	******
Using scope parameter, you can:

* let a client application authenticate users and add'l info about them.
* implement granular access control to your API.
  In this case, you need to define custom scopes for your API and add 
  these newly-created scope to your scope request parameter.


  claims
  ******

OIDC has a notion of claims.  There are two types of claims:

1. Standard
2. Custom


Standard claims
---------------

These claims are user attributes and are intended to provide the client with
user details such as email, name and picture.

sub: 		subject, identifies the principal that is the subject of the JWT
iss:		issuer, identifies the principal that issued the JWT
aud:		audience, identifies the recipients that the JWT is intended for.
exp:		expiration time, after which the JWT must not be accepted.
nbf:		not before
iat:		issued at, identifies the time at which the JWT was issued.
jti:		JWT ID, a unique identifier for the JWT.




================================================================================

Provider
--------

	responsible for exposing OAuth 2.0 protected resources.
	providers configuration involves establishing that clients can access its
	protected resources independently, or in behalf of a user.

	providers manages and and verifies OAuth 2.0 tokens.
	where applicable, the provider must also supply an interface for the user
	to confirm that a client can be granted access to the protected resources.

	Spring OAuth 2.0 Provider implementation

	split between 

		Authorization Service and
		Resource Service

	which can reside in the same application, or split across two applications.
	multiple Resource Servers share an Authorization Service.

	Token requests are handled by Spring MVC controller endpoints, and
	access to protected resources is handled by standard Spring Security request
	filters.

	Authorization Server endpoints
	------------------------------

		AuthorizationEndpoint   

			(default URL) /oauth/authorize

		TokenEndpoint

			(default URL) /oauth/token

	Resource Server filter
	---------------

		OAuth2AuthenticationProcessingFilter

			is required to implement an OAuth 2.0 Resource Server
			used to load the Authentication for the request given an
			authenticated access token.

		OAuth filter order:   SystemProperties.ACCESS_OVERRIDE_ORDER - 1

			this places it after the actuator endpoints but before the basic
			authentication filter chain.
			
			Prior to Spring Boot 1.5.0 it was 3 
			(security.oauth2.resoure.filter-order=3)




================================================================================

Resource Server Configuration
*****************************

	serves resources protected by the OAuth2 token.

	Spring OAuth provides a Spring Security authentication filter that 
	implements the protection.  You can switch it on with 

@EnableResourceServer

	on a @Configuration class, and configure it (as necessary) using a 
	`ResourceServerConfigurer`.

	adds a filter of type `OAuth2AuthenticationProcessingFilter` automatically to
	the Spring Security filter chain.

	Here's what can be configured:

	tokenService
		the bean that defines the token services
		(instance of ResourceServerTokenServices)

	resourceId
		the id for the resource (optional, but recommended and will be validated
		by the Authn server if present).

	other extension points for the resource server 
		(e.g. tokenExtractor for extracting tokens from incoming requests)

	request matchers for protected resources (defaults to plain "authenticated")

	other customizations for the proteted resources permitted by the 
		HttpSecurity configurer in Spring Security


ResourceServerTokenServices

	the other part of the contact with the Authn Server.

	If the Resource Server and Authn Server are in the same app, and you use
	`DefaultTokenServices`, then you don't have to do much - it implements all
	the necessary interfaces so it is automatically consistent.

	If your Resource Server is a separate application, then you have to make sure
	you match the capabilities of the Authn Server and provide 
	`ResourceServerTokenServices` that knows how to decode the tokens correctly.


EnableWebSecurity and EnableGlobalMethodSecurity(prePostEnabled = true)

In order to use Expression-Based Access Controls for method-level security
we need to add:

	@EnableWebSecurity
	@EnableGlobalMethodSecurity(prePostEnabled = true)


Example
--------------------------------------------------------------------------------

@EnableResourceServer
@Configuration
@EnableConfigurationProperties(OAuthProperties.class)
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class ResourceServerConfiguration extends ResourceServerConfigurerAdapter {

  @Autowired
  private OAuthProperties oAuthProperties;

  @Autowired
  private TokenStore tokenStore;

  @Autowired
  private JwtAccessTokenConverter accessTokenConverter;

  @Autowired
  private ResourceServerTokenServices tokenServices;

  @Override
  public void configure(HttpSecurity http) throws Exception {
    http
        .sessionManagement()
          .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
        .and()
        .authorizeRequests()
          .antMatchers("/actuator/**").permitAll()
        .and()
        .authorizeRequests()
          .anyRequest().authenticated()
        .and()
        .httpBasic()
        .and()
        .csrf().disable()
        .exceptionHandling()
        .authenticationEntryPoint(
            (request, response, exception) -> response.sendError(HttpServletResponse.SC_UNAUTHORIZED)
        )
    ;
  }

  @Override
  public void configure(ResourceServerSecurityConfigurer resources) throws Exception {
//    resources.resourceId(null);  // needed if tokens do not contain resourceId
    resources.resourceId(oAuthProperties.getResourceId());  // needed if tokens contain resourceId
  }
}

--------------------------------------------------------------------------------

	Multiple Entry Points
	*********************

Objective:
1. have /actuator endpoint secured with Basic Auth
2. Resource Server is a fall-though default security config.
3. higher-order HttpSecurity can be provided 


Actuator entry point with priority Order(1)
-------------------------------------------


  @Order(1)
  @Configuration
  public static class ActuatorSecurityConfiguration extends WebSecurityConfigurerAdapter {

    @Bean
    AuthenticationEntryPoint authenticationEntryPoint() {
      BasicAuthenticationEntryPoint entryPoint = new BasicAuthenticationEntryPoint();
      entryPoint.setRealmName("actuator realm");
      return entryPoint;
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
      //@formatter:off
      http
          .antMatcher("/actuator/**")
          .authorizeRequests()
          .anyRequest().hasRole(ACTUATOR_SECURITY_ROLE)
          .and()
          .httpBasic()
          .authenticationEntryPoint(authenticationEntryPoint());
      //@formatter:on
    }
  }	

Resource Server entry point at default Order level 
--------------------------------------------  

OAuth filter order:   SystemProperties.ACCESS_OVERRIDE_ORDER - 1

	this places it after the actuator endpoints but before the basic
	authentication filter chain.

Resource Server HttpSecurity has antMatcher pattern of "/**"


@Configuration
@EnableWebSecurity(debug = true)
@EnableResourceServer
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class OAuthResourceServerConfiguration extends ResourceServerConfigurerAdapter {

  @Value("${oauth.resourceId}")
  private String resourceId;

  @Autowired
  private TokenStore tokenStore;

  @Autowired
  private JwtAccessTokenConverter accessTokenConverter;

  @Autowired
  private ResourceServerTokenServices tokenServices;


  @Override
  public void configure(HttpSecurity http) throws Exception {
    http
        .antMatcher("/**")
        .authorizeRequests()
          .anyRequest().authenticated()
        .and()
          .sessionManagement()
          .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
        .and()
          .csrf().disable()
        .exceptionHandling()
          .authenticationEntryPoint(
            (request, response, exception) -> response.sendError(HttpServletResponse.SC_UNAUTHORIZED)
        )
    ;
  }

  @Override
  public void configure(ResourceServerSecurityConfigurer resources) throws Exception {
    resources.tokenServices(tokenServices);
//    resources.resourceId(null);  // needed if tokens do not contain resourceId
    resources.resourceId(resourceId);  // needed if tokens contain resourceId
  }


}


Override can be added with @Order(Ordered.HIGHEST_PRECEDENCE)
--------------------------------------------------------------

This entry point will override the above two
provided the antMatcher pattern is matched:


@Order(Ordered.HIGHEST_PRECEDENCE)
@Configuration
public class HelloWorldWebSecurityConfiguration extends WebSecurityConfigurerAdapter {

  @Override
  protected void configure(HttpSecurity http) throws Exception {
    http
        .antMatcher("/helloworld/**")
        .authorizeRequests()
        .anyRequest()
        .permitAll();
  }
}



================================================================================

	Authorization Server Configuration
	**********************************

As you configure the Authn Server, you have to consider the grant type that the
client is to use to obtain an access token from the end-user, e.g.:

- authorization code
- user credentials
- refresh token

@EnableAuthorizationServer annotation 
	is used to configure the OAuth 2.0 Authn Server, together with any

@Bean 
	that implement AuthorizationServerConfigurer

AuthorizationServerConfigurerAdapter
	adapter implementation with empty methods.

AuthorizationServerSecurityConfigurer
	defines the security constraints on the token endpoint.

AuthorizationServerEndpointsConfigurer
	defines the authorization and token endpoints and the token services.



	Client Details Service
--------------------------------------------------------------------------------	

ClientDetailsServiceConfigurer
	a configurer that defines the client details service. 
	Client details can be initialized, or you can just refer to an existing store.

	a callback from your AuthorizationServerConfigurer
	can be used to define an in-memory or JDBC implementation of the client
	details service.  Important attributes of a client are:

		- clientId (required)
		- secret (required for trusted clients)
		- scope 
			scope to which client is limited.  
			if undefined or empty (the default), the client is not limited by scope.
		- authorizedGrantTypes (default: emtpy)
			grant types that are authorized for the client to use.
		- authorities
			authorities granted to the client.


	Here is an example of request 

	`$ curl client:secret@localhost:8080/oauth/token -d grant_type=password -d username=user -d password=pwd`

		where 
			'client' is clientId
			'secret' is client secret
			sent via Authorization: Basic XXX header
		and
			grant_type
			username
			password
		are sent as form parameters
		along with Content-Type: application/x-www-form-urlencoded


	To allow (untrusted) clients access to /oauth/token interface

		https://stackoverflow.com/questions/35785628/spring-security-oauth-2-0-client-secret-always-required-for-authorization-code

		Authenticating the client using the form parameters instead of basic auth 
		is enabled using the allowFormAuthenticationForClients() method 
		as shown in the code sample below.

			class AuthorizationServerConfigurer extends AuthorizationServerConfigurerAdapter {

			    @Override
			    public void configure(AuthorizationServerSecurityConfigurer security) {
			        security
			                .tokenKeyAccess("permitAll()")
			                .checkTokenAccess("isAuthenticated()")
			                .allowFormAuthenticationForClients()
			    }
			}


		The allowFormAuthenticationForClients() method triggers the addition of the ClientCredentialsTokenEndpointFilter which allows for authentication via form parameters.



	JWT Token 
--------------------------------------------------------------------------------	

JwtAccessTokenConverter 
	helper that translates between JWT encoded token values and OAuth authn
	information (in both directions);
	also acts as TokenEnhancer when tokens are granted.

	JwtAccessTokenConverter can be used with a symmetric key to sign tokens:


		@Bean
		public JwtAccessTokenConverter accessTokenConverter() {
			JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
			converter.setSigningKey(signingKey);
			return converter;
		}

	or, it can be used with an asymmetyric key pair to sign tokens

	http://www.baeldung.com/spring-security-oauth-jwt

	1. generate the keys - a .jks file

		keytool -genkeypair -alias mytest 
                    -keyalg RSA 
                    -keypass mypass 
                    -keystore mytest.jks 
                    -storepass mypass

    2. export public key

    	keytool -list -rfc --keystore mytest.jks | openssl x509 -inform pem -pubkey

    3. We take only our Public key and copy it to our resource server src/main/resources/public.txt

    	-----BEGIN PUBLIC KEY-----
		MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAgIK2Wt4x2EtDl41C7vfp
		OsMquZMyOyteO2RsVeMLF/hXIeYvicKr0SQzVkodHEBCMiGXQDz5prijTq3RHPy2
		/5WJBCYq7yHgTLvspMy6sivXN7NdYE7I5pXo/KHk4nz+Fa6P3L8+L90E/3qwf6j3
		DKWnAgJFRY8AbSYXt1d5ELiIG1/gEqzC0fZmNhhfrBtxwWXrlpUDT0Kfvf0QVmPR
		xxCLXT+tEe1seWGEqeOLL5vXRLqmzZcBe1RZ9kQQm43+a9Qn5icSRnDfTAesQ3Cr
		lAWJKl2kcWU1HwJqw+dZRSZ1X4kEXNMyzPdPBbGmU6MHdhpywI7SKZT7mX4BDnUK
		eQIDAQAB
		-----END PUBLIC KEY-----

	4. exclude the key file by the maven filtering process

		<build>
		    <resources>
		        <resource>
		            <directory>src/main/resources</directory>
		            <filtering>true</filtering>
		            <excludes>
		                <exclude>*.jks</exclude>
		            </excludes>
		        </resource>
		    </resources>
		</build>

	If we’re using Spring Boot, we need to make sure that our JKS file is added to application classpath via the Spring Boot Maven Plugin – addResources:

		<build>
	    <plugins>
	        <plugin>
	            <groupId>org.springframework.boot</groupId>
	            <artifactId>spring-boot-maven-plugin</artifactId>
	            <configuration>
	                <addResources>true</addResources>
	            </configuration>
	        </plugin>
	    </plugins>
	</build>


	5. Authorization Server

		@Bean
		public JwtAccessTokenConverter accessTokenConverter() {
		    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
		    KeyStoreKeyFactory keyStoreKeyFactory = 
		      new KeyStoreKeyFactory(new ClassPathResource("mytest.jks"), "mypass".toCharArray());
		    converter.setKeyPair(keyStoreKeyFactory.getKeyPair("mytest"));
		    return converter;
		}	


	6. Resource Server

		@Bean
		public JwtAccessTokenConverter accessTokenConverter() {
		    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
		    Resource resource = new ClassPathResource("public.txt");
		    String publicKey = null;
		    try {
		        publicKey = IOUtils.toString(resource.getInputStream());
		    } catch (final IOException e) {
		        throw new RuntimeException(e);
		    }
		    converter.setVerifierKey(publicKey);
		    return converter;
		}


================================================================================


	Resource Server JWT validation
	******************************

JWT can be validated on the resource server side using either

	(a) symmetric key 
or 
	(b) asymmetric key 

signing.

This is configurable in the JwtAccessTokenConverter both on the 
Authn and Resource server:

authn server
------------

  @Bean
  public JwtAccessTokenConverter accessTokenConverter() {
    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
    converter.setSigningKey(signingKey);
    return converter;
  }

resource server
---------------

  @Bean
  public JwtAccessTokenConverter accessTokenConverter() {
    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
    converter.setSigningKey(oAuthProperties.getSigningKey());
    converter.setAccessTokenConverter( new JwtConverter() ); // get JWT claims
    return converter;
  }
	
with (b) asymmetric key
see ( http://www.baeldung.com/spring-security-oauth-jwt ) example above.


authn server
------------

	@Bean
	public JwtAccessTokenConverter accessTokenConverter() {
	    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
	    KeyStoreKeyFactory keyStoreKeyFactory = 
	      new KeyStoreKeyFactory(new ClassPathResource("mytest.jks"), "mypass".toCharArray());
	    converter.setKeyPair(keyStoreKeyFactory.getKeyPair("mytest"));
	    return converter;
	}

resource server
---------------

	@Bean
	public JwtAccessTokenConverter accessTokenConverter() {
	    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
	    Resource resource = new ClassPathResource("public.txt");
	    String publicKey = null;
	    try {
	        publicKey = IOUtils.toString(resource.getInputStream());
	    } catch (final IOException e) {
	        throw new RuntimeException(e);
	    }
	    converter.setVerifierKey(publicKey);
	    return converter;
	}


================================================================================

	resource server response: 
	Invalid token does not contain resource id (oauth2-resource)
	************************************************************

	https://stackoverflow.com/questions/28703847/how-do-you-set-a-resource-id-for-a-token

You need to add configure(ResourceServerSecurityConfigurer) method to your 
ResourceServerConfigurer.

Example:

	@Configuration
	@EnableResourceServer
	public class ResourceServer extends ResourceServerConfigurerAdapter{

	    @Override 
	    public void configure(HttpSecurity http) throws Exception {
	         // @formatter:off
	         http
	         .requestMatchers().antMatchers("/bookmarks", "/bookmarks/**")    
	         .and()
	         .authorizeRequests().anyRequest().access("#oauth2.hasScope('write')");
	         // @formatter:on
	    }

	    @Override
	    public void configure(ResourceServerSecurityConfigurer resources) throws Exception {
	         resources.resourceId(OAuth2Configuration.RESOURCE_ID);
	    }

	}

If your token was genereated without and resource id, then set it to null:

		@Override
		public void configure(ResourceServerSecurityConfigurer resources) throws Exception {
			resources.resourceId(null);  // needed if tokens do not contain resourceId
		}

		
================================================================================

	JWT 
	***********

Example

	{
	  "aud": [
	    "test-oauth2-resourceid"
	  ],
	  "user_name": "john.doe",
	  "scope": [
	    "read",
	    "write",
	    "trust"
	  ],
	  "exp": 1511987503,
	  "authorities": [
	    "STANDARD_USER"
	  ],
	  "jti": "825d83bd-25b5-4e45-9683-09b01f4187e5",
	  "client_id": "test-web-clientid"
	}



aud
	the audience claim identifies the recipients that the JWT is intended for.	
	each principal intended to process the JWT must identify itself with a
	value in the audience claims

jti
	JWT	ID Claim (OPTIONAL)
	provides a unique identifier for the JWT.
	the identifier value MUST be assigned in a manner that ensures that 
	there is a negligible probability that the same value will be accidentally
	assigned to a different data object.
	the "jti" claim can be used to prenent the JWT from being replayed.

exp
	Expiration Time Claim (OPTIONAL)
	the "exp" claim identifies the expiration time on or after which the JWT
	MUST NOT be accepted for processing.
	Implementors MAY provide for some small leeway, usually no mnore than a 
	few minutes, to account for clock skew.
	Its value MUST be a number containing a NumericDate value.


================================================================================

	Custom Request Matcher for ResourceServerConfigurerAdapter
	**********************************************************

to only process requests containing Bearer tokens

@EnableResourceServer
//@EnableGlobalMethodSecurity(prePostEnabled = true)
public class OAuthResourceServerConfiguration extends ResourceServerConfigurerAdapter {

  @Value("${oauth.resourceId}")
  private String resourceId;

  @Autowired
  private TokenStore tokenStore;

  @Autowired
  private JwtAccessTokenConverter accessTokenConverter;

  @Autowired
  private ResourceServerTokenServices tokenServices;


  @Override
  public void configure(HttpSecurity http) throws Exception {
    http
        .requestMatcher(new OAuthRequestedMatcher())
        .authorizeRequests()
          .anyRequest().authenticated()
        .and()
          .sessionManagement()
          .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
        .and()
          .csrf().disable()
        .exceptionHandling()
          .authenticationEntryPoint(
            (request, response, exception) -> response.sendError(HttpServletResponse.SC_UNAUTHORIZED)
        )
    ;
  }

  @Override
  public void configure(ResourceServerSecurityConfigurer resources) throws Exception {
    resources.tokenServices(tokenServices);
//    resources.resourceId(null);  // needed if tokens do not contain resourceId
    resources.resourceId(resourceId);  // needed if tokens contain resourceId
  }

  private static class OAuthRequestedMatcher implements RequestMatcher {
    public boolean matches(HttpServletRequest request) {
      String auth = request.getHeader("Authorization");
      // Determine if the client request contained an OAuth Authorization
      boolean haveOauth2Token = (auth != null) && auth.startsWith("Bearer");
      boolean haveAccessToken = request.getParameter("access_token") != null;
      return haveOauth2Token || haveAccessToken;
    }
  }

}


================================================================================

	Access custom JWT claims
	*************************
https://stackoverflow.com/questions/46333945/accessing-a-spring-oauth-2-jwt-payload-inside-the-resource-server-controller


Step 1: get Spring to copy JWT content into Authentication:


	@Configuration
	@EnableResourceServer
	@EnableGlobalMethodSecurity(prePostEnabled = true)
	public class SecurityConfig extends ResourceServerConfigurerAdapter{

	    @Override
	    public void configure(ResourceServerSecurityConfigurer config) {
	        config.tokenServices( createTokenServices() );
	    }

	    @Bean
	    public DefaultTokenServices createTokenServices() {
	        DefaultTokenServices defaultTokenServices = new DefaultTokenServices();
	        defaultTokenServices.setTokenStore( createTokenStore() );
	        return defaultTokenServices;
	    }

	    @Bean
	    public TokenStore createTokenStore() {               
	        return new JwtTokenStore( createJwtAccessTokenConverter() );
	    }

	    @Bean
	    public JwtAccessTokenConverter createJwtAccessTokenConverter() {
	        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();     
	        converter.setAccessTokenConverter( new JwtConverter() );
	        return converter;
	    }

	    public static class JwtConverter extends DefaultAccessTokenConverter implements JwtAccessTokenConverterConfigurer {

	        @Override
	        public void configure(JwtAccessTokenConverter converter) {
	            converter.setAccessTokenConverter(this);
	        }

	        @Override
	        public OAuth2Authentication extractAuthentication(Map<String, ?> map) {
	            OAuth2Authentication auth = super.extractAuthentication(map);
	            auth.setDetails(map); //this will get spring to copy JWT content into Authentication
	            return auth;
	        }
	    }
	}

Step 2: access token content

	Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        
	Object details = authentication.getDetails();        
	if ( details instanceof OAuth2AuthenticationDetails ){
	    OAuth2AuthenticationDetails oAuth2AuthenticationDetails = (OAuth2AuthenticationDetails)details;

	    Map<String, Object> decodedDetails = (Map<String, Object>)oAuth2AuthenticationDetails.getDecodedDetails();

	    System.out.println( "My custom claim value: " + decodedDetails.get("MyClaim") );
	}  


create Authentication details bean with factory
--------------------------------------------------------

A better approach could be to create a request-scoped bean that will be
created for every request, and the corresponding factory ... 



	import java.util.ArrayList;
	import java.util.List;
	import java.util.Map;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
	import org.springframework.context.annotation.Bean;
	import org.springframework.context.annotation.Configuration;
	import org.springframework.context.annotation.Scope;
	import org.springframework.context.annotation.ScopedProxyMode;
	import org.springframework.security.core.Authentication;
	import org.springframework.security.core.context.SecurityContextHolder;
	import org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails;

	/**
	 * JWT authentication context factory responsible for creating
	 * a request-scoped bean containing JWT auithentication context.
	 */
	@Configuration
	public class JwtAuthenticationContextFactory {

	  /**
	   * Request-scoped bean containing JWT authentication context.
	   * @return JwtAuthenticationContext
	   */
	  @Bean
	  @Scope(value = "request", proxyMode = ScopedProxyMode.TARGET_CLASS)
	  public JwtAuthenticationContext createJwtAuthenticationContext() {
	    // this method should be called on every request
	    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	    return new JwtAuthenticationContext(authentication);
	  }


	  /**
	   * JWT authentication context.
	   *
	   <p>JwtAuthenticationContext: {
	   aud=[test-oauth2-resourceid],
	   user_name=john.doe,
	   scope=[read, write, trust],
	   exp=1512009851,
	   authorities=[STANDARD_USER],
	   jti=df64d274-4f30-433c-8557-c27004c3e4bf,
	   client_id=test-web-clientid
	   }
	   */
	  public class JwtAuthenticationContext {
	    private final Logger log = LoggerFactory.getLogger(JwtAuthenticationContext.class);

	    private List<String> audience;
	    private String username;
	    private List<String> scopes;
	    private Long expriresTimestamp;
	    private List<String> authorities;
	    private String jti;
	    private String clientId;

	    /**
	     * Constructor.
	     * @param authentication OAuth2AuthenticationDetails
	     */
	    @SuppressWarnings("unchecked")
	    public JwtAuthenticationContext(final Authentication authentication) {
	      Object details = authentication.getDetails();
	      try {
	        OAuth2AuthenticationDetails authDetails = (OAuth2AuthenticationDetails) details;
	        log.debug("OAuth2AuthenticationDetails: {}", authDetails.getDecodedDetails());
	        Map<String, Object> decodedDetails = (Map<String, Object>) authDetails.getDecodedDetails();
	        this.audience = (ArrayList<String>) decodedDetails.get("aud");
	        this.username = (String) decodedDetails.get("user_name");
	        this.jti = (String) decodedDetails.get("jti");
	      } catch (Throwable throwable) {
	        log.error("not OAuth2 Authentication Details. Error: {}", throwable);
	        throw throwable;
	      }
	    }

	    public List<String> getAudience() {
	      return audience;
	    }

	    public void setAudience(List<String> audience) {
	      this.audience = audience;
	    }

	    public String getUsername() {
	      return username;
	    }

	    public void setUsername(String username) {
	      this.username = username;
	    }

	    public List<String> getScopes() {
	      return scopes;
	    }

	    public void setScopes(List<String> scopes) {
	      this.scopes = scopes;
	    }

	    public Long getExpriresTimestamp() {
	      return expriresTimestamp;
	    }

	    public void setExpriresTimestamp(Long expriresTimestamp) {
	      this.expriresTimestamp = expriresTimestamp;
	    }

	    public List<String> getAuthorities() {
	      return authorities;
	    }

	    public void setAuthorities(List<String> authorities) {
	      this.authorities = authorities;
	    }

	    public String getJti() {
	      return jti;
	    }

	    public void setJti(String jti) {
	      this.jti = jti;
	    }

	    public String getClientId() {
	      return clientId;
	    }

	    public void setClientId(String clientId) {
	      this.clientId = clientId;
	    }
	  }

	}


... and then inject it into resource controllers

@RestController
@CrossOrigin
public class SomeResourceController {


  @Autowired
  private JwtAuthenticationContext jwtAuthenticationContext;

  @RequestMapping(value = "/some-resource", method = RequestMethod.GET)
  @PreAuthorize("hasAuthority('STANDARD_USER')")
  public List<Resource> someResource() {

    log.info("JWT username: {}", jwtAuthenticationContext.getUsername());
    log.info("JWT audience: {}", jwtAuthenticationContext.getAudience());
    log.info("JWT scopes: {}", jwtAuthenticationContext.getScopes());
    log.info("JWT expires: {}", jwtAuthenticationContext.getExpriresTimestamp());
    log.info("JWT authorities: {}", jwtAuthenticationContext.getAuthorities());
    log.info("JWT JTI: {}", jwtAuthenticationContext.getJti());
    log.info("JWT client ID: {}", jwtAuthenticationContext.getClientId());

    return blah;
  }

================================================================================

	JwtClaimsSetVerifier
	********************

http://www.baeldung.com/spring-security-oauth-2-verify-claims


  /**
   * This JwtClaimsSetVerifier verifies that the JWT token contains a valid
   * "user_name" claim.
   */
  public static class UserNameJwtClaimVerifier implements JwtClaimsSetVerifier {

    @Override
    public void verify(Map<String, Object> claims) throws InvalidTokenException {
      String username = (String) claims.get("user_name");
      log.debug("JWT 'user_name' claim: {}", username);
      if ((username == null) || (username.length() == 0)) {
        throw new InvalidTokenException("user_name claim is missing or empty.");
      }
    }
  }

  @Bean
  public JwtClaimsSetVerifier jwtClaimsSetVerifier() {
    return new UserNameJwtClaimVerifier();
  }

If you have several Verifiers, you can add them to 

DelegatingJwtClaimsSetVerifier
------------------------------

//  @Bean
//  public JwtClaimsSetVerifier jwtClaimsSetVerifier() {
//    return new DelegatingJwtClaimsSetVerifier(Arrays.asList(
//        new UserNameJwtClaimVerifier()
//    ));
//  }


  /**
   * JWT token converter allows us to apply our signing key to enable token validation.
   * @return JwtAccessTokenConverter token converter
   */
  @Bean
  public JwtAccessTokenConverter accessTokenConverter() {
    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
    converter.setSigningKey(signingKey);
    converter.setAccessTokenConverter(new JwtConverter());
    converter.setJwtClaimsSetVerifier(jwtClaimsSetVerifier());
    return converter;
  }


================================================================================


