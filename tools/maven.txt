
	*************
	    Maven
	*************

	

	*************

		Maven

	*************
    
Displays a ton of diagnostic env info

> mvn help:system

=====================================================================

  Installation / configuration
  ****************************

1. download from 

  https://maven.apache.org/download.cgi

2. unzip and create symlink:

  C:\apache>mklink /D apache-maven apache-maven-3.3.3
  symbolic link created for apache-maven <<===>> apache-maven-3.3.3

  When configuring your PATH, use the link.

3. Creating ENV vars

  0. Prerequisite  JAVA_HOME referencing a JSE 8 JDK

      Since Maven is a Java-based tool, you must have JAVA_HOME System variable created prior to continuing..
      JDK 8 has been downloaded to H:\Java

  1. Create M2_HOME and M2 environment variables.

      Open Environment Variables dialog with elevated priviledges, and create two System variables:

      M2_HOME = C:\apache\apache-maven    (or wherever you unpacked maven on your machine)
      M2           = %M2_HOME%\bin

  2. Add %M2% to PATH

      In the same dialog, add %M2% System environment variable to Path

      Path   = ...;%M2%

  3. To confirm that your Path has been set up correctly, open new command prompt and type "mvn --version":

    > mvn -version

4. Configure Maven settings.xml

The file location is:  ${user.home}/.m2/settings.xml
The question arises what is ${user.home}?
Execute the following in the command prompt:

  > mvn -X

    Reading user settings from C:\Users\craiskin\.m2\settings.xml

5. Configure Maven to use your Corporate instance of Nexus as proxy

  src: https://support.sonatype.com/entries/20943003-Configure-Maven-to-Download-from-Nexus

<?xml version="1.0" encoding="UTF-8"?>
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" 
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">


  <mirrors>
    <mirror>
      <id>nexus</id>
      <mirrorOf>*</mirrorOf>
      <url>http://nexus.corp.com:8081/nexus/content/groups/public</url>
    </mirror>
  </mirrors>
  <profiles>
    <profile>
      <id>nexus</id>
      <repositories>
        <repository>
          <id>central</id>
          <url>http://central</url>
          <releases><enabled>true</enabled></releases>
          <snapshots><enabled>true</enabled></snapshots>
        </repository>
      </repositories>
     <pluginRepositories>
        <pluginRepository>
          <id>central</id>
          <url>http://central</url>
          <releases><enabled>true</enabled></releases>
          <snapshots><enabled>true</enabled></snapshots>
        </pluginRepository>
      </pluginRepositories>
    </profile>
  </profiles>
  <activeProfiles>
    <!--make the profile active all the time -->
    <activeProfile>nexus</activeProfile>
  </activeProfiles>
</settings>


=====================================================================

  providing alternate configuration
  *********************************

$ mvn --

 YourOwnSettings.xml clean install
or 
mvn -s YourOwnSettings.xml clean install  

alternate location of local chache:

via command line:

$ mvn clean test -Dmaven.repo.local=$HOME/.my/other/repository

via settings:

<settings>
  ...
  <localRepository>/path/to/local/repo/</localRepository>
  ...
</settings>

=====================================================================

    Maven Options
    *************

Depending on the application, you may have to configure Java Heap for Maven

Typically, this is done via configuring MAVEN_OPTS env variable.

  e.g.:
  export MAVEN_OPTS="-Xms1024m -Xmx4096m -XX:PermSize=1024m"        
  
On Linux, you can add this to your bash script or .bashrc
On Windows, either set an env var for your userprofile, or in a bat script.    

=====================================================================

    supporting different JDK versions in maven
    ******************************************
    
http://maven.apache.org/plugins/maven-compiler-plugin/examples/compile-using-different-jdk.html


    
we solved this problem by explicitely sepecify the javac in config of compile plugin (with JAVA_HOME_6 and JAVA_HOME_7 defined as environment variables)

and for Java 6 module

    <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
            <source>1.6</source>
            <target>1.6</target>
            <showDeprecation>true</showDeprecation>
            <showWarnings>true</showWarnings>
            <executable>${env.JAVA_HOME_6}/bin/javac</executable>
            <fork>true</fork>
        </configuration>
    </plugin>
    
and for Java 7 module

    <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
            <source>1.7</source>
            <target>1.7</target>
            <showDeprecation>true</showDeprecation>
            <showWarnings>true</showWarnings>
            <executable>${env.JAVA_HOME_7}/bin/javac</executable>
            <fork>true</fork>
        </configuration>
    </plugin>
    


=====================================================================



    ********************
    Multi Module Project
    ********************
    
http://maven.apache.org/plugins/maven-eclipse-plugin/reactor.html    
Apache > Maven > Plugins > Maven Eclipse plugin > Multiple Module Project with Eclipse

Benefits:

    1. Creating a multi-module project has many benefits, one of them being the ability to build every artifact in a project with one simple “mvn compile” command. 

    2. Another benefit is that if you are using either the maven eclipse:eclipse plugin or the idea:idea plugin, you can enter this command at the root of the project and it will generate all of the project files for all of the contained modules.


==> See revised workflow for idiot NTLM proxy environments below.

Create a multimodule project
----------------------------


Create parent project, "awesome-stuff".

> mvn archetype:generate -DgroupId=com.company -DartifactId=awesome-stuff -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false -DarchetypeCatalog=https://nexus.company.com:8443/nexus/content/groups/public/archetype-catalog.xml


Change to parent project directory

> cd awesome-stuff


Clean up

> edit pom.xml (change packaging to "pom")
> rmdir /S src (remove src dir)


Create modules

1. Create core module - "awesome-stuff-core"

> mvn archetype:generate -DgroupId=com.company -DartifactId=awesome-stuff-core -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false -DarchetypeCatalog=https://nexus.company.com:8443/nexus/content/groups/public/archetype-catalog.xml


2. Create data access module - "awesome-stuff-da"

> mvn archetype:generate -DgroupId=com.company -DartifactId=awesome-stuff-da -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false -DarchetypeCatalog=
https://nexus.company.com:8443
/nexus/content/groups/public/archetype-catalog.xml


3. Create service module - "awesome-stuff-service"

> mvn archetype:generate -DgroupId=com.company -DartifactId=awesome-stuff-service -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false -DarchetypeCatalog=https://nexus.company.com:8443/nexus/content/groups/public/archetype-catalog.xml


.. and any other modules you need in your now so awesome project..





Hierarchical Project Layout
---------------------------

Suppose Eclipse is your favorite SCM client, this step by step example shows how to set up a new mutiple module project.

Step 1: Set up a new Eclipse workspace called step-by-step and add the M2_REPO classpath variable.

Step 2: Open the command line shell and change to the newly created workspace directory.

Step 3: From the command line, create a new maven project using the archetype plugin.


    mvn archetype:create -DgroupId=guide.multi.mod -DartifactId=multi-module-project

===>   change above to

    mvn archetype:generate -DgroupId=guide.multi.mod -DartifactId=multi-module-project -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

    and add 

    -DarchetypeCatalog=http://pdxlltstd004:8081/nexus/content/groups/public/archetype-catalog.xml

    if you are behind proxy and using a local Nexus.
    

Step 4: Create a new simple project "multi-module-project" inside your workspace workspace with Eclipse (From the menu bar, select File >New > Project. Select Simple > Project). Eclipse will create a simple .project-file for your guide-ide-eclipse-project and you should be able to see the pom.xml-file.

Delete the src-folder and open the pom.xml-file to change the packaging of your parent project to pom.

  <packaging>pom</packaging>


Step 5: From the command line change to the guide-ide-eclipse project directory and create some modules.

    cd multi-module-project
    mvn archetype:create -DgroupId=guide.multi.mod         -DartifactId=multi-module-project-site
    mvn archetype:create -DgroupId=guide.multi.mod.core    -DartifactId=multi-module-project-core
    mvn archetype:create -DgroupId=guide.multi.mod.module1 -DartifactId=multi-module-project-module1

Step 6: Add the newly created modules to your parent pom.

  <modules>
    <module>multi-module-project-site</module>
    <module>multi-module-project-core</module>
    <module>multi-module-project-module1</module>
  </modules>

Step 7: Add the parent to the POMs of the new modules:

  <parent>
      <groupId>guide.multi.mod</groupId>
      <artifactId>multi-module-project</artifactId>
      <version>1.0-SNAPSHOT</version>
  </parent>
  
  NOTE: the module pom can have its own groupId, or it could reuse the groupId of the parent.

Step 8: Add dependency from module1 to the core-module:

    <dependency>
      <groupId>guide.multi.mod.core</groupId>
      <artifactId>multi-module-project-core</artifactId>
      <version>1.0-SNAPSHOT</version>
    </dependency>


Step 9: Install the project in your local repository and generate the Eclipse files:

mvn install
mvn eclipse:eclipse

    note: this will do:
    
        [INFO] Installing C:\ws\java\TRUNK\WSDL2JAVA\eit-1world-wsdl2java\eit-1world-rules-invoice-prefs\pom.xml to C:\Users\craiskin\.m2\repository\com\go2uti\wsdl2java\eit-1world-rules-invoice-prefs\1.0-SNAPSHOT\eit-1world-rules-invoice-prefs-1.0-SNAPSHOT.pom

Step 10: Check in your project using the Eclipse team support (select from the context menu Team > Share Project). Note: Do not check in the generated Eclipse files. If you use CVS you should have a .cvsignore-file with the following entries for each module:

    target
    .classpath
    .project
    .wtpmodules

Even the parent project should have this .cvsignore-file. Eclipse will automatically generate a new simple .project-file when you check out the project from the repository.

From now on you have different options to proceed. 

a) If you are working on all modules simultanously and you'd rather have Eclipse project dependencies than binary dependencies, you should set up a new workspace and import all projects from step-by-step/guide-ide-eclipse. 

    !!! Note, you have to delete the .project-file of your parent project before. The result is the same as checking out the whole project from the command line, running mvn eclipse:eclipse and finally importing the projects into your Eclipse workspace. In both cases you will be able to synchronize your changes using Eclipse.

b) In case of large projects with many developers involved, it can be tedious to check out all modules and keep them up to date. Especially if you are only interested in one or two modules. In this case using binary dependencies is much more comfortable. Just check out the modules you want to work on with Eclipse and run mvn eclipse:eclipse for each module (see also Maven as an external tool. Of course, all referenced artifacts must be available from your maven repository.


    Fixing Error - Importing Maven projects".Unsupported IClasspathEntry kind=4
    ***************************************************************************
    
If you are converting a mvn project into eclipse project using

    mvn eclipse:eclipse
    
and then importing Maven projects into eclipse, you may get this error.

To fix, run 

    mvn eclipse:clean
    
delete and reimport or refresh projects.    
    






Example
=======


Parent POM
----------

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <prerequisites>
        <maven>3.0.0</maven>
    </prerequisites>

    <groupId>com.codahale.dropwizard</groupId>
    <artifactId>dropwizard-parent</artifactId>
    <version>0.7.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>Dropwizard Project</name>
    <url>http://dropwizard.codahale.com/</url>
    <description>
        Dropwizard is a Java framework for developing ops-friendly, high-performance, RESTful web
        applications.
    </description>

    <modules>
        <module>dropwizard-core</module>
        ...
        <module>dropwizard-spdy</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        ...
        <guava.version>14.0.1</guava.version>
    </properties>

    <developers>
        <developer>
            <name>Coda Hale</name>
            <email>coda.hale@gmail.com</email>
            <timezone>-8</timezone>
        </developer>
    </developers>

    <licenses>
        <license>
            <name>Apache License 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <scm>
        <connection>scm:git:git://github.com/codahale/dropwizard.git</connection>
        <developerConnection>scm:git:git@github.com:codahale/dropwizard.git</developerConnection>
        <url>http://github.com/codahale/dropwizard/</url>
        <tag>HEAD</tag>
    </scm>

    <issueManagement>
        <system>github</system>
        <url>http://github.com/codahale/dropwizard/issues#issue/</url>
    </issueManagement>

    <repositories>
        <repository>
            <id>sonatype-nexus-snapshots</id>
            <name>Sonatype Nexus Snapshots</name>
            <url>http://oss.sonatype.org/content/repositories/snapshots</url>
            <releases>
                <enabled>false</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>

    <distributionManagement>
        <snapshotRepository>
            <id>sonatype-nexus-snapshots</id>
            <name>Sonatype Nexus Snapshots</name>
            <url>http://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
        <repository>
            <id>sonatype-nexus-staging</id>
            <name>Nexus Release Repository</name>
            <url>http://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
        </repository>
    </distributionManagement>

    <profiles>
        <profile>
            <id>release-sign-artifacts</id>
            <activation>
                <property>
                    <name>performRelease</name>
                    <value>true</value>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>1.4</version>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>1.9.5</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.easytesting</groupId>
            <artifactId>fest-assert-core</artifactId>
            <version>2.0M10</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>
            </plugin>
            <!-- we can't run tests in parallel until http://bugzilla.slf4j.org/show_bug.cgi?id=176 is fixed -->
            <!--<plugin>-->
                <!--<groupId>org.apache.maven.plugins</groupId>-->
                <!--<artifactId>maven-surefire-plugin</artifactId>-->
                <!--<version>2.14.1</version>-->
                <!--<configuration>-->
                    <!--<parallel>classes</parallel>-->
                <!--</configuration>-->
            <!--</plugin>-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>2.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.9</version>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>2.4.1</version>
                <configuration>
                    <autoVersionSubmodules>true</autoVersionSubmodules>
                    <mavenExecutorId>forked-path</mavenExecutorId>
                    <tagNameFormat>v@{project.version}</tagNameFormat>
                    <preparationGoals>clean test</preparationGoals>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <version>2.5.2</version>
                <configuration>
                    <effort>Max</effort>
                    <threshold>Default</threshold>
                    <xmlOutput>true</xmlOutput>
                    <excludeFilterFile>${basedir}/../findbugs-exclude.xml</excludeFilterFile>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>




Child POM
---------

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.codahale.dropwizard</groupId>
        <artifactId>dropwizard-parent</artifactId>
        <version>0.7.0-SNAPSHOT</version>
    </parent>

    <artifactId>dropwizard-core</artifactId>
    <name>Dropwizard</name>

    <dependencies>
        <dependency>
            <groupId>com.codahale.dropwizard</groupId>
            <artifactId>dropwizard-util</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.codahale.dropwizard</groupId>
            <artifactId>dropwizard-jackson</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.codahale.dropwizard</groupId>
            <artifactId>dropwizard-validation</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.codahale.dropwizard</groupId>
            <artifactId>dropwizard-configuration</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.codahale.dropwizard</groupId>
            <artifactId>dropwizard-logging</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.codahale.dropwizard</groupId>
            <artifactId>dropwizard-jersey</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.codahale.dropwizard</groupId>
            <artifactId>dropwizard-servlets</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.codahale.dropwizard</groupId>
            <artifactId>dropwizard-jetty</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.codahale.dropwizard</groupId>
            <artifactId>dropwizard-lifecycle</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.codahale.metrics</groupId>
            <artifactId>metrics-core</artifactId>
            <version>${metrics3.version}</version>
        </dependency>
        <dependency>
            <groupId>com.codahale.metrics</groupId>
            <artifactId>metrics-jvm</artifactId>
            <version>${metrics3.version}</version>
        </dependency>
        <dependency>
            <groupId>com.codahale.metrics</groupId>
            <artifactId>metrics-servlets</artifactId>
            <version>${metrics3.version}</version>
        </dependency>
        <dependency>
            <groupId>com.codahale.metrics</groupId>
            <artifactId>metrics-healthchecks</artifactId>
            <version>${metrics3.version}</version>
        </dependency>
        <dependency>
            <groupId>net.sourceforge.argparse4j</groupId>
            <artifactId>argparse4j</artifactId>
            <version>0.4.0</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty.orbit</groupId>
            <artifactId>javax.servlet</artifactId>
            <version>${servlet.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey.jersey-test-framework</groupId>
            <artifactId>jersey-test-framework-core</artifactId>
            <version>${jersey.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.sun.jersey.jersey-test-framework</groupId>
            <artifactId>jersey-test-framework-inmemory</artifactId>
            <version>${jersey.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>

==============================================================


    pluginManagement
    ****************

From Maven documentation:

pluginManagement: is an element that is seen along side plugins. Plugin Management contains plugin elements in much the same way, except that rather than configuring plugin information for this particular project build, it is intended to configure project builds that inherit from this one. However, this only configures plugins that are actually referenced within the plugins element in the children. The children have every right to override pluginManagement definitions.

So, you would declare plugins in your parent POM within <pluginManagement>:

parent
------

    <build>
        <pluginManagement>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                    <configuration>
                        <jvm>${java.home}/bin/java</jvm>
                        <systemPropertyVariables>
                            <test-properties-file>${test-properties-file}</test-properties-file>
                        </systemPropertyVariables>
                        <!-- sets the VM argument with jacoco agent when unit tests are run -->
                        <argLine>@{jacocoAgent}</argLine>
                        <!-- Skips unit tests if the value of skip.unit.tests property is true -->
                        <skipTests>${skip.unit.tests}</skipTests>
                        <!-- Exclude integration tests when unit tests are run. -->
                        <excludes>
                            <exclude>**/IT*.java</exclude>
                        </excludes>
                    </configuration>
                </plugin>
        </pluginManagement
    </build>

and then, you can reference this plugin in your child POM:


child
-----

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

NOTE: for surefire this will happen automatically, when you run tests - mvn will run the surefire configuration declared in <pluginManagement>.


    What if I need to override plugin configuration in my child POM?
    -----------------------------------------------------------------

http://maven.apache.org/pom.html
@see
You can control how child POMs inherit configuration from parent POMs by adding attributes to the children of the configuration element. The attributes are combine.children and combine.self. Use these attributes in a child POM to control how Maven combines plugin configuration from the parent with the explicit configuration in the child.


combine.self="override"

    completely suppresses parent configuration

combine.children="append"

    results in the concatenation of parent and child elements, in that order.

So, with the example above, if I wanted to override surefire configuration in the child POM,
I would use

    <configuration combine.self="override">



child
-----


    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration combine.self="override">
                    <jvm>${java.home}/bin/java</jvm>
                    <systemPropertyVariables>
                        <test-properties-file>${test-properties-file}</test-properties-file>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
        </plugins>
    </build>






==============================================================

    shade plugin on Multimodule projects
    ************************************
    
Q:  
    I have a multimodule project for which I want to use the shade plugin. All is configured in the parent pom. 

    Running on the parent with "mvn clean package" fails with 

    Replacing null with d:\workspace-maven\assemblies\parent\target\parent-0.0.1-SNAPSHOT-shaded.pom 
    [INFO] ------------------------------------------------------------------------ 
    [ERROR] BUILD ERROR 
    [INFO] ------------------------------------------------------------------------ 
    [INFO] Error creating shaded jar: null 

    so how do I need to configure the plugin to not shade the parent as its not a jar but a pom ? 


A:

    put the configuration for the shade plugin in pluginManagement and then just reference the shade plugin in the modules you want to use shade in.



Plugin Management
*****************

pluginManagement: is an element that is seen along side plugins. Plugin Management contains plugin elements in much the same way, except that rather than configuring plugin information for this particular project build, it is intended to configure project builds that inherit from this one. However, this only configures plugins that are actually referenced within the plugins element in the children. The children have every right to override pluginManagement definitions.


<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      http://maven.apache.org/xsd/maven-4.0.0.xsd">
  ...
  <build>
    ...
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>2.2</version>
          <executions>
            <execution>
              <id>pre-process-classes</id>
              <phase>compile</phase>
              <goals>
                <goal>jar</goal>
              </goals>
              <configuration>
                <classifier>pre-process</classifier>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
    ...
  </build>
</project>

If we added these specifications to the plugins element, they would apply only to a single POM. However, if we apply them under the pluginManagement element, then this POM and all inheriting POMs that add the maven-jar-plugin to the build will get the pre-process-classes execution as well. So rather than the above mess included in every child pom.xml, only the following is required:

<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      http://maven.apache.org/xsd/maven-4.0.0.xsd">
  ...
  <build>
    ...
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
      </plugin>
    </plugins>
    ...
  </build>
</project>



=============================================================================

    reusing tests across multimodule projects
    *****************************************
    
    
Maven reusing test classes across multi modules projects:

http://stackoverflow.com/questions/1725476/maven-test-dependency-in-multi-module-project

http://www.waltercedric.com/java-j2ee-mainmenu-53/361-maven-build-system/1349-maven-reusing-test-classes-across-multi-modules-projects.html

 ** NOTE: see note on 'classifier' below. **

Maven clearly differentiate "productive code"  in each module src/main/* from unit test code in src/test/*. 
In a typical multi-module projects like the one below:

componentA
|
|-moduleA
|         /src/main/java
|         /src/main/resources
|         /src/test/java
|         /src/test/resources
|-moduleB
|         /src/main/java
|         /src/main/resources
|         /src/test/java
|         /src/test/resources


Note1: Eclipse do not support multi module project as only one level of code sharing is allowed. So we have 
3 eclipse projects/maven projects with a pom.xml:

componentA with a packaging pom, and 2 module aggregated
moduleA, parent is ../componentA/pom.xml
moduleB   parent is ../componentA/pom.xml

Note2: eclipse has only one Class Loader, meaning that code in /src/main/java  and /src/test/java  is also exported as dependencies between modules, while in Maven, code is not shared!

So as default by adding a dependencies in moduleB/pom.xml to moduleA, you'll only inherit moduleA src/main/java 
and src/main/resources

<dependency>
<groupId>com.waltercedric.maven</groupId>
<groupId>modulesA</groupId>
</dependency>

But what if you have some test API classes in modulesA? trying to add also moduleA in scope test wont help you any further:

<dependency>
<groupId>com.waltercedric.maven</groupId>
<artifactId>modulesA</artifactId>
</dependency>

<dependency> <!-- does not work! -->
<groupId>com.waltercedric.maven</groupId>
<artifactId>modulesA</artifactId>
<scope>test</scope>
</dependency>

This is exactly where artifact classifier may help you, but lets first look at the artifact naming convention.

    artifact name = {name/artifactId}-{version}-{classifier}.{extension}

Maven is also introducing some conventions:

-> name is most of the time the artifactId 
-> version being the version number of the artifact, simply don't use something containing SNAPSHOTS  
    in it as it is considered being non stable by some plugin (maven-release-plugin for example)  
-> classifier is either

* empty like for ex: jaxb-1.2.jar and then it will contains the binary package of the library jaxb
* source like for ex: jaxb-1.2-source.jar
* javadoc like for ex: jaxb-1.2-javadoc.jar
* but it can be anything! as it just classify an artifact, but don't use it in place where an artifact could 
have been use, a classifier proxy/stub is not recommended: make a module of it instead. You must see 
classifier more as a way to categorize artifact in a module.

You'll find a lot of artifact across Internet not following these guidelines, this is not an issue as Maven repositories are able to search for pom.properties or project.xml or pom.xml in jar if they exist and use the right <groupId> and <artifactId>



Back to code reuse of test classes across modules, the trick is to tell maven to make a jar of every module test code so you can depend on it in others modules.

a normal build of componentA, would create:

# /componentA/mvn clean install

/.m2/repository/com/waltercedric/maven/moduleA/0.0.1.SNAPSHOTS/moduleA-0.0.1.SNAPSHOTS.jar 
/.m2/repository/com/waltercedric/maven/moduleB/0.0.1.SNAPSHOTS/moduleB-0.0.1.SNAPSHOTS.jar

where by just adding to componentA/pom.xml the following inside the <build></build>:

<!--  this create jar file of code from src/test/java so modules with tests can share code -->
<plugin>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-jar-plugin</artifactId>
<executions>
  <execution>
    <goals>
       <goal>test-jar</goal>
    </goals>
  </execution>
</executions>
</plugin>
# /componentA/mvn clean install

/.m2/repository/com/waltercedric/maven/moduleA/0.0.1.SNAPSHOTS/moduleA-0.0.1.SNAPSHOTS.jar 
/.m2/repository/com/waltercedric/maven/moduleA/0.0.1.SNAPSHOTS/moduleA-0.0.1.SNAPSHOTS-tests.jar
/.m2/repository/com/waltercedric/maven/moduleB/0.0.1.SNAPSHOTS/moduleB-0.0.1.SNAPSHOTS.jar 
/.m2/repository/com/waltercedric/maven/moduleB/0.0.1.SNAPSHOTS/moduleB-0.0.1.SNAPSHOTS-tests.jar

Maven now create new artifacts  moduleA-0.0.1.SNAPSHOTS-tests.jar!

So you can now add a dependencies in moduleB/pom.xml to moduleA in scope test with a tests classifier 

<dependency> <!-- reuse src/main/java code from moduleA, normal dependencies --> 
<groupId>com.waltercedric.maven</groupId>
<artifactId>modulesA</artifactId>
</dependency>

<dependency> <!-- reuse src/test/java code from moduleA! -->
<groupId>com.waltercedric.maven</groupId>
<artifactId>modulesA</artifactId>
<scope>test</scope>
<classifier>tests</classifier>
</dependency>
You can now share test code across module.



http://stackoverflow.com/questions/1725476/maven-test-dependency-in-multi-module-project


classifier
----------

As explained in the note at the bottom of the Guide to using attached tests:
http://maven.apache.org/guides/mini/guide-attached-tests.html

    Note that previous editions of this guide suggested to use <classifier>tests</classifier> instead of <type>test-jar</type>. While this currently works for some cases, it does not properly work during a reactor build of the test JAR module and any consumer if a lifecycle phase prior to install is invoked. In such a scenario, Maven will not resolve the test JAR from the output of the reactor build but from the local/remote repository. Apparently, the JAR from the repositories could be outdated or completely missing, causing a build failure (cf. MNG-2045).
    
Therefore:

In the module, whose tests you want to share:

<project>
  <build>
    <plugins>
     <plugin>
       <groupId>org.apache.maven.plugins</groupId>
       <artifactId>maven-jar-plugin</artifactId>
       <version>2.2</version>
       <executions>
         <execution>
           <goals>
             <goal>test-jar</goal>
           </goals>
         </execution>
       </executions>
     </plugin>
    </plugins>
  </build>
</project>

Then, install/deploy the test JAR artifact as usual (using mvn install or mvn deploy).

In the module where you want to use the test JAR artifact, specify 
a dependency of type "test-jar":

  <dependencies>
    <dependency>
      <groupId>com.myco.app</groupId>
      <artifactId>foo</artifactId>
      <version>1.0-SNAPSHOT</version>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>
  </dependencies>
  
  
if you don't want to install/deploy your test JAR
*************************************************

<plugins>
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.2</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                        <phase>test-compile</phase>
                    </execution>

                </executions>
                <configuration>
                    <outputDirectory>${basedir}\target</outputDirectory>
                </configuration>
            </plugin>
        </plugins>


This will create the test-jar and it will be available in the compile phase of the tests and not only after the package phase.


=============================================================================

How to share resources across projects in Maven
***********************************************


April 17, 2008 By Brian Fox

http://blog.sonatype.com/people/2008/04/how-to-share-resources-across-projects-in-maven/


There are a few ways to share resources across multiple projects or modules:

* Cut and paste them.
* Use Assembly and Dependency plugins
* Use the maven-remote-resources-plugin

In this blog I’ll show how to do the second option since in my opinion, it is currently the most stable and flexible. In the future, I’ll try out the maven-remote-resources-plugin and write up a tutorial.

The assembly plugin is a bit complicated but it can also be very powerful when you find a few good examples to get you started. I felt it was important enough to understand assembly that I made it a pop-quiz lab for the Maven Training we provide.

At the end of this post is a zip file that contains the files described…so don’t worry about copying everything verbatim and focus on the why and how

I’m going to show how this is done in a multi module project, so the first thing we need is the top level parent pom (there’s probably an archetype for this but I just grab one from some random project and hack it up):

<project xmlns="http://maven.apache.org/POM/4.0.0"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.sonatype</groupId>
  <artifactId>resource-sharing</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>pom</packaging>
  <name>Resource Sharing Parent</name>

  <build>
     <pluginManagement>
        <plugins>
           <plugin>
             <groupId>org.apache.maven.plugins</groupId>
             <artifactId>maven-dependency-plugin</artifactId>
             <version>2.0</version>
          </plugin>
          <plugin>
             <groupId>org.apache.maven.plugins</groupId>
             <artifactId>maven-assembly-plugin</artifactId>
             <version>2.2-beta-2</version>
          </plugin>
       </plugins>
    </pluginManagement>
  </build>
  <modules>
     <module>resource-consumer</module>
     <module>assembly</module>
  </modules>
</project>
In an enterprise, you will probably want this to inherit from your corporate pom. The only thing particularly interesting about the pom above is that I have declared the versions of the plugins I’m using in pluginManagement. Read more about this topic in my previous entry. I have also inverted the modules list to show that Maven is smart enough to reorder modules based on declared dependencies (this is another FAQ).

The next step is to create the module that will zip up the resources to be shared. I’m going to do this using the maven-assembly-plugin to zip up src/main/resources from my shared-resources project. The assembly descriptor in src/main/assembly/resource.xml to do this is pretty small:

<assembly>
  <id>resources</id>
  <formats>
    <format>zip</format>
  </formats>
  <includeBaseDirectory>false</includeBaseDirectory>
  <fileSets>
    <fileSet>
      <directory>src/main/resources</directory>
      <outputDirectory></outputDirectory>
    </fileSet>
  </fileSets>
</assembly>
We just told the assembly plugin to make a zip using a classifier of resources (more on this below). It will pick up the contents of src/main/resources and include them in the root of the zip. By default, assembly will create a subfolder with the artifactid-version as the name, so we turn this off by specifying the empty outputDirectory element.

Now we need the resource to include. While we’re at it, we’ll show some resource filtering. In src/main/resources/Readme.txt place:

This Readme is included in ${project.artifactId}-
${project.version}.${project.packaging}
The contents of ${} will be replaced by the correct values from the pom. Note: the old syntax was ${artifactId} or ${pom.artifactId} and these are still incorrectly being used. The correct syntax to dereference a pom value is ${project.xxx}.

The next thing we need is the pom.xml to do the work in the assembly module:

<project xmlns="http://maven.apache.org/POM/4.0.0"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.sonatype</groupId>
        <artifactId>resource-sharing</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <artifactId>shared-resources</artifactId>
    <packaging>pom</packaging>
    <name>Shared Resources Bundle</name>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <executions>
                    <execution>
                        <id>make shared resources</id>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            <descriptors>
                                <descriptor>src/main/assembly/resources.xml</descriptor>
                            </descriptors>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
Here we have used a pom packaging project to get an empty lifecycle pallet. We bind the assembly:single goal to the package phase and point it at the descriptor. Note that no version is specified here because we already locked it down in the parent pom’s pluginManagment section. Be sure not to bind the assembly:assembly goal in a phase because this forks the build and can generally cause a mess of recursive builds.

So far we have managed to bundle up the resources into a zip that can be versioned and deployed to a Maven Repository Manager. So far, so good. Now we need to get those resources where we actually want them. To do this, we will use the dependency:unpack-dependencies to fetch the bundle and unpack it to the projects that need it. The pom to do it looks like this:

<project xmlns="http://maven.apache.org/POM/4.0.0"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.sonatype</groupId>
    <artifactId>resource-sharing</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>

  <artifactId>resource-consumer</artifactId>
  <packaging>jar</packaging>

  <name>Resource User A</name>

  <dependencies>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>shared-resources</artifactId>
      <version>1.0-SNAPSHOT</version>
      <classifier>resources</classifier>
      <type>zip</type>
      <!-- Make sure this isn't included on any classpath-->
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <resource>
        <directory>${basedir}/src/main/resources</directory>
      </resource>
      <resource>
        <directory>${project.build.directory}/generated-resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-shared-resources</id>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
             <outputDirectory>${project.build.directory}/generated-resources</outputDirectory>
             <includeArtifacIds>shared-resources</includeArtifacIds>
             <includeGroupIds>${project.groupId}</includeGroupIds>
             <excludeTransitive>true</excludeTransitive>
             <!--use as much as needed to be specific...also scope,type,classifier etc-->
            </configuration>
          </execution>
        </executions>
      </plugin&gt
    </plugins>
  </build>
</project>
The first thing we did was add our resource bundle as a dependency of this project. This is done to tell Maven about the dependency so that the bundle is created before it’s needed. We could have used dependency:unpack to do this without declaring a dependency but this causes other issues when used inside a multimodule build. Notice that I used a property to avoid having to hardcode the groupId of my sibling dependency. I did not do this for the version as it used to cause problems with SNAPSHOTs when deployed. I think it has been fixed but I haven’t tested it yet. Also note that the classifier matches the id used in the assembly descriptor above.

The next thing we’ve done is add the ${project.build.directory}/generated-resources as a resource and enabled filtering (note the use of a property and not hard coding of /target/). We have to re add the default resource of src/main/resources because it will get lost otherwise.

Then we bind the dependency:unpack-dependencies goal to the generate-resources phase (again leaving the version to be picked up in pluginManagement). The unpack-dependencies goal starts with a list of all dependencies of this project. Since we are only interested in one, we can use the various filters to narrow it down. Here I have filtered on the group and artifact ids and excluded all transitive dependencies. I could have also added scope, classifier and type if I felt it was needed. I have told the plugin to extract the contents of the zip to ${project.build.directory}/generated-resources (the same location I added as a resource above).

Now, to make this all happen, I only need to go up to the root of my project and execute mvn install. (package is the minimum to make the zip that unpack will need to find but I recommend just using install when working with multi-modules…it will save you lots of grief).

Since I’m a skeptic, I’m going to go into resource-consumer/target and unpack the jar. In the root of the jar I should find a ReadMe.txt with the following content:

This Readme is included in resource-consumer-1.0-SNAPSHOT.jar
Note that my properties were replaced with the values of the project that did the filtering. This was an extreme example as you may not always want to filter the unpacked values, but that’s even easier…just tell dependency where to drop the files and you’re done. If you’re working with wars, you can just drop the files into ${project.build.directory}/${project.build.finalName} and the war plugin will pick them up and include them in the final war.

This assembly sharing technique is also useful for sharing checkstyle and pmd rules. The only difference in those instances is that you don’t actually need to unpack the file. Instead of making a zip, make a jar and then add the jar in a dependency block inside the plugin declaration. If you are using those plugins as reports, you need to add the jar as an extension in the pom (report.plugins.plugin doesn’t allow a dependency). Then the plugins will look for and find your rule file on the classpath.


=============================================================================

    To build individual module in a multi-module project
    ****************************************************
    
Use advanced Reactor options described here:

    http://blog.sonatype.com/people/2009/10/maven-tips-and-tricks-advanced-reactor-options/
    
    
-pl, --projects
        Build specified reactor projects instead of all projects
-am, --also-make
        If project list is specified, also build projects required by the list

Parent P

    Module A
    Module B depends on A
    Module C depends on A

So build B, cd into the parent P directory and run:

    mvn install -pl B -am

And this will build B and the modules required by B.    
    

=============================================================================

    Provide different test configuration for different modules
    **********************************************************
    
In your PARENT pom


  <build>
  
    <pluginManagement>
        <plugins>

        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>${maven-compiler-plugin.version}</version>
            <configuration>
                <verbose>true</verbose>
                <fork>true</fork>
                <compilerVersion>${java.version}</compilerVersion>
                <source>${java.version}</source>
                <target>${java.version}</target>
                <executable>${java.home}/bin/javac</executable>
            </configuration>
        </plugin>
            
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>${maven-surefire-plugin.version}</version>
            <configuration>
                <jvm>${java.home}/bin/java</jvm>
            </configuration>
        </plugin>       
                      
        </plugins>      
    </pluginManagement>
    
  </build> 


In your module, you can declare the surefire plugin and override its configuration:


  <build>
        <plugins>
        
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
          </plugin>
      
                
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <jvm>${java.home}/bin/java</jvm>
                    <argLine>-Xms512m -Xmx3072m -XX:MaxPermSize=512m</argLine>
                    <includes>
                        <include>**/BatchInvoiceUnitTestSuite.java</include>
                    </includes>
                </configuration>
            </plugin>   
        </plugins>
  </build>





=============================================================================


    How to define and execute a build profile in multimodule project
    ****************************************************************
    
In your PARENT

    <profiles>  
         <profile>  
            <id>acceptance-test</id>  
         </profile>  
    </profiles>   
    
    
In your MODULE, you can declare and override:

    <profiles>  
         <profile>  
          <id>acceptance-test</id>  
          <build>  
               <plugins>  
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>${maven-surefire-plugin.version}</version>
                        <configuration>
                            <jvm>${java.home}/bin/java</jvm>
                            <argLine>-Xms512m -Xmx2048m -XX:MaxPermSize=512m</argLine>
                            <includes>
                                <include>**/BatchInvoiceAcceptanceTestSuite.java</include>
                            </includes>
                        </configuration>
                    </plugin> 
               </plugins>  
          </build>  
         </profile>  
    </profiles>  

    




=============================================================================

    Run individual test
    *******************
    
mvn test -Dtest=uk.co.farwell.AppTest#testSlow    
    
    
    Run individual test on a module in a multi-module project
    *********************************************************
    
mvn test -Dtest=Test#test1 -pl subproject   


=============================================================================

Ignore a module during maven test build for multi module maven project
*********************************

http://stackoverflow.com/questions/9279852/ignore-a-module-during-maven-test-build-for-multi-module-maven-project


In a module whose tests you want to skip when running individual tests in a different module;

<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.12</version>
            <configuration>
                <skipTests>${skip.foo.module.tests}</skipTests>
            </configuration>
        </plugin>
    </plugins>
</build>


Then, in the master module:

<properties>
    <skip.foo.module.tests>false</skip.foo.module.tests>
</properties>

<profiles>
    <profile>
        <id>SKIP_FOO_MODULE_TESTS</id>
        <properties>
            <skip.foo.module.tests>true</skip.foo.module.tests>
        </properties>
    </profile>
</profiles>

So that you could deactivate the tests in Foo module with the command line :

    mvn clean test -P SKIP_FOO_MODULE_TESTS






=============================================================================

    versions-maven-plugin
    *********************
    
http://www.mojohaus.org/versions-maven-plugin/



=============================================================================


    Create multi-module project behind corporate NLML proxy with Nexus
    *******************************************************************


Create parent project

> mvn archetype:generate -DgroupId=com.company -DartifactId=awesome-stuff -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false -DarchetypeCatalog=http://pdxlltstd004:8081/nexus/content/groups/public/archetype-catalog.xml

Change to parent project directory

> cd awesome-stuff

Clean up:

> edit pom.xml (change packaging to "pom")
> rmdir /S src (remove src dir)

Create modules

1. Create core module - "awesome-stuff-core"


> mvn archetype:generate -DgroupId=com.company -DartifactId=awesome-stuff-core -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false -DarchetypeCatalog=http://pdxlltstd004:8081/nexus/content/groups/public/archetype-catalog.xml



2. Create data access module - "awesome-stuff-da"

> mvn archetype:generate -DgroupId=com.company -DartifactId=awesome-stuff-da -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false -DarchetypeCatalog=http://pdxlltstd004:8081/nexus/content/groups/public/archetype-catalog.xml


3. Create service module - "awesome-stuff-service"

> mvn archetype:generate -DgroupId=com.company -DartifactId=awesome-stuff-service -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false -DarchetypeCatalog=http://pdxlltstd004:8081/nexus/content/groups/public/archetype-catalog.xml


etc.. any other modules you need in your now so awesome project..


=============================================================================

    disable Maven plugin in child module
    *************************************

With Maven 3:

<plugin>
   <groupId>group</groupId>
   <artifactId>artifact</artifactId>
   <configuration>
     <skip>true</skip>
   </configuration>
</plugin>    

if not, try:

<plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>findbugs-maven-plugin</artifactId>
    <executions>
        <execution>
            <phase>none</phase>
        </execution>
    </executions>
</plugin>


===========================================================================================     
    skip deployment of module
    *************************

http://stackoverflow.com/questions/7446599/how-to-deploy-only-the-sub-modules-using-maven-deploy    

Put this in module(s)(or module's pom.xml) that you don't want to deploy.

<properties>
  <maven.deploy.skip>true</maven.deploy.skip>
</properties>

===========================================================================================

	
Guide to naming conventions on groupId, artifactId and version
**************************************************************

	* groupId will identify your project uniquely across all projects, so we need to enforce a naming schema. It has to follow the package name rules, what means that has to be at least as a domain name you control, and you can create as many subgroups as you want. Look at More information about package names.

	  eg. org.apache.maven, org.apache.commons

	A good way to determine the granularity of the groupId is to use the project structure. That is, if the current project is a multiple module project, it should append a new identifier to the parent's groupId.

	  eg. org.apache.maven, org.apache.maven.plugins, org.apache.maven.reporting

	* artifactId is the name of the jar without version. If you created it then you can choose whatever name you want with lowercase letters and no strange symbols. If it's a third party jar you have to take the name of the jar as it's distributed.

	  eg. maven, commons-math
	
	* version if you distribute it then you can choose any typical version with numbers and dots (1.0, 1.1, 1.0.1, ...). Don't use dates as they are usually associated with SNAPSHOT (nightly) builds. If it's a third party artifact, you have to use their version number whatever it is, and as strange as it can look.

	  eg. 2.0, 2.0.1, 1.3.1



	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-jar-plugin</artifactId>

	<groupId>org.codehaus.mojo</groupId>
	<artifactId>jboss-maven-plugin</artifactId>

	<groupId>net.sf.barcode4j</groupId>
	<artifactId>barcode4j-fop-ext-0.20.5-complete</artifactId>

	<groupId>org.springframework</groupId>
	<artifactId>spring</artifactId>

	<groupId>opensymphony</groupId>
	<artifactId>oscache</artifactId>

	<groupId>com.sun.xml.bind</groupId>
	<artifactId>jaxb-libs</artifactId>

	<groupId>javax.resource</groupId>
	<artifactId>connector-api</artifactId>

	<groupId>javax.servlet</groupId>
	<artifactId>jstl</artifactId>

	<groupId>javax.transaction</groupId>
	<artifactId>jta</artifactId>
	<groupId>org.hibernate</groupId>
	<artifactId>hibernate-core</artifactId>

And then there are many where the group and artifact IDs are the same unqualified name, e.g.:

	<groupId>log4j</groupId>
	<artifactId>log4j</artifactId>
	
	<groupId>velocity</groupId>
	<artifactId>velocity</artifactId>
	
	<groupId>fop</groupId>
	<artifactId>fop</artifactId>
	
	<groupId>commons-lang</groupId>
	<artifactId>commons-lang</artifactId>

	
Creating a project
******************

- cd to where you want the project to be created
- execute the following line substituting appropriate values

mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

cd my-app

Under this directory you will notice the following standard project structure.
http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html

my-app
|-- pom.xml
`-- src
    |-- main
    |   `-- java
    |       `-- com
    |           `-- mycompany
    |               `-- app
    |                   `-- App.java
    `-- test
        `-- java
            `-- com
                `-- mycompany
                    `-- app
                        `-- AppTest.java

src/main/java 
	contains the project source code
	
src/test/java 
	contains the test source
	
pom.xml 
	is the project's Project Object Model, or POM.

POM
***

	The pom.xml file is the core of a project's configuration in Maven. It is a single configuration file that contains the majority of information required to build a project in just the way you want. The POM is huge and can be daunting in its complexity, but it is not necessary to understand all of the intricacies just yet to use it effectively.
	
	
What did I just do?
===================

You executed the Maven goal archetype:generate, and passed in various parameters to that goal. The prefix archetype is the plugin that contains the goal. If you are familiar with Ant, you may conceive of this as similar to a task. This goal created a simple project based upon an archetype. Suffice it to say for now that a plugin is a collection of goals with a general common purpose. For example the jboss-maven-plugin, whose purpose is "deal with various jboss items".




Build the Project
=================

The first, and most common way, is to set the packaging for your project via the equally named POM element <packaging>. Some of the valid packaging values are jar, war, ear and pom. 

    <packaging>war</packaging>

If no packaging value has been specified, it will default to jar.

	mvn package
	
Each packaging contains a list of goals to bind to a particular phase. For example, the jar packaging will bind the following goals to build phases of the default lifecycle.    
    
Unlike archetype:generate (which is a goal), "package" is phase.
A phase is a step in the build process:

   1. validate
   2. generate-sources
   3. process-sources
   4. generate-resources
   5. process-resources
   6. compile
   
When a phase is given, Maven will execute every phase in the sequence up the one specified.

There are two other Maven lifecycles of note beyond the default list above. They are

    * clean: cleans up artifacts created by prior builds
    * site: generates site documentation for this project   




You may test the newly compiled and packaged JAR with the following command:

	java -cp target/my-app-1.0-SNAPSHOT.jar com.mycompany.app.App

Which will print the quintessential:

	Hello World!


An interesting thing to note is that phases and goals may be executed in sequence.

	mvn clean dependency:copy-dependencies package

This command will 
 - clean the project, 
 - copy dependencies, and 
 - package the project (executing all phases up to package, of course).


**********

    WAR

**********
    
There are 4 ways to use the WAR Plugin:

    using the package phase with the project package type as war
    
        <packaging>war</packaging>
    
    invocation of the war:war goal
    invocation of the war:exploded goal
    invocation of the war:inplace goal    

Note: When using the war: goals it is assumed that the compile phase is already done. The WAR Plugin is not responsible for compiling the java sources or copying the resources.


Using the package phase with the project package type as war / invocation of the war:war goal
=============================================================================================


This is the normal way of using the WAR Plugin. To illustrate, here's the pom.xml for our project:

<project>
  ...
  <groupId>com.example.projects</groupId>
  <artifactId>documentedproject</artifactId>
  <packaging>war</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>Documented Project</name>
  <url>http://example.com</url>
  ...
</project>


The project's structure looks like this:

 |-- pom.xml
 `-- src
     `-- main
         |-- java
         |   `-- com
         |       `-- example
         |           `-- projects
         |               `-- SampleAction.java
         |-- resources
         |   `-- images
         |       `-- sampleimage.jpg
         `-- webapp
             |-- WEB-INF
             |   `-- web.xml
             |-- index.jsp
             `-- jsp
                 `-- websource.jsp

Invoking
--------

    mvn package

or

    mvn compile war:war

will generate the WAR file target/documentedproject-1.0-SNAPSHOT.war. Here are the contents of that WAR file:

documentedproject-1.0-SNAPSHOT.war
  |-- META-INF
  |   |-- MANIFEST.MF
  |   `-- maven
  |       `-- com.example.projects
  |           `-- documentedproject
  |               |-- pom.properties
  |               `-- pom.xml
  |-- WEB-INF
  |   |-- classes
  |   |   |-- com
  |   |   |   `-- example
  |   |   |       `-- projects
  |   |   |           `-- SampleAction.class
  |   |   `-- images
  |   |       `-- sampleimage.jpg
  |   `-- web.xml
  |-- index.jsp
  `-- jsp
      `-- websource.jsp



Copying Specific Artifacts
**************************


In copying specific artifacts, you need to bind the dependency:copy mojo to a lifecycle, configure the plugin and specify the artifacts you want to copy.

In the following example
after executing 'mvn package', the artifact (junit) is copied to the given alternate location:

    <outputDirectory>${project.build.directory}/alternateLocation</outputDirectory>


<project>
  [...]
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>2.5</version>
        <executions>
          <execution>
            <id>copy</id>
            <phase>package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>junit</groupId>
                  <artifactId>junit</artifactId>
                  <version>3.8.1</version>
                  <type>jar</type>
                  <overWrite>false</overWrite>
                  <outputDirectory>${project.build.directory}/alternateLocation</outputDirectory>
                  <destFileName>optional-new-name.jar</destFileName>
                </artifactItem>
              </artifactItems>
              <outputDirectory>${project.build.directory}/wars</outputDirectory>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>true</overWriteSnapshots>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  [...]
</project>


The 'dependency:copy' goal can also be used to copy the just built artifact to a custom location if desired. It must be bound to any phase after the package phase so that the artifact exists in the repository. 

The following configuration shows how (binding to the install phase in this case):

<project>
  [...]
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>2.5</version>
        <executions>
          <execution>
            <id>copy-installed</id>
            <phase>install</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>${project.groupId}</groupId>
                  <artifactId>${project.artifactId}</artifactId>
                  <version>${project.version}</version>
                  <type>${project.packaging}</type>
                </artifactItem>
              </artifactItems>
              <outputDirectory>some-other-place</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  [...]
</project>


Here

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.3</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals><goal>copy</goal></goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.mortbay.jetty</groupId>
                                    <artifactId>jetty-runner</artifactId>
                                    <version>8.1.5.v20120716</version>
                                    <destFileName>jetty-runner.jar</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin> 


The artifact (jetty-runner) is copied to dest file (jetty-runner.jar)








Plug-ins
********

Whenever you want to customise the build for a Maven project, this is done by adding or reconfiguring plugins.

There are build and reporting plugins:

* Build Plugins	
	will be executed during the build and then, they should be configured in the 
		<build/>
	element.
	
* Reporting plugins
	will be executed during the site generation and they should be configured in the 
		<reporting/>
	element.

All plugins should have minimal required configuration:
	- groupId
	- artifactId
	- version
	


Install an artifact with a custom POM
*************************************

The Maven Install Plugin can include a pre-built custom POM with the artifact in the local repository. Just set the value of the pomFile parameter to the path of the custom POM.

	mvn install:install-file -Dfile=path-to-your-artifact-jar -DpomFile=path-to-pom
	
E.g.
	collection-setter-injector-uti>mvn package
	
	collection-setter-injector-uti>mvn install:install-file -Dfile=target/collection-setter-injector-uti-0.5.0-1-UTI.jar -DpomFile=pom.xml
	
	
	
	C:\Users\Administrator\Documents\Projects\CO\NumberGeneratorCodeGen\HelperScripts\collection-setter-injector-uti>mvn install:install-file -Dfile=target/collection-setter-injector-uti-0.5.0-1-UTI.jar -DpomFile=pom.xml
	[INFO] Scanning for projects...
	[INFO]
	[INFO] ------------------------------------------------------------------------
	[INFO] Building collection-setter-injector-uti 0.5.0-1-UTI
	[INFO] ------------------------------------------------------------------------
	[INFO]
	[INFO] --- maven-install-plugin:2.3.1:install-file (default-cli) @ collection-setter-injector-uti ---
	[INFO] Installing C:\Users\Administrator\Documents\Projects\CO\NumberGeneratorCodeGen\HelperScripts\collection-setter-injector-uti\target\collection-setter-injector-uti-0.5.0-1-UTI.jar to C:\Users\Administrator\.m2\repository\net\java\dev\vcc\thirdparty\collection-setter-injector-uti\0.5.0-1-UTI\collection-setter-injector-uti-0.5.0-1-UTI.jar
	[INFO] Installing C:\Users\Administrator\Documents\Projects\CO\NumberGeneratorCodeGen\HelperScripts\collection-setter-injector-uti\pom.xml to C:\Users\Administrator\.m2\repository\net\java\dev\vcc\thirdparty\collection-setter-injector-uti\0.5.0-1-UTI\collection-setter-injector-uti-0.5.0-1-UTI.pom
	[INFO] ------------------------------------------------------------------------
	[INFO] BUILD SUCCESS
	[INFO] ------------------------------------------------------------------------
	[INFO] Total time: 0.609s
	[INFO] Finished at: Wed Jul 20 15:31:30 PDT 2011
	[INFO] Final Memory: 2M/15M
	[INFO] ------------------------------------------------------------------------



Here is another example 

mvn install:install-file -Dfile=processInvoice.jar -DgroupId=com.uti -DartifactId=processInvoice -Dversion=1.0.0 -Dpackaging=jar -DgeneratePom=true -DlocalRepositoryPath=local-repo



Maven Installation
******************


Windows 2000/XP

  1. Unzip the distribution archive, i.e. apache-maven-3.0.3-bin.zip to the directory you wish to install Maven 3.0.3. These instructions assume you chose C:\Program Files\Apache Software Foundation. The subdirectory apache-maven-3.0.3 will be created from the archive.
  
  2. Add the M2_HOME environment variable by opening up the system properties (WinKey + Pause), selecting the "Advanced" tab, and the "Environment Variables" button, then adding the M2_HOME variable in the user variables with the value C:\Program Files\Apache Software Foundation\apache-maven-3.0.3. Be sure to omit any quotation marks around the path even if it contains spaces. Note: For Maven < 2.0.9, also be sure that the M2_HOME doesn't have a '\' as last character.
  
  3. In the same dialog, add the M2 environment variable in the user variables with the value %M2_HOME%\bin.
  
  4. Optional: In the same dialog, add the MAVEN_OPTS environment variable in the user variables to specify JVM properties, e.g. the value -Xms256m -Xmx512m. This environment variable can be used to supply extra options to Maven.
  
  5. In the same dialog, update/create the Path environment variable in the user variables and prepend the value %M2% to add Maven available in the command line.
  
  6. In the same dialog, make sure that JAVA_HOME exists in your user variables or in the system variables and it is set to the location of your JDK, e.g. C:\Program Files\Java\jdk1.5.0_02 and that %JAVA_HOME%\bin is in your Path environment variable.
  
  7. Open a new command prompt (Winkey + R then type cmd) and run mvn --version to verify that it is correctly installed.
  

======================================================================================  
  
    User Preferences settings.xml
    *****************************

There are two locations where a settings.xml file may live:

    The Maven install: $M2_HOME/conf/settings.xml
    A user's install: ${user.home}/.m2/settings.xml
    
 If both files exists, their contents gets merged, with the user-specific settings.xml being dominant. 
 
 Tip: If you need to create user-specific settings from scratch, it's easiest to copy the global settings from your Maven installation to your ${user.home}/.m2 directory. Maven's default settings.xml is a template with comments and examples so you can quickly tweak it to match your needs.   
 
 
specific settings.xml
**********************

If you want to run maven with a specific YouOwnSettings.xml

  $ mvn --settings YourOwnSettings.xml clean install

or  

  $ mvn -s YourOwnSettings.xml clean install
 ======================================================================================
 
 
    Adding SLF4J to your Maven Project
    **********************************

Eclipse:    Indigo and Juno
m2e:        1.1.*
The error appears in any maven project even without declaring slf4j dependency.    

m2e DEFECT
 
 If you see this, most likely you need to add slf4j to your project dependencies or your build path depending on the IDE you're using:
 
 
 SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
 SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
 
 
 
  
 
 
 To add SLF4j to your project, the first thing to is to add in the SLF4j API
 
 
     <properties>
        <slf4jVersion>1.6.1</slf4jVersion>
     </properties>

     <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>${slf4jVersion}</version>
    </dependency>


...which is pretty simple. The thing to note is that this must be in compile scope. The next step is to choose a binding library; one of the following:


    <!-- CHOOSE BETWEEN ONE OF THESE DIFFERENT BINDINGS -->
    <!-- Binding for NOP, silently discarding all logging. -->
    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-nop</artifactId>
        <version>${slf4jVersion}</version>
    </dependency>
    <!-- Binding for System.out -->
    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-simple</artifactId>
        <version>${slf4jVersion}</version>
    </dependency>       
    <!--Binding for log4j version 1.2.x You also need to 
    place log4j.jar on your class path. -->
    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-log4j12</artifactId>
        <version>${slf4jVersion}</version>
    </dependency>
    <dependency>
        <groupId>log4j</groupId>
        <artifactId>log4j</artifactId>
        <version>1.2.16</version>
        <scope>runtime</scope>
    </dependency>
    <!--Binding for commons logging over slf4j -->
    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>jcl-over-slf4j</artifactId>
        <version>${slf4jVersion}</version>
        <scope>runtime</scope>
    </dependency>

...and note that the scope here can be runtime.

If you add more than one binding JAR to your project config, then you'll get the following error message:

    SLF4J: Class path contains multiple SLF4J bindings.
    SLF4J: Found binding in [jar:file:/Users/Roger/.m2/repository/org/slf4j/slf4j-nop/1.6.1/slf4j-nop-1.6.1.jar!/org/slf4j/impl/StaticLoggerBinder.class]
    SLF4J: Found binding in [jar:file:/Users/Roger/.m2/repository/org/slf4j/slf4j-log4j12/1.6.1/slf4j-log4j12-1.6.1.jar!/org/slf4j/impl/StaticLoggerBinder.class]
    SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.


======================================================================================


    Snapshots versus Releases
    *************************
    
SNAPSHOT - the code is under devevelopment.

    It implies that the build could change at any time and is still under active development.
    A "snapshot" is a build that can be replaced by another build under the same name.


RELEASE - is the final build for a version that does not change.


======================================================================================


    Set Up Maven To Run Unit Tests And Integration Tests Separately
    ***************************************************************
    
 Test classes ending with 'IntegrationTests.java' will be run in the integration-test phase:
 
 
 
 <?xml version="1.0" encoding="UTF-8"?>
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>
   <groupId>org.test.maven</groupId>
   <version>0.1-SNAPSHOT</version>
   <name>maven-tests</name>
   <artifactId>maven-tests</artifactId>
   
   <properties>
     <maven.test.skip>false</maven.test.skip>
   </properties>
   
   <dependencies>
     <dependency>
       <groupId>junit</groupId>
       <artifactId>junit</artifactId>
       <version>4.8.2</version>
     </dependency>
   </dependencies>
 
   <build>
     <plugins>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-compiler-plugin</artifactId>
         <configuration>
           <source>1.6</source>
           <target>1.6</target>
         </configuration>
       </plugin>
       <plugin>
         <!-- Separates the unit tests from the integration tests. -->
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-surefire-plugin</artifactId>
         <configuration>
           <!-- Skip the default running of this plug-in (or everything is run twice...) -->
           <skip>true</skip>
         </configuration>
         <executions>
           <execution>
             <id>unit-tests</id>
             <phase>test</phase>
             <goals>
               <goal>test</goal>
             </goals>
             <configuration>
               <skip>${maven.test.skip}</skip>
               <includes>
                 <!-- Include unit tests within integration-test phase -->
                 <include>**/*Tests.java</include>
               </includes>
               <excludes>
                 <!-- Exclude integration tests within (unit) test phase -->
                 <exclude>**/*IntegrationTests.java</exclude>
               </excludes>
             </configuration>
           </execution>
           <execution>
             <id>integration-tests</id>
             <phase>integration-test</phase>
             <goals>
               <goal>test</goal>
             </goals>
             <configuration>
               <skip>${maven.test.skip}</skip>
               <includes>
                 <!-- Include integration tests within integration-test phase -->
                 <include>**/*IntegrationTests.java</include>
               </includes>
             </configuration>
           </execution>
         </executions>
       </plugin>
     </plugins>
   </build>
 </project>

 
=====================================================================

    Maven plugin for Eclipse
    ************************
    
m2Eclipse maven plugin requires that Eclipse runs in a JDK, not JRE.

Adding -vm option in eclipse.ini did not solve the problem.
Create a new shortcut to launch Eclipse:

"C:\Users\craiskin\Programs\eclipse-jee-helios-SR2\eclipse.exe" -vm "C:\Java\jdk1.6.0_24\bin\javaw.exe"


07.2012 - Now with Indigo JDK 1.7

07.2012 - Now with Juno JDK 1.7

    JEE edition still does not come with m2e plugin, but it was easy to install:
    
    Help -> Eclipse Marketplace -> search for m2e
    Select "Maven Integration for Eclipse"
    Install
    
    After the install "Maven" is available in Import dialog.
    
    
    Creating new Maven project with m2e/eclipse
    ===========================================
    
    1. File > New > Project > Maven > Maven Project
    2. maven-archetype-quickstart
    3. specify group and artifact id

    Install 
    
    4. Right-click on the project, select Run As > Maven install
    

=============================================================



    What is Mojo?
    *************
    
A mojo is a Maven plain Old Java Object. 
Each mojo is an executable goal in Maven, and a plugin is a distribution of one or more related mojos.    
    
=============================================================
    
    m2eclipse sets JDK compliance to 1.5
    ************************************
    
Q:
Using eclipse 3.5, when I create a new maven project, m2eclipse automatically adds J2SE1.4 to libraries and Compiler Compliance Level to 1.4 (Project properties > Java Compiler). My JRE system library is 1.6 and my default compiler compliance level is 1.6. I don't even have 1.4 installed. Can I make m2eclipse use my default settings and prevent it from modifying project settings?


A:
    It should follow the maven-compiler-plugin configuration:

        <build>
            [...]
            <plugins>
              <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                  <source>1.6</source>
                  <target>1.6</target>
                </configuration>
              </plugin>
            </plugins>
            [...]
        </build>
          
          
However if you use Run as... / Maven build..., or create corresponding launch config from the Run/Debug menu, then you can select JVM that is used to launch Maven and all your compiler configuration will be respected in the same way it is respected in the command line.

So:

  <plugins>
     <plugin>
       <groupId>org.apache.maven.plugins</groupId>
       <artifactId>maven-compiler-plugin</artifactId>
       <configuration>
         <verbose>true</verbose>
         <fork>true</fork>
         <executable><!-- path-to-javac --></executable>
         <compilerVersion>1.3</compilerVersion>
       </configuration>
     </plugin>
   </plugins>          
          
          
The JDK compliance level is derived from the maven project, not the other way around. In other words, you need to configure the maven compiler plugin for 1.6 level compliance and then m2eclipse will derive the appropriate settings under Eclipse:

<plugin>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-compiler-plugin</artifactId>
  <version>2.0.2</version>
  <configuration>
    <source>1.6</source>
    <target>1.6</target>
  </configuration>
</plugin>
The pom.xml is the master, not m2eclipse.          

=============================================================    

    Running java main from maven
    ****************************
    
Maven exec plugin lets you run the main method of a Java class in your project, with the project dependencies automatically included in the classpath. This article show you 3 ways of using the maven exec plugin to run java, with code examples.


1) Running from Command line

Since you are not running your code in a maven phase, you first need to compile the code. Remember exec:java does not automatically compile your code, you need to do that first.

    mvn compile  

Once your code is compiled, the following command runs your class

    mvn exec:java -Dexec.mainClass="com.vineetmanohar.module.Main"  
    
or with args

    mvn exec:java -Dexec.mainClass="com.vineetmanohar.module.Main" -Dexec.args="arg0 arg1 arg2"  
    
with runtime dependencies in the CLASSPATH:


    mvn exec:java -Dexec.mainClass="com.vineetmanohar.module.Main" -Dexec.classpathScope=runtime  
    
    
2) Running in a phase in pom.xml

You can also run the main method in a maven phase. For example, you can run the CodeGenerator.main() method as part of the test phase.

    <build>
     <plugins>
      <plugin>
       <groupId>org.codehaus.mojo</groupId>
       <artifactId>exec-maven-plugin</artifactId>
       <version>1.1.1</version>
       <executions>
        <execution>
         <phase>test</phase>
         <goals>
          <goal>java</goal>
         </goals>
         <configuration>
          <mainClass>com.vineetmanohar.module.CodeGenerator</mainClass>
          <arguments>
           <argument>arg0</argument>
           <argument>arg1</argument>
          </arguments>
         </configuration>
        </execution>
       </executions>
      </plugin>
     </plugins>
    </build>

To run the exec plugin with above configuration, simply run the corresponding phase.

    mvn test  


3) Running in a profile in pom.xml

You can also run the main method in a different profile. Simply wrap the above config in the <profile> tag.


    <profiles>
     <profile>
      <id>code-generator</id>
      <build>
       <plugins>
        <plugin>
         <groupId>org.codehaus.mojo</groupId>
         <artifactId>exec-maven-plugin</artifactId>
         <version>1.1.1</version>
         <executions>
          <execution>
           <phase>test</phase>
           <goals>
            <goal>java</goal>
           </goals>
           <configuration>
            <mainClass>com.vineetmanohar.module.CodeGenerator</mainClass>
            <arguments>
             <argument>arg0</argument>
             <argument>arg1</argument>
            </arguments>
           </configuration>
          </execution>
         </executions>
        </plugin>
       </plugins>
      </build>
     </profile>
    </profiles>


To call the above profile, run the following command:

    mvn test -Pcode-generator  
    


Advanced options:
----------------

You can get a list of all available parameters by typing:    

    mvn exec:help -Ddetail=true -Dgoal=java  


arguments (exec.arguments)

 The class arguments.
classpathScope (exec.classpathScope, Default: compile)

 Defines the scope of the classpath passed to the plugin. Set to
 compile, test, runtime or system depending on your needs
cleanupDaemonThreads (exec.cleanupDaemonThreads)

 Wether to interrupt/join and possibly stop the daemon threads upon
 quitting.  If this is false, maven does nothing about the daemon threads.
 When maven has no more work to do, the VM will normally terminate any
 remaining daemon threads.
 In certain cases (in particular if maven is embedded), you might need to
 keep this enabled to make sure threads are properly cleaned up to ensure
 they don't interfere with subsequent activity. In that case, see
 daemonThreadJoinTimeout and stopUnresponsiveDaemonThreads for further
 tuning.



=============================================================

    maven profiles
    **************
    
    
    <profiles>  
         <profile>  
          <id>acceptance-test</id>  
          <build>  
               <plugins>  
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>2.14.1</version>
                        <configuration>
                            <argLine>-Xms512m -Xmx2048m -XX:MaxPermSize=512m</argLine>
                            <includes>
                                <include>**/BatchInvoiceAcceptanceTestSuite.java</include>
                            </includes>
                        </configuration>
                    </plugin> 
               </plugins>  
          </build>  
         </profile>  
    </profiles> 
    
    
    > mvn -Pacceptance-test test
    
    
    Maven Profiles Example     
    **********************
    
Let us imagine that you need to have two builds. The difference in the two builds is the version of a single jar. For example, let us say that you need to have a build named profile-A with the version 1.0.0 of a jar and profile-B with the version 2.0.0 of a jar. The following is the pom.xml which shows how to do this.

<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>profiles-example</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>profiles-example</name>
  <url>http://maven.apache.org</url>
 
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <profiles>
      <profile>
          <id>profile-A</id>
          <dependencies>
              <dependency>
                <groupId>com.example</groupId>
                <artifactId>dependency</artifactId>
                <version>1.0.0</version>
              </dependency>
          </dependencies>
      </profile>
      <profile>
          <id>profile-B</id>
          <dependencies>
              <dependency>
                <groupId>com.example</groupId>
                <artifactId>dependency</artifactId>
                <version>2.0.0</version>
              </dependency>
          </dependencies>
      </profile>
  </profiles>
</project>


Now you can invoke profile-A using the command

mvn -Pprofile-A install

which will build the project with the dependancy version 1.0.0.

    
=============================================================

    Run individual test
    *******************
    
mvn test -Dtest=uk.co.farwell.AppTest#testSlow    
    
    
    Run individual test on a module in a multi-module project
    *********************************************************
    
mvn test -Dtest=testname -pl subproject   
    

=============================================================

    Maven - Run JUnit Testsuite in module
    *************************************
    
    
clean install test -Dtest=myTestSuite -DfailIfNoTests=false 

-DfailIfNoTests=false will force maven to continue with the build if ProjA contains no Test classes.


mvn test -Dtest=SomeTestSuite    


Surefire is the Maven2 plugin for running tests:

http://maven.apache.org/plugins/maven-surefire-plugin/

<includes>
     <include>**/IntegrationSuite.java</include>
</includes>
    

Be careful about using forkCount and argLine    
    
    
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.14.1</version>
                <configuration>
                    <forkCount>1</forkCount> 
                    <argLine>-Xms512m -Xmx1536m -XX:MaxPermSize=512m</argLine>
                    <includes>
                        <include>**/BatchInvoiceUnitTestSuite.java</include>
                    </includes>
                </configuration>
            </plugin>    
    
Had to increase -Xmx2048m

Also 

java.lang.OutOfMemoryError: GC overhead limit exceeded

    Disabling the error check altogether, via "-XX:-UseGCOverheadLimit"
    
=============================================================    

    maven - inclusions and exlusions of test  -  Surefire plugin
    ************************************************************
    
Inclusions
----------

By default, the Surefire Plugin will automatically include all test classes with the following wildcard patterns:

    "**/Test*.java" - includes all of its subdirectories and all java filenames that start with "Test".
    "**/*Test.java" - includes all of its subdirectories and all java filenames that end with "Test".
    "**/*TestCase.java" - includes all of its subdirectories and all java filenames that end with "TestCase".
    
If the test classes does not go with the naming convention, then configure Surefire Plugin and specify the tests you want to include.



<project>
  [...]
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.12.3</version>
        <configuration>
          <includes>
            <include>Sample.java</include>
          </includes>
        </configuration>
      </plugin>
    </plugins>
  </build>
  [...]
</project>    
    
    
Exclusions
----------

Exclusions

There are certain times when some tests are causing the build to fail. Excluding them is one of the best workarounds to continue the build. Exclusions can be done by configuring the excludes property of the plugin.

<project>
  [...]
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.12.3</version>
        <configuration>
          <excludes>
            <exclude>**/TestCircle.java</exclude>
            <exclude>**/TestSquare.java</exclude>
          </excludes>
        </configuration>
      </plugin>
    </plugins>
  </build>
  [...]
</project>


Regular expression support
--------------------------

An include/exclude pattern can be an ant-style path expression, but regular expressions are also supported through this syntax:

<project>
  [...]
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.12.3</version>
        <configuration>
          <includes>
            <include>%regex[.*[Cat|Dog].*Test.*]</include>
          </includes>
        </configuration>
      </plugin>
    </plugins>
  </build>
  [...]
</project>


=============================================================

    surefire plugin and Java version
    ********************************
    
you can specify Java version for the compiler plugin:

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <verbose>true</verbose>
                    <fork>true</fork>
                    <compilerVersion>${java.version}</compilerVersion>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>


but surefire plugin does not use that.  
Instead, it uses the executable found on the %PATH%.
You can specify explicitly which JDK to use:

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.14.1</version>
                <configuration>
                    <jvm>${env.JAVA_HOME_7}/bin/java</jvm>
                    <argLine>-Xms512m -Xmx3072m -XX:MaxPermSize=512m</argLine>
                    <includes>
                        <include>**/BatchInvoiceUnitTestSuite.java</include>
                    </includes>
                </configuration>
            </plugin>


But, I'm not sure that is a good idea, as everyone needs to setup that env Variable.



=============================================================


Maven Failsafe Plugin   and integration test
*********************************************

maven-failsafe-plugin

The Failsafe Plugin is designed to run integration tests while the Surefire Plugins is designed to run unit tests. The name (failsafe) was chosen both because it is a synonym of surefire and because it implies that when it fails, it does so in a safe way.

The Maven lifecycle has four phases for running integration tests:

    pre-integration-test for setting up the integration test environment.
    integration-test for running the integration tests.
    post-integration-test for tearing down the integration test environment.
    verify for checking the results of the integration tests.
    
    
    The Maven build lifecycle now includes the "integration-test" phase for running integration tests, which are run separately from the unit tests run during the "test" phase. It runs after "package", so if you run "mvn verify", "mvn install", or "mvn deploy", integration tests will be run along the way.

    By default, integration-test runs test classes named **/IT*.java, **/*IT.java, and **/*ITCase.java, but this can be configured.


http://docs.codehaus.org/display/MAVENUSER/Maven+and+Integration+Testing

"The Failsafe Plugin is designed to run integration tests while the Surefire Plugins is designed to run unit tests." - http://maven.apache.org/plugins/maven-failsafe-plugin/


Using the Maven Failsafe Plugin to run Integration Tests

The Maven Failsafe Plugin is a fork of the Maven Surefire Plugin designed to help when running integration tests.

If you use this approach, you keep all your tests for a module in the testSourceDirectory, e.g. src/test/java. By default the Failsafe Maven Plugin looks for integration tests matching the patterns */IT.java, **/IT.java and */*ITCase.java.  You will notice that these bindings do not overlap with the default surefire bindings.  To use the Maven Failsafe Plugin you need to add the following to your pom.xml file.


<project>
  [...]
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>2.6</version>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  [...]
</project>


You will then have the following lifecycle bindings

    Phase               Plugin execution goal
    ---------------------------------------------    
    test                surefire:test

    integration-test    failsafe:integration-test

    verify              failsafe:verify
    

The Failsafe Plugin generates reports in 2 different file formats:

    Plain text files (*.txt)
    XML files (*.xml)

By default, these files are generated at ${basedir}/target/failsafe-reports.

For an HTML format of the report, please see the Maven Surefire Report Plugin.

=============================================================

    Surefire Report Plugin
    **********************
    
maven-surefire-report-plugin

http://maven.apache.org/surefire/maven-surefire-report-plugin/usage.html


To generate the Surefire report as part of the site generation, add the following in the <reporting> section of your POM:

<project>
  ...
  <reporting>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <version>2.14.1</version>
      </plugin>
    </plugins>
  </reporting>
  ...
</project>


When the mvn site is invoked, the report will be automatically included in the Project Reports menu as shown in the figure below.



=============================================================

    Cobertura Maven Plugin
    **********************
    
http://mojo.codehaus.org/cobertura-maven-plugin/


This plugin provides the features of Cobertura within the Maven 2 & 3 environment.

    What is Cobertura?

    Cobertura is a free Java tool that calculates the percentage of code accessed by tests. It can be used to identify which parts of your Java program are lacking test coverage. It is based on jcoverage. 

The report generated by this plugin is the result of executing the Cobertura tool against your compiled classes to help you determine how well the unit testing efforts have been, and can then be used to identify which parts of your Java program are lacking test coverage.

Goals available for this plugin:

Goal            Report?     Description
--------------------------------------------------------------------
cobertura:check No          Check the Last Instrumentation Results.
cobertura:clean No          Clean up rogue files that cobertura maven plugin is tracking.
cobertura:cobertura Yes     Instruments, Tests, and Generates a Cobertura Report.
cobertura:dump-datafile No  Cobertura Datafile Dump Mojo
cobertura:help  No          Display help information on cobertura-maven-plugin.
cobertura:instrument    No  Instrument the compiled classes.


Usage
=====

You should specify the version in your project's plugin configuration:

<project>
  ...
  <build>
    <!-- To define the plugin version in your parent POM -->
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>cobertura-maven-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        ...
      </plugins>
    </pluginManagement>
    <!-- To use the plugin goals in your POM or parent POM -->
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>cobertura-maven-plugin</artifactId>
        <version>2.5.2</version>
      </plugin>
      ...
    </plugins>
  </build>
  ...
  <!-- To use the report goals in your POM or parent POM -->
  <reporting>
    <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>2.5.2</version>
                <configuration>
                    <formats>
                        <format>html</format>
                        <format>xml</format>
                    </formats>
                </configuration>
            </plugin>
      ...
    </plugins>
  </reporting>
  ...
</project>


=============================================================

    3 ways to run Java main from Maven 
    **********************************
    
Maven exec plugin lets you run the main method of a Java class in your project, with the project dependencies automatically included in the classpath. This article show you 3 ways of using the maven exec plugin to run java, with code examples.


1) Running from Command line

Since you are not running your code in a maven phase, you first need to compile the code. Remember exec:java does not automatically compile your code, you need to do that first.

    mvn compile  

Once your code is compiled, the following command runs your class
Without arguments:


    mvn exec:java -Dexec.mainClass="com.vineetmanohar.module.Main"  

With arguments:


    mvn exec:java -Dexec.mainClass="com.vineetmanohar.module.Main" -Dexec.args="arg0 arg1 arg2"  

With runtime dependencies in the CLASSPATH:


    mvn exec:java -Dexec.mainClass="com.vineetmanohar.module.Main" -Dexec.classpathScope=runtime  
    
    

2) Running in a phase in pom.xml

You can also run the main method in a maven phase. For example, you can run the CodeGenerator.main() method as part of the test phase.


    <build>  
     <plugins>  
      <plugin>  
       <groupId>org.codehaus.mojo</groupId>  
       <artifactId>exec-maven-plugin</artifactId>  
       <version>1.1.1</version>  
       <executions>  
        <execution>  
         <phase>test</phase>  
         <goals>  
          <goal>java</goal>  
         </goals>  
         <configuration>  
          <mainClass>com.vineetmanohar.module.CodeGenerator</mainClass>  
          <arguments>  
           <argument>arg0</argument>  
           <argument>arg1</argument>  
          </arguments>  
         </configuration>  
        </execution>  
       </executions>  
      </plugin>  
     </plugins>  
    </build>  

To run the exec plugin with above configuration, simply run the corresponding phase.

    mvn test  
    
    
    
3) Running in a profile in pom.xml

You can also run the main method in a different profile. Simply wrap the above config in the <profile> tag.


    <profiles>  
     <profile>  
      <id>code-generator</id>  
      <build>  
       <plugins>  
        <plugin>  
         <groupId>org.codehaus.mojo</groupId>  
         <artifactId>exec-maven-plugin</artifactId>  
         <version>1.1.1</version>  
         <executions>  
          <execution>  
           <phase>test</phase>  
           <goals>  
            <goal>java</goal>  
           </goals>  
           <configuration>  
            <mainClass>com.vineetmanohar.module.CodeGenerator</mainClass>  
            <arguments>  
             <argument>arg0</argument>  
             <argument>arg1</argument>  
            </arguments>  
           </configuration>  
          </execution>  
         </executions>  
        </plugin>  
       </plugins>  
      </build>  
     </profile>  
    </profiles> 
    
    

To call the above profile, run the following command:

    mvn test -Pcode-generator      



=============================================================

    error: plugin execution not covered by lifecycle configuration
    **************************************************************
    
http://wiki.eclipse.org/M2E_plugin_execution_not_covered


 ignore plugin goal

ignore, as the name suggests, tells m2e to silently ignore the plugin execution. Here is sample pom.xml snippet

   <pluginManagement>
  <plugins>
    <plugin>
      <groupId>org.eclipse.m2e</groupId>
      <artifactId>lifecycle-mapping</artifactId>
      <version>1.0.0</version>
      <configuration>
        <lifecycleMappingMetadata>
          <pluginExecutions>
            <pluginExecution>
              <pluginExecutionFilter>
                <groupId>some-group-id</groupId>
                <artifactId>some-artifact-id</artifactId>
                <versionRange>[1.0.0,)</versionRange>
                <goals>
                  <goal>some-goal</goal>
                </goals>
              </pluginExecutionFilter>
              <action>
                <ignore />
              </action>
            </pluginExecution>
          </pluginExecutions>
        </lifecycleMappingMetadata>
      </configuration>
    </plugin>
  </plugins>
</pluginManagement>


HINT: m2e provides a quick-fix associated with "plugin execution not covered" to easily create <pluginManagement/> elements like above.
execute plugin goal

execute tells m2e to execute the action as part of Eclipse workspace full or incremental build. Beware that m2e does not provide any safeguards against rogue maven plugins that leak classloaders, modify random files inside workspace or throw nasty exceptions to fail the build. Use this as the last resort and make sure you know what you are doing.

   <pluginManagement>
  <plugins>
    <plugin>
      <groupId>org.eclipse.m2e</groupId>
      <artifactId>lifecycle-mapping</artifactId>
      <version>1.0.0</version>
      <configuration>
        <lifecycleMappingMetadata>
          <pluginExecutions>
            <pluginExecution>
              <pluginExecutionFilter>
                <groupId>some-group-id</groupId>
                <artifactId>some-artifact-id</artifactId>
                <versionRange>[1.0.0,)</versionRange>
                <goals>
                  <goal>some-goal</goal>
                </goals>
              </pluginExecutionFilter>
              <action>
                <execute >
                  <runOnIncremental>false</runOnIncremental>
                </execute >
              </action>
            </pluginExecution>
          </pluginExecutions>
        </lifecycleMappingMetadata>
      </configuration>
    </plugin>
  </plugins>
</pluginManagement>


HINT: use quick fix to create "ignore" mapping, then replace <ignore/> action with <execute/> 



Here is what I had, but it didn't help load properties when running tests

    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <version>1.0-alpha-2</version>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <files>
                                <file>${project.basedir}/src/test/resources/test.properties</file>
                            </files>
                        </configuration>
                    </execution>
                </executions>
            </plugin>   




==============================================================

    Maven Assembly Plugin
    *********************
    
http://maven.apache.org/plugins/maven-assembly-plugin/examples/multimodule/module-binary-inclusion-simple.html

intended to allow users to aggregate the project output along with its dependencies, modules, site documentation, etc., into a single distributable archive.

Your project can build distribution "assemblies" easily, using one of the convenient, prefabricated assembly descriptors. These descriptors handle many common operations, such as packaging a project's artifact along with generated documentation into a single zip archive. Alternatively, your project can provide its own descriptor and assume a much higher level of control over how dependencies, modules, file-sets, and individual files are packaged in the assembly.

The assembly descriptor is located in 

  ${project.basedir}/src/assembly 

which is the standard location.


Currently it can create distributions in the following formats:

    zip
    tar
    tar.gz
    tar.bz2
    jar
    dir
    war
    and any other format that the ArchiveManager has been configured for

If your project wants to package your artifact in an uber-jar, the assembly plugin provides only basic support.


mvn package

target/sample-1.0-SNAPSHOT-jar-with-dependencies.jar

===> see

http://www.petrikainulainen.net/programming/tips-and-tricks/creating-a-runnable-binary-distribution-with-maven-assembly-plugin/


distribution assembly in sic-person-service
********************************************

NOTE: for distro assembly in a separate module see below.


sic-person/
  |
  +- sic-person-da/
  |
  +- sic-person-model/
  |
  +- sic-person-service/
        |
        + distribution/
              |
              + assembly/
                  assembly.xml
              + config/
                  config.yml
              + scripts/
                  person-service.sh
        |
        + pom.xml


  |
  + pom.xml
  + .gitattributes
  + .gitignore


sic-person-service/pom.xml
---------------------------

*** NOTE *** 
1)
maven-assembly-plugin is listed 1st in the list of build.plugins.
when it was listed after shade, assembly-plugin could not find assembly.xml..
2)
<appendAssemblyId>false</appendAssemblyId>
This element in the configuration forces maven-assembly-plugin to drop the <id> element in assembly.xml.
Otherwise, it is included in the pom as:
  <classifier>bin</classifier>
and appended to the assembly filename:
  sic-person-service-distro-1.0-SNAPSHOT-distribution.zip



    <build>
        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>${maven-assembly-plugin.version}</version>
                <executions>
                    <execution>
                        <id>distro-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <appendAssemblyId>false</appendAssemblyId>
                            <descriptors>
                                <descriptor>distribution/assembly/assembly.xml</descriptor>
                            </descriptors>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration combine.self="override">
                    <jvm>${java.home}/bin/java</jvm>
                    <systemPropertyVariables>
                        <test-properties-file>${test-properties-file}</test-properties-file>
                    </systemPropertyVariables>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>${maven-shade-plugin.version}</version>
                . . . 
            </plugin>

        </plugins>
    </build>



    moduleSets
    **********


    NOTE: moduleSets can be used to refer to children ONLY.
    That is, the assembly will be in the parent project.

    If your assembly is in a sibling module, you have to use dependencySet, instead of moduleSet.
    
    http://stackoverflow.com/questions/17310482/the-maven-assembly-plugin-moduleset-sources-instructions-are-not-including-any-f


    dependencySet
    *************

https://maven.apache.org/plugins/maven-assembly-plugin/advanced-descriptor-topics.html

When using dependencySet or moduleSet, the <includes/> and <excludes/> sections actually apply to artifacts, not filenames. This can be a good thing, since you don't have to know the artifact's filename in the local repository. However, explicitly specifying the full artifact ID (consisting of groupId, artifactId, version, type, and classifier) for each artifact to be included or excluded can lead to very a verbose descriptor. Starting with version 2.2, the assembly plugin addresses the clumsiness of explicit artifact identification through the use of wildcard patterns.

The following easy rules should be applied when specifying artifact-matching patterns:

  1. Artifacts are matched by a set of identifier strings. In the following strings, type is 'jar' by default, and classifier is omitted if null.
    groupId:artifactId:type:classifier ( artifact.getDependencyConflictId() )
    groupId:artifactId ( ArtifactUtils.versionlessKey( artifact ) )
    groupId:artifactId:type:classifier:version ( artifact.getId() )

  2. Any '*' character in an include/exclude pattern will result in the pattern being split, and the sub-patterns being matched within the three artifact identifiers mentioned above, using String.indexOf(..).
  
  3. When no '*' is present in an include/exclude pattern, the pattern will only match if the entire pattern equals one of the three artifact identifiers above, using the String.equals(..) method.
  
  4. In case you missed it above, artifact-identification fields are separated by colons (':') in the matching strings. So, a wildcard pattern that matches any artifact of type 'war' might be specified as *:war.
  

  <outputDirectory>
    sets the output directory relative to the root dir of the assembly


  <useProjectArtifact>false</useProjectArtifact>    
    default: true
    exclude the current project 

  <useTransitiveDependencies>true</useTransitiveDependencies>
    default: true
    if true, includes/excludes/useTransitiveFiltering will apply to transitive dependencies
    if false, it is meaningless


=======================================================================================


Build executable JAR with Maven
*******************************


Of course, replace org.sample.App with the class you want to have executed. Little bonus, I've bound assembly:single to the package phase so you don't have to run assembly:assembly anymore. Just run mvn install and the assembly will be produced during the standard build.

So, please update your pom.xml with the configuration given above and run mvn clean install. Then, cd into the target directory and try again:

java -jar logmanager-0.1.0-jar-with-dependencies.jar


    <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <version>2.2</version>
            <!-- nothing here -->
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-assembly-plugin</artifactId>
            <version>2.2-beta-4</version>
            <configuration>
              <descriptorRefs>
                <descriptorRef>jar-with-dependencies</descriptorRef>
              </descriptorRefs>
              <archive>
                <manifest>
                  <mainClass>com.go2uti.oneworld.util.Obfuscator</mainClass>
                </manifest>
              </archive>
            </configuration>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>single</goal>
                </goals>
              </execution>
            </executions>
          </plugin>     
        </plugins>
    </build>


NOTE:

For Java 6, you may (or may not) need to configure the maven-compiler-plugin. Add this to your pom.xml:

  <plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <configuration>
      <source>1.6</source>
      <target>1.6</target>
    </configuration>
  </plugin>

==============================================================

    uber jar
    ********
    
    
    
** Warning **
    If your application has a dependency which must be signed (e.g., a JCA/JCE provider or other trusted library), you have to add an exclusion to the maven-shade-plugin configuration for that library and include that JAR in the classpath.    
    


maven-shade-plugin



            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>2.0</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <forceCreation>true</forceCreation>
                            <createDependencyReducedPom>true</createDependencyReducedPom>
                            <dependencyReducedPomLocation>${project.build.directory}/dependency-reduced-pom.xml</dependencyReducedPomLocation>
                            <filters>
                                <filter>
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                    </excludes>
                                </filter>
                            </filters>                          
                            <artifactSet>
                                <excludes>
                                    <exclude>junit:junit:jar:</exclude>
                                    <exclude>org.slf4j:slf4j-api:jar:</exclude>
                                    <exclude>org.slf4j:slf4j-log4j12:jar:</exclude>
                                    <exclude>com.google.guava:guava:jar:</exclude>
                                </excludes>
                            </artifactSet>
                        </configuration>
                    </execution>
                </executions>               
            </plugin>


NOTE: 
http://stackoverflow.com/questions/2588502/maven-assembly-plugin-doesnt-add-dependencies-with-system-scope

maven-shade-plugin  does NOT work with dependencies in SYSTEM scope. (** not unless you use pluginManagement ** see below.)

A workaround would be to 

1. create a local file system repository:
2. use addjars-maven-plugin (see example in this document)


File system repository:

    http://stackoverflow.com/questions/2229757/maven-add-a-dependency-to-a-jar-by-relative-path/2230464#2230464


    If you really want this (understand, if you can't use a corporate repository), then my advice would be to use a "file repository" local to the project and to not use a system scoped dependency. The system scoped should be avoided, such dependencies don't work well in many situation (e.g. in assembly), they cause more troubles than benefits.

    So, instead, declare a repository local to the project:

    <repositories>
      <repository>
        <id>my-local-repo</id>
        <url>file://${basedir}/my-repo</url>
      </repository>
    </repositories>

    Install your third party lib in there using install:install-file with the localRepositoryPath parameter:

    It appears that install:install-file ignores the localRepositoryPath when using the version 2.2 of the plugin. However, it works with version 2.3 and later of the plugin. So use the fully qualified name of the plugin to specify the version:

    mvn org.apache.maven.plugins:maven-install-plugin:2.3.1:install-file \
                             -Dfile=<path-to-file> -DgroupId=<myGroup> \ 
                             -DartifactId=<myArtifactId> -Dversion=<myVersion> \
                             -Dpackaging=<myPackaging> -DlocalRepositoryPath=<path>

    Finally, declare it like any other dependency (but without the system scope):

    <dependency>
      <groupId>your.group.id</groupId>
      <artifactId>3rdparty</artifactId>
      <version>X.Y.Z</version>
    </dependency>

    This is IMHO a better solution than using a system scope as your dependency will be treated like a good citizen (e.g. it will be included in an assembly and so on).

    Now, I have to mention that the "right way" to deal with this situation in a corporate environment (maybe not the case here) would be to use a corporate repository.



------------------------------------------


  dependency-reduced-pom.xml in project root
  ******************************************

Q: how do I configure shade to put this file in target?


A:  
  Add this to configuration:


                    <createDependencyReducedPom>true</createDependencyReducedPom>
                    <dependencyReducedPomLocation>${project.build.directory}/dependency-reduced-pom.xml</dependencyReducedPomLocation>



----------------------------------------

Q: Exception: Invalid signature file digest for Manifest main attributes


A:
For those who got this error when trying to create an uber-jar with maven-shade-plugin, the solution is to exclude manifest signature files by adding the following lines to the plugin configuration:

<configuration>
    <filters>
        <filter>
            <artifact>*:*</artifact>
            <excludes>
                <exclude>META-INF/*.SF</exclude>
                <exclude>META-INF/*.DSA</exclude>
                <exclude>META-INF/*.RSA</exclude>
            </excludes>
        </filter>
    </filters>
    <!-- Additional configuration. -->
</configuration>

==============================================================

    Multi Module Project
    ********************
    
see Maven-Multi-Module-Project.txt


==============================================================

    shade plugin on Multimodule projects
    ************************************
    
Q:  
    I have a multimodule project for which I want to use the shade plugin. All is configured in the parent pom. 

    Running on the parent with "mvn clean package" fails with 

    Replacing null with d:\workspace-maven\assemblies\parent\target\parent-0.0.1-SNAPSHOT-shaded.pom 
    [INFO] ------------------------------------------------------------------------ 
    [ERROR] BUILD ERROR 
    [INFO] ------------------------------------------------------------------------ 
    [INFO] Error creating shaded jar: null 

    so how do I need to configure the plugin to not shade the parent as its not a jar but a pom ? 


A:

    put the configuration for the shade plugin in pluginManagement and then just reference the shade plugin in the modules you want to use shade in.



Plugin Management
*****************

@see Maven Multi Module Project.



==============================================================

    maven-archetype-quickstart
    **************************
    
mvn archetype:generate -DgroupId=com.go2uti.oneworld.gi \
                       -DartifactId=EIT_1WORLD_GIFF_BatchInvoiceService_POJO \
                       -Dversion=1.0-SNAPSHOT \
                       -DarchetypeArtifactId=maven-archetype-quickstart \
                       -DinteractiveMode=false    



mvn archetype:generate 
  -DgroupId=jv.proto \
  -DartifactId=emplist-olingo-jpa-webapp \
  -Dversion=1.0-SNAPSHOT \
  -DarchetypeArtifactId=maven-archetype-webapp \
  -DinteractiveMode=false \
  -DarchetypeCatalog=http://pdxlltstd004:8081/nexus/content/groups/public/archetype-catalog.xml

mvn archetype:generate -DgroupId=jv.proto -DartifactId=emplist-olingo-jpa-webapp -Dversion=1.0-SNAPSHOT -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false -DarchetypeCatalog=http://pdxlltstd004:8081/nexus/content/groups/public/archetype-catalog.xml


==============================================================



  distributionManagement
  ***********************

    <distributionManagement>
        <snapshotRepository>
            <id>nexus-snapshots</id>
            <name>Internal Snapshots</name>
            <url>http://nexus.corp.com:8081/nexus/content/repositories/snapshots/</url>
        </snapshotRepository>
        <repository>
            <id>nexus-releases</id>
            <name>Internal Releases</name>
            <url>http://nexus.corp.com:8081/nexus/content/repositories/releases/</url>
        </repository>
    </distributionManagement>  


==============================================================

    Web App Project from Maven Template
    ***********************************
    
    maven-archetype-webapp
    
mvn archetype:generate -DgroupId={project-packaging} -DartifactId={project-name} -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false    
    
E.g.

mvn archetype:generate -DgroupId=com.sample -DartifactId=mvn-jetty-soapui -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false

Maven created following web application directory layout. A standard deployment descriptor web.xml and Maven pom.xml are created.

CounterWebApp
   |-src
   |---main
   |-----resources
   |-----webapp
   |-------index.jsp
   |-------WEB-INF
   |---------web.xml
   |-pom.xml




    Creating a RESTful Web Service From Maven Archetype
    ***************************************************
    
    http://docs.oracle.com/cd/E19226-01/820-7627/giqdq/index.html
    
Although this tutorial does not present instructions on using Maven for creating applications as a general rule, because Project Jersey is built, assembled and installed using Maven, and all of its sample applications are Maven-based, this section provides an example that creates a skeleton Jersey application from a Maven archetype.


Notes:

1. had to create a new remote catalog and download it (m2eclipse)

    file: http://download.java.net/maven/2

2. used jersey-quickstart-webapp
    
    
    http://download.java.net/maven/2/archetype-catalog.xml -> 
    jersey-quickstart-webapp (Archetype for creating a Jersey based RESTful 
web application with WAR packaging)
    
    
Build and run your RESTful web service. 
--------------------------------------

    First, change into the project directory, which is the artifactId, or RESTHelloApp if you used the example text.

    For the Grizzly-based scenario (selection 1), build and run the web service on the Grizzy container using this command: mvn clean compile exec:java.

    If you selected the WAR-based scenario (selection 2), build your WAR file using the command mvn clean package. Deploy the WAR file to your favorite Servlet container. To run it using the embedded version of GlassFish V3, use this command: mvn glassfish:run.    
    
    
Running 
*******

CARGO can be directly run on any existing Maven2

    mvn clean verify org.codehaus.cargo:cargo-maven2-plugin:run
    
This will run Jetty until CTRL-C is pressed

    
This is the configuration:
NOTE: 

            <!-- Deploy the project WAR to a built-in container during the integration test phase -->
            <plugin>
                <groupId>org.codehaus.cargo</groupId>
                <artifactId>cargo-maven2-plugin</artifactId>
                <executions>
                    <!--Start the container in the pre-integration-test phase -->
                    <!-- 
                    <execution>
                        <id>start-container</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    -->
                    <!-- Stop the container after integration tests are done -->
                    <!-- 
                    <execution>
                        <id>stop-container</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                    -->
                </executions>
                <configuration>
                    <wait>false</wait> <!-- We want to deploy, run tests and exit, not wait -->
                    <container>
                        <containerId>jetty6x</containerId>
                        <type>embedded</type>
                    </container>
                    <configuration>
                        <properties>
                            <cargo.servlet.port>8888</cargo.servlet.port>
                        </properties>
                    </configuration>
                </configuration>
            </plugin> 
    
    
    
Running as part of Integration Step
***********************************



            <!-- Deploy the project WAR to a built-in container during the integration test phase -->
            <plugin>
                <groupId>org.codehaus.cargo</groupId>
                <artifactId>cargo-maven2-plugin</artifactId>
                <executions>
                
                    <!--Start the container in the pre-integration-test phase -->
                    <execution>
                        <id>start-container</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <!-- Stop the container after integration tests are done -->
                    <execution>
                        <id>stop-container</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <wait>false</wait> <!-- We want to deploy, run tests and exit, not wait -->
                    <container>
                        <containerId>jetty6x</containerId>
                        <type>embedded</type>
                    </container>
                    <configuration>
                        <properties>
                            <cargo.servlet.port>8888</cargo.servlet.port>
                        </properties>
                    </configuration>
                </configuration>
            </plugin>

    
=================================================================== 

    maven jetty plugin
    ******************
    
http://docs.codehaus.org/display/JETTY/Maven+Jetty+Plugin    
    
In order to run Jetty on a webapp project which is structured according to the usual Maven defaults (resources in ${basedir}/src/main/webapp, classes in ${project.build.outputDirectory} and the web.xml descriptor at ${basedir}/src/main/webapp/WEB-INF/web.xml, you don't need to configure anything.


    mvn jetty:run

This will start Jetty running on port 8080 and serving your project. Jetty will continue to run until the plugin is explicitly stopped, for example, by a <cntrl-c>. You can also use the mvn jetty:stop command. 

jetty:run Goal
jetty:run-war Goal
jetty:deploy-war Goal


Logging
-------
Jetty itself has no dependencies on a particular logging framework, using a built-in logger which outputs to stderr. However, to allow jetty to integrate with other logging mechanisms, if an SLF4J log implementation is detected in the classpath, it will use it in preference to the built-in logger.




If you just want to deploy on embedded Jetty
********************************************

  <build>
    ...
    ...
    <plugins>
        <plugin>
            <groupId>org.mortbay.jetty</groupId>
            <artifactId>jetty-maven-plugin</artifactId>
            <version>7.2.2.v20101205</version>
            <configuration>
              <scanIntervalSeconds>10</scanIntervalSeconds>
              <webAppConfig>
                <contextPath>/path</contextPath>
              </webAppConfig>
              <connectors>
                <connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
                  <port>7070</port>
                  <maxIdleTime>60000</maxIdleTime>
                </connector>
            </connectors>
            </configuration>
        </plugin>
        ...
        ...
    </plugins>
    ...
    ...
  </build>


to build and start Jetty user

 mvn clean install jetty:run
 
 

===================================================================

    resource filtering
    ******************
    
    
http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html

Filtering
---------

    One cool feature of Maven is the possibility of filtering specified resources. One could define some files which will be pre-processed before build and specified properties could be resolved to their proper values.


The proper way of doing that is using following syntax:

    <resources>
     <resource>
      <directory>src/main/resources</directory>
      <filtering>true</filtering>
     </resource>
    </resources>

    <testResources>
     <testResource>
      <directory>src/test/resources</directory>
      <filtering>true</filtering>
     </testResource>
    </testResources>


Variables can be included in your resources. These variables, denoted by the ${...} delimiters, can come from the system properties, your project properties, from your filter resources and from the command line.

For example, if we have a resource src/main/resources/hello.txt containing

    Hello ${name}

And a POM like this

    <project>
      ...
      <name>My Resources Plugin Practice Project</name>
      ...
      <build>
        ...
        <resources>
          <resource>
            <directory>src/main/resources</directory>
          </resource>
          ...
        </resources>
        ...
      </build>
      ...
    </project>

When you call

    mvn resources:resources
    
This will create a resource output in target/classes/hello.txt which contains exactly the same text.

    Hello ${name}    
    
    
However, if we add a <filtering> tag to our POM and set it to true like this:

      ...
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
      ...

Our target/classes/hello.txt after calling

    mvn resources:resources

would be

    Hello My Resources Plugin Practice Project

That's because the name variable was replaced by the value of the project's name (which was specified in the POM).    






Moreover, we can also assign values through the command line using the "-D" option. For example, to change the value for the variable name to "world", we can simply invoke this command:

mvn resources:resources -Dname="world"

And the output in target/classes/hello.txt would be

Hello world

Furthermore, we are not limited to use pre-defined project variables. We can specify our own variables and their values in the <properties> element. For example, if we want to change the variable from "name" to "your.name", we can do so by adding a <your.name> element within the <properties> element.

<project>
  ...
  <properties>
    <your.name>world</your.name>
  </properties>
  ...
</project>

But to organize your project, you may want to put all your variables and their values in a separate file so that you will not have to rewrite your POM, or set their values all the time with every build. This can be done by adding a filter.

<project>
  ...
  <name>My Resources Plugin Practice Project</name>
  ...
  <build>
    ...
    <filters>
      <filter>[a filter property]</filter>
    </filters>
    ...
  </build>
  ...
</project>

For example, we can separate "your.name" from the POM by specifying a filter file my-filter-values.properties containing:

your.name = world

and adding that to our POM

    ...
    <filters>
      <filter>my-filter-values.properties</filter>
    </filters>
    ...

Warning: Do not filter files with binary content like images!


==============================================================


Maven 3 - Resolution will not be reattempted until the update interval of central has elapsed or updates are forced
*****************


I sometimes have this error with Maven 3 when Maven tries to get dependencies:

"Resolution will not be reattempted until the update interval of central has elapsed or updates are forced. Original error: Error transferring file: Connection timed out"

This is often a false positive. Imagine you have a connection issue lasting only 5 seconds when Maven 3 tries to download a dependency, it will mark this dependency as unavailable for a delay. And thus will prevent you from replaying the build command even if the network issue is fixed.

Just run the command with the -U option. Even if its description applies to snapshots, it seems to also fix the error if it occurred on a release.

Example: mvn -U clean package



    
=================================================================================

    MAVEN_OPTS
    **********
    
The environment variable to set is MAVEN_OPTS, for example MAVEN_OPTS=-Xmx1024m. The maxmem configuration in the pom only applies when you set the compiler plugin to fork javac into a new JVM. Otherwise the plugin runs inside the same VM as Maven and thus within the memory passed on the command line via the MAVEN_OPTS.

To set MAVEN_OPTS under Windows 7:

    Right click on My Computer and select Properties
    Click the Advanced System Settings link located in the left navigation of System Properties to display the Advanced System Properties
    Go to the Advanced tab and click the Environment Variables button located at the bottom of the Advanced System Properties configuration window
    Create a New user variable, set the Variable name to MAVEN_OPTS and set the Variable value to -Xmx1024m (or more)

=================================================================================    

    maven-clean-plugin
    ******************
    
    
Running the Clean Plugin automatically during a build.

If for some reason, adding clean to the command-line is not option, e.g.

    mvn clean package
    
the Clean Plugin can be put into a project's pom.xml so that it gets executed everytime the project is built. Below is a sample pom.xml for running the Clean Plugin in the initialize phase everytime the project is built:

<project>
  [...]
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>2.5</version>
        <executions>
          <execution>
            <id>auto-clean</id>
            <phase>initialize</phase>
            <goals>
              <goal>clean</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  [...]
</project>




=================================================================================

    maven archetype webapp
    **********************
    
mvn archetype:generate -DgroupId=com.acme \
                       -DartifactId=my-webapp \
                       -Dversion=1.0-SNAPSHOT \
                       -DarchetypeArtifactId=maven-archetype-webapp \
                       -DinteractiveMode=false


This will generate the following structure:

$ tree my-webapp/
my-webapp/
+-- pom.xml
+-- src
    +-- main
        +-- resources
        +-- webapp
            +-- index.jsp
            +-- WEB-INF
                +-- web.xml


Where the web.xml is a Servlet 2.3 web.xml:

$ cat my-webapp/src/main/webapp/WEB-INF/web.xml 
<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <display-name>Archetype Created Web Application</display-name>
</web-app>


For a Servlet 2.5 web application, replace it with something like this:

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
  version="2.5">
  <display-name>Archetype Created Web Application</display-name>
</web-app>

=================================================================================


    source folder src/main/java does not exist
    ******************************************
    
Simply create a java directory under main (i.e. src/main/java) and right-click on your project and select 

    Maven > Update Project Configuration.    



=================================================================================

    Fixing Error - Importing Maven projects".Unsupported IClasspathEntry kind=4
    ***************************************************************************
    
If you are converting a mvn project into eclipse project using

    mvn eclipse:eclipse
    
and then importing Maven projects into eclipse, you may get this error.

To fix, run 

    mvn eclipse:clean
    
delete and reimport or refresh projects.
    
    
================================================================================= 

    Installing artifact like WSDL into Maven repo 
    *********************************************
    
You can use the build helper maven plugin to do this. 
http://mojo.codehaus.org/build-helper-maven-plugin/attach-artifact-mojo.html

Here is an indicative code snippet

 <build>
 ...
     <plugins>
     ...
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <executions>
                <execution>
                    <id>attach-artifacts</id>
                    <phase>package</phase>
                    <goals>
                        <goal>attach-artifact</goal>
                    </goals>
                    <configuration>
                        <artifacts>
                            <artifact>
                                <file>${wsdlLocation}/project.wsdl</file>
                                <type>wsdl</type>
                            </artifact>
                        </artifacts>
                   </configuration>
               </execution>
            </executions>
        </plugin>
    </plugins>
</build>


=================================================================================

    eclipse m2e and maven generated source folders as eclipse source folders
    ************************************************************************
    
http://stackoverflow.com/questions/7160006/m2e-and-having-maven-generated-source-folders-as-eclipse-source-folders


Q:
    I have a maven project in eclipse and have maven goals that run annotation processors to generate code. The output folder for this code is target/generated-sources/apt.

    In order for eclipse to see this generated code I need to add target/generated-sources/apt as a source folder to the eclipse project.

    However, this causes there to be an error of type "Maven Configuration Problem" saying

    Project configuration is not up-to-date with pom.xml. Run project configuration update

    I think I understand why this is the case as eclipse has a different set of source folders to maven's set. But I need this different set, as I need eclipse to be able to see the generated source folders...

    When doing a pure maven built, these source folders will be included in the build, by maven.

    btw, I have upgraded to the official eclipse release of the maven eclipse plugin, m2e 1.0 - what used to be m2eclipse. I'd like to see if I can find a work around/solution to this with the m2e plugin before I have to go back to the old m2eclipse version.

A:

    You need to attach the source directory with the build-helper-plugin
    
    You will also need to:
    
    - Install the "Apt M2E Connector" from the Eclipse Marketplace.
    - Ensure there are no plugin execution filters for the build-helper-maven-plugin (see http://wiki.eclipse.org/M2E_plugin_execution_not_covered)
    
            <plugin>
                  <groupId>org.codehaus.mojo</groupId>
                  <artifactId>build-helper-maven-plugin</artifactId>
                  <version>${build-helper-maven-plugin.version}</version>
                  <executions>
                    <execution>
                      <id>add-source</id>
                      <phase>generate-sources</phase>
                      <goals>
                        <goal>add-source</goal>
                      </goals>
                      <configuration>
                        <sources>
                          <source>${basedir}/target/generated/src/main/java</source>
                        </sources>
                      </configuration>
                    </execution>
                  </executions>
             </plugin>
             
             
             

=================================================================================


    ensure generated wsdl2java sources are available for testing
    ************************************************************
    
To do that, you need to 

1. use maven-build-helper-pligin to add your generated sources to the build

2. install Apt M2E Connector" from the Eclipse Marketplace.


<build>
  <plugins>
    ...
    <plugin>
      <groupId>org.apache.cxf</groupId>
      <artifactId>cxf-codegen-plugin</artifactId>
      <version>${cxf.version}</version>
      <executions>
        <execution>
          <id>generate-test-sources</id>
          <phase>generate-test-sources</phase>
          <configuration>
            <sourceRoot>${project.build.directory}/generated/cxf</sourceRoot>
            <wsdlOptions>
              <wsdlOption>
                <wsdl>${basedir}/src/main/wsdl/myService.wsdl</wsdl>
              </wsdlOption>
            </wsdlOptions>
          </configuration>
          <goals>
            <goal>wsdl2java</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
    <plugin>
      <groupId>org.codehaus.mojo</groupId>
      <artifactId>build-helper-maven-plugin</artifactId>
      <version>${build-helper-maven-plugin.version}</version>
      <executions>
        <execution>
          <id>add-test-sources</id>
          <phase>generate-test-sources</phase>
          <goals>
            <goal>add-test-source</goal>
          </goals>
          <configuration>
            <sources>
              <source>${project.build.directory}/generated/cxf</source>
            </sources>
          </configuration>
          <goals>
            <goal>wsdl2java</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
    ...
  </plugins>
</build>
 
 
=================================================================================== 

    Display maven build value property 
    **********************************
    
        <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.1</version>
        <executions>
            <execution>
             <phase>generate-sources</phase>
             <goals>
              <goal>run</goal>
             </goals>
             <configuration>
              <tasks>
               <echo>******** Displaying value of property ********</echo>
               <echo>project.basedir: ${project.basedir}</echo>
              </tasks>
             </configuration>
            </execution>
        </executions>
        </plugin>     
        
===================================================================================      

    addjars-maven-plugin
    ********************
    
https://code.google.com/p/addjars-maven-plugin/    
    
    add dependency to local jar files in maven projects
    ***************************************************
        
    The problem

Many new maven users often ask the same simple question:

I have some third party jars which are not available in maven repositories. How can I add those jars to the project's classpath?
The question is simple but the suggested solutions are usually imperfect or unreasonably complex.

Some people suggest using dependencies of scope system. This solution is simple and works but unfortunately has significant drawbacks (such as not working transitive dependencies etc).

Others say that system dependencies must never ever be used. The only right way to add third party jars is installing them into your own repository, and then referring to the corresponding artifacts in the dependencies section of pom.xml. Well, that probably is the right solution. Unfortunately it forces developers to put extra efforts into creating and maintaining the repository.

    The solution

The addjars-maven-plugin is supposed to address this problem. What it does is the following:

Automatically installs the jars into the local repository as separate artifacts.
Automatically adds the artifacts to the list of project's dependencies.
As you can see, it implies the "right way" mentioned above, but automagic is involved in this process.


In the exampe below, you have both "addjars" and "shade" side-by-side.

The non-repo dependencies are still referenced by system <scope> sp Eclipse is happy.

        <dependency>
            <groupId>net.sf</groupId>
            <artifactId>cloneutils</artifactId>
            <version>1.0.0.B1</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/lib/cloneutils-1.0.0.B1.jar</systemPath>             
        </dependency>
        
And this plugin make shade happy.        


            <plugin>
                <groupId>com.googlecode.addjars-maven-plugin</groupId>
                <artifactId>addjars-maven-plugin</artifactId>
                <version>1.0.5</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>add-jars</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>${basedir}/lib</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin> 
            
            
            
                
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>2.0</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <forceCreation>true</forceCreation>
                            <createDependencyReducedPom>false</createDependencyReducedPom>
                            <filters>
                                <filter>
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                    </excludes>
                                </filter>
                            </filters>                          
                            <artifactSet>
                                <excludes>
                                    <exclude>junit:junit:jar:</exclude>
                                    <exclude>org.slf4j:slf4j-api:jar:</exclude>
                                    <exclude>org.slf4j:slf4j-log4j12:jar:</exclude>
                                    <exclude>org.slf4j:log4j-over-slf4j:jar:</exclude>
                                    <exclude>ch.qos.logback:logback-core:jar:</exclude>
                                    <exclude>ch.qos.logback:logback-classic:jar:</exclude>
                                    <exclude>com.google.guava:guava:jar:</exclude>
                                </excludes>
                            </artifactSet>
                        </configuration>
                    </execution>
                </executions>               
            </plugin>
    
 
 
=================================================================================== 

    create source JARs
    ******************
    
            <!-- creates source jars at `mvn package` -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>${maven-source-plugin.version}</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>package</phase>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>    



===================================================================================


    How to package an Apache CXF application into a monolithic JAR with the Maven "shade" plugin
    ***************************************************************
    
I am writing a console-based Java application, intended to be run by cron in a batch-processing manner. The batch-processing application makes calls to a SOAP web service, using the Apache CXF framework for JAX-WS.

To make deployment easier, and to prevent CLASSPATH issues, I would like to bundle up the application (with all its dependencies) into a single monolithic JAR file... using the "shade" plugin for Maven.

My application works just fine when I run it from my Eclipse workspace. However, when I try executing the shaded JAR file I get a stacktrace such as the following:


org.apache.cxf.service.factory.ServiceConstructionException: Could not resolve a binding for null 
            at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createBindingInfo(AbstractWSDLBasedEndpointFactory.java:404) 
            at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpointInfo(AbstractWSDLBasedEndpointFactory.java:258) 
            at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:146) 
            at org.apache.cxf.frontend.ClientFactoryBean.create(ClientFactoryBean.java:52) 
            at org.apache.cxf.frontend.ClientProxyFactoryBean.create(ClientProxyFactoryBean.java:102) 
            at org.apache.cxf.jaxws.JaxWsProxyFactoryBean.create(JaxWsProxyFactoryBean.java:115) 
            at com.example.gui.domain.Session.getService(Session.java:145) 
            at com.example.gui.domain.service.soap.AbstractServiceImpl.<init>(AbstractServiceImpl.java:23) 
            at com.example.gui.domain.service.soap.GetUserConsoleOrgsImpl.<init>(GetUserConsoleOrgsImpl.java:14) 
            at com.example.gui.domain.service.ServiceFactory.getGetUserConsoleOrgsService(ServiceFactory.java:443) 
            at com.example.gui.domain.AccessManager.getOrgs(AccessManager.java:62) 
            at com.example.gui.windows.ConsoleApplet.login (ConsoleApplet.java:1253) 
            at com.example.gui.windows.ConsoleApplet.init(ConsoleApplet.java:1227) 
            at sun.plugin2.applet.Plugin2Manager$AppletExecutionRunnable.run(Unknown Source) 
            at java.lang.Thread.run(Unknown Source) 
Caused by: org.apache.cxf.BusException: No binding factory for namespace http://schemas.xmlsoap.org/soap/ registered. 
            at org.apache.cxf.binding.BindingFactoryManagerImpl.getBindingFactory(BindingFactoryManagerImpl.java:91) 
            at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createBindingInfo(AbstractWSDLBasedEndpointFactory.java:394) 
            ... 14 more 
java.lang.NullPointerException 
            at com.example.gui.domain.service.soap.GetUserConsoleOrgsImpl.getUserConsoleOrgs(GetUserConsoleOrgsImpl.java:29) 
            at com.example.gui.domain.AccessManager.getOrgs(AccessManager.java:64) 
            at com.example.gui.windows.ConsoleApplet.login (ConsoleApplet.java:1253) 
            at com.example.gui.windows.ConsoleApplet.init(ConsoleApplet.java:1227) 
            at sun.plugin2.applet.Plugin2Manager$AppletExecutionRunnable.run(Unknown Source) 
            at java.lang.Thread.run(Unknown Source) 
            
            
In fact, if you check out this discussion board message 
[http://cxf.547215.n5.nabble.com/No-binding-factory-for-namespace-http-schemas-xmlsoap-org-soap-registered-td563189.html], 
I'm having the exact same problem that this guy is having. As another person pointed out in that that thread, my issue is probably with the Maven "shade" plugin.

Apache CXF consists of numerous JAR file dependencies, and apparently more than one of those JAR's rely on contents within their META-INF directories. The Maven "shade" plugin is apparently collapsing all those META-INF directories into one, and overwriting necessary files rather than merging them together.

Someone in that discussion thread provided a link to this Maven POM file, showing that there are config options and transformers for making the "shade" plugin merge these CXF dependencies properly. I plugged these these settings into my own POM, like so:



<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-shade-plugin</artifactId>
    <version>1.4</version>
    <executions>
        <execution>
            <phase>package</phase>
            <goals>
                <goal>shade</goal>
            </goals>
            <configuration>
                <transformers>
                    <transformer
                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                        <mainClass>com.example.MainClass</mainClass>
                    </transformer>
                    <transformer
                        implementation="org.apache.maven.plugins.shade.resource.ApacheNoticeResourceTransformer">
                        <projectName>Apache CXF</projectName>
                    </transformer>
                    <transformer
                        implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                        <resource>META-INF/spring.handlers</resource>
                    </transformer>
                    <transformer
                        implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                        <resource>META-INF/services/com.sun.tools.xjc.Plugin</resource>
                    </transformer>
                    <transformer
                        implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                        <resource>META-INF/spring.schemas</resource>
                    </transformer>
                    <transformer
                        implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                        <resource>META-INF/cxf/cxf.extension</resource>
                    </transformer>
                    <transformer
                        implementation="org.apache.maven.plugins.shade.resource.XmlAppendingTransformer">
                        <resource>META-INF/extensions.xml</resource>
                    </transformer>
                    <transformer
                        implementation="org.apache.maven.plugins.shade.resource.XmlAppendingTransformer">
                        <resource>META-INF/cxf/extensions.xml</resource>
                    </transformer>
                    <transformer
                        implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                        <resource>META-INF/cxf/bus-extensions.txt</resource>
                    </transformer>
                    <transformer
                        implementation="org.apache.maven.plugins.shade.resource.XmlAppendingTransformer">
                        <resource>META-INF/cxf/bus-extensions.xml</resource>
                    </transformer>
                    <transformer
                        implementation="org.apache.maven.plugins.shade.resource.XmlAppendingTransformer">
                        <resource>META-INF/wsdl.plugin.xml</resource>
                    </transformer>
                    <transformer
                        implementation="org.apache.maven.plugins.shade.resource.XmlAppendingTransformer">
                        <resource>META-INF/tools.service.validator.xml</resource>
                    </transformer>
                    <transformer implementation="org.apache.cxf.maven.PluginTransformer">
                        <resource>META-INF/tools-plugin.xml</resource>
                    </transformer>
                    <transformer
                        implementation="org.apache.maven.plugins.shade.resource.XmlAppendingTransformer">
                        <resource>META-INF/cxf/java2wsbeans.xml</resource>
                    </transformer>
                    <transformer implementation="org.apache.cxf.maven.CXFAllTransformer" />
                </transformers>
            </configuration>
        </execution>
    </executions>
</plugin>

    
However, I can't find any real explanation for what these settings are doing... and I get the following error when running Maven with debug output enabled:


[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1:14.357s
[INFO] Finished at: Tue Jul 26 11:10:43 EDT 2011
[INFO] Final Memory: 18M/59M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-shade-plugin:1.4:shade (default) on project salestax-poster: Unable to parse configuration of mojo org.apache.maven.plugins:maven-shade-plugin:1.4:shade: ClassNotFoundException: Class name which was explicitly given in configuration using 'implementation' attribute: 'org.apache.cxf.maven.PluginTransformer' cannot be loaded -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-shade-plugin:1.4:shade (default) on project salestax-poster: Unable to parse configuration of mojo org.apache.maven.plugins:maven-shade-plugin:1.4:shade: ClassNotFoundException: Class name which was explicitly given in configuration using 'implementation' attribute: 'org.apache.cxf.maven.PluginTransformer' cannot be loaded
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:221)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
...


It seems to complain that it can't find the org.apache.cxf.maven.PluginTransformer class, which seems to exist in the cxf-buildtools package. However, when I add that package to the POM's dependencies, I get yet another error in the build process:

Jul 26, 2011 10:44:02 AM org.springframework.context.support.AbstractApplicationContext prepareRefresh
INFO: Refreshing org.apache.cxf.bus.spring.BusApplicationContext@3aa42c31: display name [org.apache.cxf.bus.spring.BusApplicationContext@3aa42c31]; startup date [Tue Jul 26 10:44:02 EDT 2011]; root of context hierarchy
Jul 26, 2011 10:44:02 AM org.apache.cxf.bus.spring.BusApplicationContext getConfigResources
INFO: No cxf.xml configuration file detected, relying on defaults.
Jul 26, 2011 10:44:02 AM org.springframework.context.support.AbstractApplicationContext obtainFreshBeanFactory
INFO: Bean factory for application context [org.apache.cxf.bus.spring.BusApplicationContext@3aa42c31]: org.springframework.beans.factory.support.DefaultListableBeanFactory@47fe1e26
Jul 26, 2011 10:44:02 AM org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons
INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@47fe1e26: defining beans [cxf,org.apache.cxf.bus.spring.BusApplicationListener,org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor,org.apache.cxf.bus.spring.Jsr250BeanPostProcessor,org.apache.cxf.bus.spring.BusExtensionPostProcessor,org.apache.cxf.resource.ResourceManager,org.apache.cxf.configuration.Configurer,org.apache.cxf.binding.BindingFactoryManager,org.apache.cxf.transport.DestinationFactoryManager,org.apache.cxf.transport.ConduitInitiatorManager,org.apache.cxf.wsdl.WSDLManager,org.apache.cxf.phase.PhaseManager,org.apache.cxf.workqueue.WorkQueueManager,org.apache.cxf.buslifecycle.BusLifeCycleManager,org.apache.cxf.endpoint.ServerRegistry,org.apache.cxf.endpoint.ServerLifeCycleManager,org.apache.cxf.endpoint.ClientLifeCycleManager,org.apache.cxf.transports.http.QueryHandlerRegistry,org.apache.cxf.endpoint.EndpointResolverRegistry,org.apache.cxf.headers.HeaderManager,org.apache.cxf.catalog.OASISCatalogManager,org.apache.cxf.endpoint.ServiceContractResolverRegistry]; root of factory hierarchy
[DEBUG] 
java.lang.AbstractMethodError: org.apache.xerces.dom.ElementNSImpl.setUserData(Ljava/lang/String;Ljava/lang/Object;Lorg/w3c/dom/UserDataHandler;)Ljava/lang/Object;
    at org.apache.cxf.tools.validator.internal.Stax2DOM.startElement(Stax2DOM.java:173)
    at org.apache.cxf.tools.validator.internal.Stax2DOM.getDocument(Stax2DOM.java:135)
    at org.apache.cxf.tools.validator.internal.Stax2DOM.getDocument(Stax2DOM.java:95)
    at org.apache.cxf.tools.validator.internal.Stax2DOM.getDocument(Stax2DOM.java:76)
    at org.apache.cxf.tools.validator.internal.WSDL11Validator.getWSDLDoc(WSDL11Validator.java:91)
    at org.apache.cxf.tools.validator.internal.WSDL11Validator.isValid(WSDL11Validator.java:111)
    at org.apache.cxf.tools.wsdlto.frontend.jaxws.wsdl11.JAXWSDefinitionBuilder.validate(JAXWSDefinitionBuilder.java:201)
    at org.apache.cxf.tools.wsdlto.frontend.jaxws.wsdl11.JAXWSDefinitionBuilder.validate(JAXWSDefinitionBuilder.java:61)
    at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:132)
    at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:238)
    at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:83)
    at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:103)
    at org.apache.cxf.maven_plugin.WSDL2JavaMojo.processWsdl(WSDL2JavaMojo.java:360)
    at org.apache.cxf.maven_plugin.WSDL2JavaMojo.execute(WSDL2JavaMojo.java:257)
    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
    at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:319)
    at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
    at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
    at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
    at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
    at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Jul 26, 2011 10:44:03 AM org.springframework.context.support.AbstractApplicationContext doClose
INFO: Closing org.apache.cxf.bus.spring.BusApplicationContext@3aa42c31: display name [org.apache.cxf.bus.spring.BusApplicationContext@3aa42c31]; startup date [Tue Jul 26 10:44:02 EDT 2011]; root of context hierarchy
Jul 26, 2011 10:44:03 AM org.springframework.beans.factory.support.DefaultSingletonBeanRegistry destroySingletons
INFO: Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@47fe1e26: defining beans [cxf,org.apache.cxf.bus.spring.BusApplicationListener,org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor,org.apache.cxf.bus.spring.Jsr250BeanPostProcessor,org.apache.cxf.bus.spring.BusExtensionPostProcessor,org.apache.cxf.resource.ResourceManager,org.apache.cxf.configuration.Configurer,org.apache.cxf.binding.BindingFactoryManager,org.apache.cxf.transport.DestinationFactoryManager,org.apache.cxf.transport.ConduitInitiatorManager,org.apache.cxf.wsdl.WSDLManager,org.apache.cxf.phase.PhaseManager,org.apache.cxf.workqueue.WorkQueueManager,org.apache.cxf.buslifecycle.BusLifeCycleManager,org.apache.cxf.endpoint.ServerRegistry,org.apache.cxf.endpoint.ServerLifeCycleManager,org.apache.cxf.endpoint.ClientLifeCycleManager,org.apache.cxf.transports.http.QueryHandlerRegistry,org.apache.cxf.endpoint.EndpointResolverRegistry,org.apache.cxf.headers.HeaderManager,org.apache.cxf.catalog.OASISCatalogManager,org.apache.cxf.endpoint.ServiceContractResolverRegistry]; root of factory hierarchy
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 8.152s
[INFO] Finished at: Tue Jul 26 10:44:03 EDT 2011
[INFO] Final Memory: 10M/59M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.cxf:cxf-codegen-plugin:2.2:wsdl2java (generate-sources) on project salestax-poster: org.apache.xerces.dom.ElementNSImpl.setUserData(Ljava/lang/String;Ljava/lang/Object;Lorg/w3c/dom/UserDataHandler;)Ljava/lang/Object; -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.cxf:cxf-codegen-plugin:2.2:wsdl2java (generate-sources) on project salestax-poster: org.apache.xerces.dom.ElementNSImpl.setUserData(Ljava/lang/String;Ljava/lang/Object;Lorg/w3c/dom/UserDataHandler;)Ljava/lang/Object;
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:217)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
    at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:319)
    at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
    at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
    at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
    at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    at java.lang.reflect.Method.invoke(Method.java:597)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
    at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: org.apache.maven.plugin.MojoExecutionException: org.apache.xerces.dom.ElementNSImpl.setUserData(Ljava/lang/String;Ljava/lang/Object;Lorg/w3c/dom/UserDataHandler;)Ljava/lang/Object;
    at org.apache.cxf.maven_plugin.WSDL2JavaMojo.processWsdl(WSDL2JavaMojo.java:363)
    at org.apache.cxf.maven_plugin.WSDL2JavaMojo.execute(WSDL2JavaMojo.java:257)
    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
    ... 19 more
Caused by: java.lang.AbstractMethodError: org.apache.xerces.dom.ElementNSImpl.setUserData(Ljava/lang/String;Ljava/lang/Object;Lorg/w3c/dom/UserDataHandler;)Ljava/lang/Object;
    at org.apache.cxf.tools.validator.internal.Stax2DOM.startElement(Stax2DOM.java:173)
    at org.apache.cxf.tools.validator.internal.Stax2DOM.getDocument(Stax2DOM.java:135)
    at org.apache.cxf.tools.validator.internal.Stax2DOM.getDocument(Stax2DOM.java:95)
    at org.apache.cxf.tools.validator.internal.Stax2DOM.getDocument(Stax2DOM.java:76)
    at org.apache.cxf.tools.validator.internal.WSDL11Validator.getWSDLDoc(WSDL11Validator.java:91)
    at org.apache.cxf.tools.validator.internal.WSDL11Validator.isValid(WSDL11Validator.java:111)
    at org.apache.cxf.tools.wsdlto.frontend.jaxws.wsdl11.JAXWSDefinitionBuilder.validate(JAXWSDefinitionBuilder.java:201)
    at org.apache.cxf.tools.wsdlto.frontend.jaxws.wsdl11.JAXWSDefinitionBuilder.validate(JAXWSDefinitionBuilder.java:61)
    at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:132)
    at org.apache.cxf.tools.wsdlto.WSDLToJavaContainer.execute(WSDLToJavaContainer.java:238)
    at org.apache.cxf.tools.common.toolspec.ToolRunner.runTool(ToolRunner.java:83)
    at org.apache.cxf.tools.wsdlto.WSDLToJava.run(WSDLToJava.java:103)
    at org.apache.cxf.maven_plugin.WSDL2JavaMojo.processWsdl(WSDL2JavaMojo.java:360)
    ... 22 more
    
    
Has anyone ever used Apache CXF in the context of a Maven shaded JAR, and can provide some guidance as to how you make this work properly?



A:

The solution is to add the dependency for cxf-buildtools to the plugin element.

<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-shade-plugin</artifactId>
        <version>1.4</version>
            <executions>
                <execution>
                    <phase>package</phase>
                    <goals>
                        <goal>shade</goal>
                    </goals>
                    <configuration>
                        <transformers>
                            <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                <mainClass>## you name class name ##</mainClass>
                            </transformer>
                            <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                <resource>META-INF/spring.handlers</resource>
                            </transformer>
                            <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                <resource>META-INF/spring.schemas</resource>
                            </transformer>
                            <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                <resource>META-INF/services/com.sun.tools.xjc.Plugin</resource>
                            </transformer>
                            <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                <resource>META-INF/cxf/cxf.extension</resource>
                            </transformer>
                            <transformer implementation="org.apache.maven.plugins.shade.resource.XmlAppendingTransformer">
                                <resource>META-INF/extensions.xml</resource>
                            </transformer>
                            <transformer implementation="org.apache.maven.plugins.shade.resource.XmlAppendingTransformer">
                                <resource>META-INF/cxf/extensions.xml</resource>
                            </transformer>
                            <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                <resource>META-INF/cxf/bus-extensions.txt</resource>
                            </transformer>
                            <transformer implementation="org.apache.maven.plugins.shade.resource.XmlAppendingTransformer">
                                <resource>META-INF/cxf/bus-extensions.xml</resource>
                            </transformer>
                            <transformer implementation="org.apache.maven.plugins.shade.resource.XmlAppendingTransformer">
                                <resource>META-INF/wsdl.plugin.xml</resource>
                            </transformer>
                            <transformer implementation="org.apache.maven.plugins.shade.resource.XmlAppendingTransformer">
                                <resource>META-INF/tools.service.validator.xml</resource>
                            </transformer>
                            <transformer implementation="org.apache.cxf.maven.PluginTransformer">
                                <resource>META-INF/tools-plugin.xml</resource>
                            </transformer>
                            <transformer implementation="org.apache.maven.plugins.shade.resource.XmlAppendingTransformer">
                                <resource>META-INF/cxf/java2wsbeans.xml</resource>
                            </transformer>
                            <transformer implementation="org.apache.cxf.maven.CXFAllTransformer" />
                        </transformers>
                        <shadedArtifactAttached>true</shadedArtifactAttached>
                        <shadedClassifierName>executable</shadedClassifierName>
                    </configuration>
                </execution>
            </executions>
            <dependencies>
                <dependency>
                    <groupId>org.apache.cxf</groupId>
                    <artifactId>cxf-buildtools</artifactId>
                    <version>2.2.12</version>
                    <type>jar</type>
                    <scope>compile</scope>
                </dependency>
            </dependencies>
        </plugin>
        
        
A:

I solved the problem, more or less.

    The Maven "shade" plugin comes with the concept of "transformers", which enable you to merge conflicting files together in the monolithic JAR rather than having one overwrite the other. There are different types of transformers... with the most common being:

    org.apache.maven.plugins.shade.resource.AppendingTransformer -- simply appends one text file onto the end of another
    org.apache.maven.plugins.shade.resource.XmlAppendingTransformer -- appends XML together while keeping the format sane
    
    In my above POM snippet, I had taken a list of transformers from the example provided in that discussion board thread. It included two transformers that were NOT part of the default "shade" plugin out-of-the-box:

    org.apache.cxf.maven.PluginTransformer
    org.apache.cxf.maven.CXFAllTransformer
    
    Apparently, these two are CXF-specific add-ons which do not come with the "shade" plugin, but must be provided separately by CXF JAR's.

    My "solution" is incomplete, because I have not been able to work out how to get those dependencies in place. They seem to be part of the cxf-buildtools Maven dependency package... but as the above question documents, I've encountered problems no matter how I try to insert that dependency into my POM.

    However, practically speaking my solution has been to simply remove those two transformers from the "shade" plugin configuration altogether. My shaded JAR application works perfectly fine without them. Perhaps those two specific transformers have a role in special edge cases, but for vanilla CXF service calls it appears that you can omit them.
    
    
A:
    The google link did the trick.  In order for the runtime binding to work, you need to add all of the transformers listed in the plugin snippet on the web page.

===================================================================================


Skipping Tests
**************

To skip running the tests for a particular project, set the skipTests property to true.

<project>
  [...]
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.15</version>
        <configuration>
          <skipTests>true</skipTests>
        </configuration>
      </plugin>
    </plugins>
  </build>
  [...]
</project>

You can also skip the tests via command line by executing the following command:

    mvn install -DskipTests

If you absolutely must, you can also use the maven.test.skip property to skip compiling the tests. maven.test.skip is honored by Surefire, Failsafe and the Compiler Plugin.

mvn install -Dmaven.test.skip=true

Skipping by default
-------------------

If you want to skip tests by default but want the ability to re-enable tests from the command line, you need to go via a properties section in the pom:

<project>
  [...]
  <properties>
    <skipTests>true</skipTests>
  </properties>
  [...]
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.15</version>
        <configuration>
          <skipTests>${skipTests}</skipTests>
        </configuration>
      </plugin>
    </plugins>
  </build>
  [...]
</project>

This will allow you to run with tests disabled by default and to run them with this command:

    mvn install -DskipTests=false

The same can be done with the "skip" parameter and other booleans on the plugin.


===================================================================================

    maven echo plugin
    *****************

http://khmarbaise.github.io/Maven-Echo-Plugin/  

http://mvnrepository.com/artifact/com.soebes.maven.plugins/maven-echo-plugin
    
  <profiles>  
    <profile>  
      <id>acceptance-test</id>  
      <build>  
         <plugins>  
            <plugin>
               <groupId>com.soebes.maven.plugins</groupId>
               <artifactId>maven-echo-plugin</artifactId>
               <version>0.1</version>
               <executions>
                 <execution>
                   <phase>test</phase>
                   <goals>
                     <goal>echo</goal>
                   </goals>
                 </execution>
               </executions>
               <configuration>
                 <echos>
                   <echo>No acceptance tests in project ${project.name}</echo>
                 </echos>
               </configuration>
            </plugin>
         </plugins>  
      </build>  
    </profile>  
  </profiles> 

===================================================================================


    Classifiers
    ***********
    
Deploy an artifact with classifier

Classifiers are the additional text given to describe an artifact.

  artifact-name-1.0-bin.jar
  artifact-name-1.0-dev.jar
  artifact-name-1.0-prod.jar
  
From the above artifact names, classifiers can be located between the version and extension name of the artifact.

bin is used to describe that the artifact is a binary.
dev is used to describe that the artifact is for development.
prod is used to describe that the artifact is for production.
To add classifier into your artifact for your deployment, set the text to the classifier parameter.

mvn deploy:deploy-file -Durl=file:///C:/m2-repo \
                       -DrepositoryId=some.id \
                       -Dfile=path-to-your-artifact-jar \
                       -DpomFile=path-to-your-pom.xml \
                       -Dclassifier=bin    
                       
=================================================================================== 

    WSDL in maven repository
    ************************

NOTE: if you specify a classifier "concrete" for instance, there is no indication in the Archiva repository that you should use it .. 
    
NOTE: also the WSDL should be self-contained as discussed here
http://maven.40175.n5.nabble.com/A-wsdl-file-as-an-artifact-td2840399.html

More details
http://www.liquid-reality.de/display/liquid/2009/09/03/Use+maven+repository+as+a+service+repository
    
Example POM to install a WSDL file
----------------------------------

<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  
  <groupId>wsdl.ex</groupId>
  <artifactId>HelloPersonServiceWSDL</artifactId>
  <version>1.0</version>
  <packaging>pom</packaging>
  
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <build-helper-maven-plugin.version>1.8</build-helper-maven-plugin.version>     
  </properties>
  

  <repositories>
  
        <!-- Archiva Repo info  -->
    <repository>
      <id>internal</id>
      <name>Archiva Managed Internal Repository</name>
      <url>http://10.10.98.199:8080/archiva/repository/internal/</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
    
  </repositories>  
  
  <build>
  
    <plugins>
    
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>${build-helper-maven-plugin.version}</version>
        <executions>
            <execution>
                <id>attach-WSDLs</id>
                <phase>package</phase>
                <goals>
                    <goal>attach-artifact</goal>
                </goals>
                <configuration>
                    <artifacts>
                        <artifact>
                            <file>HelloPersonService.wsdl</file>
                            <classifier>concrete</classifier>
                            <type>wsdl</type>
                        </artifact>
                    </artifacts>
                </configuration>
            </execution>
        </executions>
      </plugin>
      
    </plugins>
    
    <extensions>
        <!-- for deploying to repository using webdav -->
        <extension>
            <groupId>org.apache.maven.wagon</groupId>
            <artifactId>wagon-webdav</artifactId>
            <version>1.0-beta-2</version>
        </extension>
    </extensions>   
    
  </build>
  
  <distributionManagement>
    <repository>
        <id>archiva.internal</id>
        <name>Internal Release Repository</name>
        <url>dav:http://10.10.98.199:8080/archiva/repository/internal</url>
    </repository>
    <snapshotRepository>
        <id>archiva.snapshots</id>
        <name>Internal Snapshot Repository</name>
        <url>dav:http://10.10.98.199:8080/archiva/repository/snapshots</url>
    </snapshotRepository>
  </distributionManagement>   

</project>


Using it in a project
---------------------

        <plugin>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-codegen-plugin</artifactId>
            <version>${cxf.version}</version>
            <executions>
                <execution>
                    <id>test-service</id>
                    <phase>generate-sources</phase>
                    <configuration>
                        <sourceRoot>${project.basedir}/target/generated/src/main/java</sourceRoot>
                        <wsdlOptions>
                            <wsdlOption>
                               <wsdlArtifact>
                                 <groupId>wsdl.ex</groupId>
                                 <artifactId>HelloPersonServiceWSDL</artifactId>
                                 <version>1.0</version>
                                 <classifier>concrete</classifier>
                               </wsdlArtifact>
                            </wsdlOption>
                        </wsdlOptions>
                    </configuration>
                    <goals>
                        <goal>wsdl2java</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>



===================================================================================


SLF4J NoSuchMethodError on LocationAwareLogger
**********************************************
http://stackoverflow.com/questions/8252597/slf4j-nosuchmethoderror-on-locationawarelogger


SLF4J Dependencies and LocationAwareLogger.log Method Not Found Exception
*************************************************************************
http://www.captaindebug.com/2012/01/slf4j-dependencies-and.html#.UkCviRtwp8E


Exception in thread "main" java.lang.NoSuchMethodError: org.slf4j.spi.LocationAwareLogger.log(Lorg/slf4j/Marker;Ljava/lang/String;ILjava/lang/String;Ljava/lang/Throwable;)V


>mvn dependency:tree | find /n "slf4j"
[73][INFO] +- org.slf4j:slf4j-api:jar:1.7.5:compile
[74][INFO] +- org.slf4j:log4j-over-slf4j:jar:1.7.5:compile
[96][INFO] |  +- org.slf4j:jul-to-slf4j:jar:1.7.4:compile
[147][INFO] |  |  |  |  +- org.slf4j:jcl-over-slf4j:jar:1.5.5:compile
[224][INFO] +- org.slf4j:slf4j-api:jar:1.7.5:compile
[225][INFO] +- org.slf4j:log4j-over-slf4j:jar:1.7.5:compile
[247][INFO] |  +- org.slf4j:jul-to-slf4j:jar:1.7.4:compile
[298][INFO] |  |  |  |  +- org.slf4j:jcl-over-slf4j:jar:1.5.5:compile
[376][INFO] +- org.slf4j:slf4j-api:jar:1.7.5:compile
[377][INFO] +- org.slf4j:log4j-over-slf4j:jar:1.7.5:compile
[399][INFO] |  +- org.slf4j:jul-to-slf4j:jar:1.7.4:compile
[450][INFO] |  |  |  |  +- org.slf4j:jcl-over-slf4j:jar:1.5.5:compile


I’m using SLF4J version 1.7.5 and that’s the root cause of the problem: the SLF4J developers changed the signature of org.slf4j.spi.LocationAwareLogger.log(Lorg/slf4j/Marker;Ljava/lang/String;ILjava/lang/String;Ljava/lang/Throwable;) between versions 1.5 and 1.7 making my slf4j-api incompatible with the older jcl-over-slf4j JAR. 

The fix is to exclude jcl-over-slf4j version 1.5.8 from Maven dependency graph.

        <dependency>
          <groupId>com.go2uti.oneworld.common</groupId>
          <artifactId>UTi_Commons</artifactId>
          <version>1.0</version>
          <exclusions>
             <exclusion>
                 <groupId>org.slf4j</groupId>
                 <artifactId>jcl-over-slf4j</artifactId>
             </exclusion>
        </exclusions>         
        </dependency>


Another troubleshooting technique is to display where a particular class is being loaded from.
In this case, adding the following to dropwizard's service class main method:


    public static void main(String[] args) throws Throwable
    {
        ClassLoader loader = BatchInvoiceService.class.getClassLoader();
        System.out.println(loader.getResource("org/slf4j/spi/LocationAwareLogger.class"));
        
        new BatchInvoiceService().run(args);
    }   


displays:

jar:file:/C:/ws/java/TRUNK/GI-BatchInvoiceService/EIT_1WORLD_GIFF_BatchInvoiceService_POJO/eit-1world-giff-batchinvoice-service/target/eit-1world-giff-batchinvoice-service-1.0-SNAPSHOT.jar!/org/slf4j/spi/LocationAwareLogger.class

Not too helpful in this situation, but could be in others..


===================================================================================

    maven-failsafe-plugin
    *********************
    
    integration tests
    -----------------

The Failsafe Plugin is designed to run integration tests while the Surefire Plugins is designed to run unit tests. The name (failsafe) was chosen both because it is a synonym of surefire and because it implies that when it fails, it does so in a safe way.

The Maven lifecycle has four phases for running integration tests:

* pre-integration-test      for setting up the integration test environment.
* integration-test          for running the integration tests.
* post-integration-test     for tearing down the integration test environment.
* verify                    for checking the results of the integration tests.


If you use the Surefire Plugin for running tests, then when you have a test failure, the build will stop at the integration-test phase and your integration test environment will not have been torn down correctly.

The Failsafe Plugin is used during the integration-test and verify phases of the build lifecycle to execute the integration tests of an application. The Failsafe Plugin will not fail the build during the integration-test phase thus enabling the post-integration-test phase to execute.


NOTE: when running integration tests, you should invoke maven with the (shorter to type too)

    mvn verify

rather than trying to invoke the integration-test phase directly, as otherwise the post-integration-test phase will not be executed.



if you run mvn install all life-cycle phases (including the install phase itself) run which are before the install phase. This means running the following phases:

validate
initialize
generate-sources
process-sources
generate-resources
process-resources
compile
process-classes
generate-test-sources
process-test-sources
generate-test-resources
process-test-resources
test-compile
process-test-classes
test
prepare-package
package
pre-integration-test
integration-test
post-integration-test
verify
install

which means in other words the test as well as integration-test life-cycle phases are included. So without any supplemental information it's not possible to change the behaviour as you wish it.

It could be achieved by using a profile in Maven:

 <project>
  [...]
  <profiles>
    <profile>
      <id>no-unit-tests</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <skipTests>true</skipTests>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
  [...]
</project>

So your first requirement:

1. If I run mvn install, I want all tests to compile, but I do not want to execute any.

can be achieved by using the following:

    mvn -Pno-unit-test test
    
2. If I run mvn test, I want all tests to compile, but execute only unit tests.

    mvn test
    
because the integration tests phase is not run when 'test' is executed

Apart from the above you should follow the naming conventions for unit and integration tests where unit tests should be named like the following:

<includes>
 <include>**/*Test*.java</include>
 <include>**/*Test.java</include>
 <include>**/*TestCase.java</include>
</includes>

and integration tests should be named like the following:

includes>
 <include>**/IT*.java</include>
 <include>**/*IT.java</include>
 <include>**/*ITCase.java</include>
</includes>


I hope you have configuration the maven-failsafe-plugin like the following which is needed to bound the maven-failsafe-plugin to the correct life-cycle-phases:

<project>
  [...]
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>2.15</version>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  [...]
</project>


You can also exclude "IT*.java" from surefire config, and include in failsafe config:

<plugin>
   <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-surefire-plugin</artifactId>
   <configuration>
       <excludes>
           <exclude>**/*IT.java</exclude>
       </excludes>
   </configuration>
</plugin>
<plugin>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-failsafe-plugin</artifactId>
   <configuration>
       <includes>
           <include>**/*IT.java</include>
       </includes>
   </configuration>
   <executions>
       <execution>
           <goals>
               <goal>integration-test</goal>
               <goal>verify</goal>
           </goals>
       </execution>
   </executions>
</plugin>



===================================================================================

    deploying 3rd party JARs to remote repository
    *********************************************

I used Archiva upload


==============================================================================

  mvn deploy:deploy
  *****************

mvn deploy:deploy-file \
    -Durl=$REPO_URL \
    -DrepositoryId=$REPO_ID \
    -DgroupId=org.myorg \
    -DartifactId=myproj \
    -Dversion=1.2.3  \
    -Dpackaging=zip \
    -Dfile=myproj.zip  


  bulk upload artifacts to Nexus
  ******************************

http://roboojack.blogspot.com/2014/12/bulk-upload-your-local-maven-artifacts.html

#!/bin/bash
echo "Starting to upload..."
for pomFile in `find $1 | grep '.pom$'`; do
    pomLocation=$PWD${pomFile/./}
    jarLocation=${pomFile/pom/jar}
    jarLocation=${jarLocation/./}
    jarLocation=$PWD${jarLocation/pom/jar}
    mvn deploy:deploy-file  -DpomFile=$pomLocation  -Dfile=$jarLocation -DrepositoryId=YOUR_ID  -Durl=YOUR_URL
done  

----------------------------------------------------------------


==============================================================================

  maven versioning scheme
  ***********************

http://stackoverflow.com/questions/15415666/maven-versions-release-candidates-and-snapshot

Most development shops follow either 2- or 3-digit version number convention

  <major version>.<minor version>.<incremental version>[-<qualifier>]
  e.g.  
    1.1.0-SNAPSHOT
    1.1.0-RC1
    1.1.0

  <major version>.<incremental version>-<qualifier>
  e.g. 
    1.1-SNAPSHOT
    1.1-RC1
    1.1

  I recommend that we start with the 2-digit maven version scheme.
  I suggest that we move to the 3-digit only when we prove it ourselves that we need it, otherwise, managing the 3rd digit becomes a source of confusion as to its meaning…

    <major version> = release number
    <incremental version> = incrementing for hot fixes. 

  Example:

  While the development is working on the code, we have a SNAPSHOT version working towards 1.0 release:

    1.0-SNAPSHOT

  When we have a release candidate, the version number has “RC#” prefix:

    1.0-RC1 

  Release:

    1.0 

  Hot Fix or Production Patch

    This is where we use the 2nd digit to increment the version number:

    1.1

  Next Release

    In the meantime, the DEV team is working towards 2.0 release

    2.0-SNAPSHOT



==============================================================================

  versions maven plugin
  *********************

  versions-maven-plugin
  *********************

http://mojo.codehaus.org/versions-maven-plugin/usage.html


To set project version (incl. multimodule projects)
---------------------------------------------------

  mvn versions:set -DnewVersion=1.0.1-SNAPSHOT

to save your changes
  
  mvn versions:commit

if you made a mistake

  mvn versions:revert  


See what dependencies in your project need updating

  > mvn versions:display-dependency-updates

  > mvn versions:display-plugin-updates


===================================================================================

  define versions of multiple modules in a central place
  ******************************************************

  flatten-maven-plugin
  ********************

  Various projects have a multi-module setup but typically want dependencies between modules of the same project to use the recent version. With flatten-maven-plugin you can define the versions in a single place.

Top-level POM
-------------

In your top-level POM set a fixed version ("dev"), add flatten-maven-plugin and define variables for the versions of your modules:

  <version>dev</version>
  <packaging>pom</packaging>
  <properties>
    <whizbang.module1.version>3.1.7-SP2<whizbang.module1.version>
    <whizbang.module2.version>1.4.1-GA<whizbang.module2.version>
    ...
  </properties>

In leaf POM

  <artifactId>whizbang-module1</artifactId>
  <version>${whizbang.module1.version}</version>  


===================================================================================

  maven built-in password encryption support
  ******************************************

15.2.11. Encrypting Passwords in Maven Settings
-----------------------------------------------
http://www.sonatype.com/books/mvnref-book/reference/appendix-settings-sect-details.html




===================================================================================


  Maven Java EE Configuration

http://stackoverflow.com/questions/23183931/maven-java-ee-configuration

  Maven Java EE cannot change version of project facet Dynamic Web to 3.0
  ***********************************************************************


1. Go to project Build Path and change the Java Library version to 1.7
2. Go to Eclipse Preferences -> Java -> Compilre -> Change compliance level to 1.7

3. Right click on project -> Properties -> Project Facets
4. Uncheck Dynamic Web Module and click Apply (also uncheck JavaServer Faces if you had that)
5. Change the Java facet version to 1.7 and click Apply
6. Add the Dyanmic Web Module v3.0, apply.


Eclipse's facets configuration is buggy. Make sure you keep hitting Apply between checking and unchecking of facets.

Links:
Cannot change version of project facet Dynamic Web Module to 3.0? 
http://stackoverflow.com/questions/18122336/cannot-change-version-of-project-facet-dynamic-web-module-to-3-0


===================================================================================

  Maven webapp WebContent setup
  *****************************

Eclipse Dynamic web project likes to put resources (META-INF, WEB-INF, jsps,..) into WebContent directory.  

Maven puts these things into source/main/webapp directory

When you 

a. create a web project using Maven webapp archetype.. and then
b. convert it to a Maven project

.. or vice versa ..

You may end up with both 

src/main/webapp and
WebContent folders 

having some duplicate content.

Here is how you fix this..

http://stackoverflow.com/questions/18226414/eclipse-not-deploying-my-web-app-properly

Maven dynamic web project uses src/main/webapp by default

So.. copy/paste/merge all content inside WebContent into src/main/webapp folder.

- go to project properties | Deployment Assembly
- the root (/) is probably pointing to WebContent folder
- add src/main/webapp; root now points at it
- remove WebContent

Apply | Close


remove WebContent folder

===================================================================================

  Pass parameters to JUnit test from maven-surefire-plugin
  ********************************************************

==>  NOTE: systemProperties is deprecated
        use systemPropertyVariables instead

http://syntx.io/how-to-pass-parameters-to-the-junit-tests-from-the-maven-surefire-plugin/
Q: I needed to pass environment-specific filename into my junit tests.

A:

in project POM

  <plugin>
       <groupId>org.apache.maven.plugins</groupId>
       <artifactId>maven-surefire-plugin</artifactId>
       <configuration>
          <systemProperties>
            <property>
               <name>fileName</name>
               <value>${fileName}</value>
            </property>
          </systemProperties>
       </configuration>
  </plugin>

In unit test

  @BeforeClass
  public static void setUpBeforeClass() throws Exception {
       String fileName = System.getProperty("fileName");
       logger.info("Reading config file : " + fileName);
  }

Running maven test:

  $ mvn clean test -DfileName="qa-test-config.properties"


Maven and passing properties to Junit tests
********************************************

http://blog.stchedroff.com/2012/10/29/10/

Create property in the pom.xml

<properties>
    <message.test>not set</message.test>
</properties>

next define a system property in maven-surefire-plugin which uses this property

<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-surefire-plugin</artifactId>
    <version>2.12.4</version>
    <configuration>
        <systemPropertyVariables>
            <message>${message.test}</message>
        </systemPropertyVariables>
    </configuration>
</plugin>

JUnit test code

public class MavenProfileTest 
{
    Logger logger = LoggerFactory.getLogger(MavenProfileTest.class);
     
    @Test
    public void simpleTest()
    {
        String message = System.getProperty("message");
        logger.info("The message was - {" + message + "}");
        Assert.assertTrue(true);
    }
}

There are two ways to provide values for the property:

1. difine in profiles:

<profile>
    <id>default</id>
    <activation>
        <activeByDefault>true</activeByDefault>
    </activation>
    <properties>
        <message.test>default profile</message.test>
    </properties>
</profile>
<profile>
    <id>special</id>
    <properties>
        <message.test>special profile</message.test>
    </properties>
</profile>

So, when you run

  $ mvn test

the default profile is executed..
but when you run

  $ mvn test -P special

the 'special' profile is executed.

2. the other way is to pass from command line:

  $ mvn test -P special -Dmessage=fred

===================================================================================


  debugging tests during Maven build with remote debugger
  *******************************************************

http://maven.apache.org/surefire/maven-surefire-plugin/examples/debugging.html  

You may want to debug your test(s) when you are running them via maven using your IDE's remote debugger.

Assuming you are running tests using surefire plugin..
By default, Maven runs your tests in a separate ("forked") process.
You can use the 'maven.surefire.debug' property to debug your forked tests remotely:

> mvn -Dmaven.surefire.debug test

The tests will automatically pause and await a remote debugger on port 5005. You can then attach to the running tests.

If you need to configure a different port, you may pass a more detailed value:

> mvn -Dmaven.surefire.debug="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 -Xnoagent -Djava.compiler=NONE" test

In the above example, port 8000 will be used.

===================================================================================

    PluginManagement does not work for report-plugins
    *************************************************

https://issues.apache.org/jira/browse/MNG-3385

     Last week, I defined my reporting plugin versions in my build's <pluginManagement> section, just to find out it has no effect on the site generation. This to me is definitively a high-priority issue since I cannot dictate the report versions to use without actually specifying the reports themselves.


    Additional configuration has to be entered twice
    ************************************************

https://issues.apache.org/jira/browse/MSITE-516

Additional configuration (for example, configuration for maven-javadoc-plugin) is effectively should be entered twice - once in either build/pluginManagement/plugins or build/plugins to be used by the usual build process, and once in the build/plugins/maven-site-plugin/configuration/reportPlugins to be used by the site generation.
Please, consider possibility for reportPlugins to inherit the same amount of configuration from the pluginManagement as is being inherited by usual build plugins.         


===================================================================================


  Checkstyle
  FindBugs
  JaCoCo 


  Resources:
  **********

Maven Reports in Jenkins
http://mukis.de/pages/maven-reports-in-jenkins/


JaCoCo in Maven Multi-Module Projects
http://www.lordofthejars.com/2012/07/jacoco-in-maven-multi-module-projects.html


JaCoCo Jenkins Plugin 
http://www.lordofthejars.com/2012/08/jacoco-jenkins-plugin.html


Code Coverage with Surefire and JaCoCo (+Sonar)  VERY GOOD article
http://blog.ccbill.com/2014/07/code-coverage-with-surefire-and-jacoco.html



FindBugs Maven Plugin Tutorial
http://www.petrikainulainen.net/programming/maven/findbugs-maven-plugin-tutorial/


Creating Code Coverage Reports for Unit and Integration Tests With the JaCoCo Maven Plugin (!!!)
http://www.petrikainulainen.net/programming/maven/creating-code-coverage-reports-for-unit-and-integration-tests-with-the-jacoco-maven-plugin/


How do I generate a checkstyle code style report for a site?
http://www.avajava.com/tutorials/lessons/how-do-i-generate-a-checkstyle-code-style-report-for-a-site.html  

===================================================================================

  Enable resource filtering
  *************************

Warning: Do not filter files with binary content like images! This will most likely result in corrupt output. If you have both text files and binary files as resources, you need to declare two mutually exclusive resource sets. The first resource set defines the files to be filtered and the other resource set defines the files to copy unaltered as illustrated below:  

<project>
  ...
  <build>
    ...
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
        <excludes>
          <exclude>**/*.xml</exclude>
        </excludes>
      </resource>
      ...
    </resources>
    ...
  </build>
  ...
</project>


===================================================================================

  project version and build timestamp into text file
  **************************************************

https://rterp.wordpress.com/2012/03/16/stamping-version-number-and-build-time-in-properties-file-with-maven/  
http://stackoverflow.com/questions/13228472/how-to-acces-maven-build-timestamp-for-resource-filtering


    <properties>
        <!-- build properties -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <timestamp>${maven.build.timestamp}</timestamp>
        <maven.build.timestamp.format>yyyy-MM-dd HH:mm</maven.build.timestamp.format>

    </properties>


    <build>
        
        <resources>
            <!-- enable filtering for resource -->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>version.tmpl</include>
                </includes>
            </resource>
            <!-- disable filtering for all other resources -->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
                <excludes>
                    <exclude>version.tmpl</exclude>
                </excludes>
            </resource>
        </resources>

src/main/resources/version.tmpl
------------------------------

version=${project.version}
build.timestamp=${timestamp}



NOTE: if you don't use <includes> then filtering will apply to ALL resources

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources> 

If you have BINARY files - that is NOT a good idea (see filtering resources above)



===================================================================================

  maven release plugin
  ********************

http://maven.apache.org/maven-release/maven-release-plugin/index.html

Example: 
  how to implement the process of Releasing a Maven project with or without Jenkins. Similar to Deployment, this process is using the nexus-staging-maven-plugin to interact with Nexus and focuses on a git project.
http://www.baeldung.com/maven-release-nexus

https://dzone.com/articles/why-i-never-use-maven-release

Now, if you break down the release plugin into sensible steps, you’ll really save yourself a whole lot of trouble.

Assume the POM’s version’s currently on 1.0-SNAPSHOT.

1. Announce the release process 

Very important. As I said, you don’t release on a whim. Make sure everyone on your team knows a release is pending and has all their stuff pushed to the development branch that needs to be included.

2. Branch the development branch into a release branch. 

  Following git-flow rules, I make a release branch 1.0.

3. Update the POM version of the development branch. 

  Update the version to the next release version. 
  For example 

    mvn versions:set -DnewVersion=2.0-SNAPSHOT
  
  Commit and push. Now you can put resources developing towards the next release version.

4. Update the POM version of the release branch. 

  Update the version to the standard CR version. 
  For example 
  
    mvn versions:set -DnewVersion=1.0.CR-SNAPSHOT
  
  Commit and push.

5. Run tests on the release branch. 

  Run all the tests. If one or more fail, fix them first.

6. Create a candidate release from the release branch.

  - Use the Maven version plugin to update your POM’s versions. 
    For example 
      
      > mvn versions:set -DnewVersion=1.0.CR1. 

    Commit and push.
  
  - Make a tag on git.
  
  - Use the Maven version plugin to update your POM’s versions back to the standard CR version. 
    For example 
     > mvn versions:set -DnewVersion=1.0.CR-SNAPSHOT.
    Commit and push.

  - Checkout the new tag.
  
  - Do a deployment build (mvn clean deploy). 

    Since you’ve just run your tests and fixed any failing ones, this shouldn’t fail.
  
  - Put deployment on QA environment.


7. Iterate until QA gives a green light on the candidate release.

  - Fix bugs. Fix bugs reported on the CR releases on the release branch. Merge into development branch on regular intervals (or even better, continuous). Run tests continuously, making bug reports on failures and fixing them as you go.
  - Create a candidate release.
  
  - Use the Maven version plugin to update your POM’s versions. 
    For example mvn versions:set -DnewVersion=1.0.CRx. Commit and push.
  
  - Make a tag on git.
  
  - Use the Maven version plugin to update your POM’s versions back to the standard CR version. 
    For example mvn versions:set -DnewVersion=1.0.CR-SNAPSHOT.
    Commit and push.
  
  - Checkout the new tag.
  - Do a deployment build (mvn clean deploy). Since you’ve run your tests continuously, this shouldn’t fail.
  - Put deployment on QA environment.  

8. Once QA has signed off on the release, create a final release.

  - Check whether there are no new commits since the last release tag (if there are, slap developers as they have done stuff that wasn’t needed or asked for).
  - Use the Maven version plugin to update your POM’s versions. For example mvn versions:set -DnewVersion=1.0. Commit and push.
  - Tag the release branch.
  - Merge into the master branch.
  - Checkout the master branch.
  - Do a deployment build (mvn clean deploy).
  - Start production release and deployment process (in most companies, not a small feat). This can involve building the site and doing other stuff, some not even Maven related.


===================================================================================

  sharing test resources across multiple modules and projects
  ***********************************************************

how do i share common test code and resources across multiple maven modules?

you can use maven-jar-plugin to create a test jar in one module.. 

<plugin>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-jar-plugin</artifactId>
  <version>2.2</version>
  <executions>
    <execution>
      <goals>
        <goal>test-jar</goal>
      </goals>
    </execution>
  </executions>
</plugin>

and then use it another module (that is dependent on module above)..

<dependency>
  <groupId>com.foo</groupId>
  <artifactId>data</artifactId>
  <version>1.0</version>
  <type>test-jar</type>
  <scope>test</scope>
</dependency>

..or.. you could put all of your common test resources into a separate module and then share it as test-jar.



----------------------------------------------------------

Another use case: sharing test resources between different projects
http://stackoverflow.com/questions/2247199/share-test-resources-between-maven-projects

A:
use jar:test-jar and declare the resulting JAR as dependency.

<project>
  <build>
    <plugins>
     <plugin>
       <groupId>org.apache.maven.plugins</groupId>
       <artifactId>maven-jar-plugin</artifactId>
       <version>2.2</version>
       <executions>
         <execution>
           <goals>
             <goal>test-jar</goal>
           </goals>
         </execution>
       </executions>
       <configuration> 
         <excludes>
           <exclude>**/*.class</exclude>
         </excludes>
       </configuration> 
     </plugin>
    </plugins>
  </build>
</project>
And to use it in a different project:
<project>
  ...
  <dependencies>
    <dependency>
      <groupId>com.myco.app</groupId>
      <artifactId>foo</artifactId>
      <version>1.0-SNAPSHOT</version>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>
  </dependencies>
  ...
</project>

===================================================================================

  sql-maven-plugin
  ****************


http://javasplitter.blogspot.com/2011/08/sharing-configuration-files-from-maven.html


===================================================================================

  maven with self-signed certificate
  **********************************


MAVEN_OPTS=-Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true  

  
https://support.sonatype.com/hc/en-us/articles/213465088-Maven-is-unable-to-connect-to-Nexus-after-configuring-Nexus-to-use-SSL-

For option 3, invoke Maven with "-Dmaven.wagon.http.ssl.insecure=true". If the host name configured in the certificate doesn't match the host name Nexus is running on you may also need to add "-Dmaven.wagon.http.ssl.allowall=true".

Note: These additional parameters are initialized in static initializers, so they have to be passed in via the MAVEN_OPTS environment variable.  Passing them on the command line to Maven will not work.


http://stackoverflow.com/questions/21252800/how-to-tell-maven-to-disregard-ssl-errors-and-trusting-all-certs


-Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true


===================================================================================

    maven-project-info-reports
    **************************

  Plugin '''org.apache.maven.plugins:maven-project-info-reports-plugin:2.7''' not found
  Inspects a Maven model for resolution problems.


what does this say?

  > mvn project-info-reports:help

===================================================================================

  skip module deployment
  **********************

http://stackoverflow.com/questions/7446599/how-to-deploy-only-the-sub-modules-using-maven-deploy  

To disable a given module deployment
put this in the module's <properties>:

<properties>
  <maven.deploy.skip>true</maven.deploy.skip>
</properties>


  skip / disable parent module deployment
  ***************************************

I tried the above and put <maven.deploy.skip>true</maven.deploy.skip>
in the parent's module properties.

Running `mvn clean deploy` locally would work as expected - ProjectA would not be deployed, but Sub B and C did get deployed to Nexus.

ProjectA
 - Submodule B
 - Submodlue C
 
But, running the same on Jenkins - everything was skipped.


===================================================================================

  [WARNING] Unable to locate Source XRef to link to - DISABLED


Add maven-jxr-plugin to the reporting section:

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>${maven-jxr-plugin.version}</version>
            </plugin>
        </plugins>
    </build>

    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
            </plugin>
        </plugins>
    </reporting>  
===================================================================================

  purging local cache
  *******************

http://maven.apache.org/plugins/maven-dependency-plugin/examples/purging-local-repository.html


Basic usage

The default behaviour of the plugin is to first resolve the entire dependency tree, then delete the contents from the local repository, and then re-resolve the dependencies from the remote repository.

  $ mvn dependency:purge-local-repository

  note: The first is an attempt to delete the local repository files but it always goes and fills up the local repository after things have been removed.


Dependency includes/excludes

  $ mvn dependency:purge-local-repository -Dinclude=org.slf4j -DresolutionFuzziness=groupId -Dverbose=true

Transitive dependency resolution

By default, the plugin operates on all transitive dependencies. This means that the plugin may download certain missing dependencies to gather the full dependency tree information before beginning the purge process.

To avoid this pre-download step, the plugin can be configured to operate only on the direct dependencies of the project using the "actTranstively" parameter.

  $ mvn dependency:purge-local-repository -DactTransitively=false -DreResolve=false  

  note: use the third if you want the local repo emptied, and the first if you just want to throw out the local repo and get the dependencies again

  
===================================================================================

  Read file from resources folder
  *******************************

File file = new File(getClass().getClassLoader().getResource("file/test.xml").getFile());

src/test/resources
              xml/
                test.xml

Deserialize JSON from File:

  @BeforeClass
  public static void beforeClass() {
    objectMapper = Jackson.newObjectMapper();
    objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
    objectMapper.configure(JsonParser.Feature.AUTO_CLOSE_SOURCE, true);
  }

  public List<Enrollment> createTestEnrollmentsWithAi() throws IOException {
    final String testFileName = "json/test-enrollments-with-AI.json";
    return Arrays.asList(
        objectMapper.readValue(
            new File(getClass().getClassLoader().getResource(testFileName).getFile()),
            Enrollment[].class)
    );
  }

  // or

  public List<Enrollment> createTestEnrollmentsWithAi() throws IOException {
    final String testFileName = "json/test-enrollments-with-AI.json";
    return Arrays.asList(
        objectMapper.readValue(getClass().getClassLoader().getResourceAsStream(testFileName), Enrollment[].class));
  }  



===================================================================================

  Maven Exclusions
  ****************

How to exclude older versions of maven dependency and use new version of it?

A:
  - exclude all from the dependency that has conflicts
  - include new top-level dependency for the version you want


===================================================================================