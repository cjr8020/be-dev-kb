================================================================================

	*************
		Vault
	*************

================================================================================

	docker - vault - consul 
	***********************

	https://testdriven.io/blog/managing-secrets-with-vault-and-consul/

$ mkdir vault-consul-docker && cd vault-consul-docker

Then add the following folders:

└── vault
    ├── config
    ├── data
    ├── logs
    └── policies

vault/Dockerfile
----------------------------------------------------------------


# base image
FROM alpine:3.7

# set vault version
ENV VAULT_VERSION 0.10.3

# create a new directory
RUN mkdir /vault

# download dependencies
RUN apk --no-cache add \
      bash \
      ca-certificates \
      wget

# download and set up vault
RUN wget --quiet --output-document=/tmp/vault.zip https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip && \
    unzip /tmp/vault.zip -d /vault && \
    rm -f /tmp/vault.zip && \
    chmod +x /vault

# update PATH
ENV PATH="PATH=$PATH:$PWD/vault"

# add the config file
COPY ./config/vault-config.json /vault/config/vault-config.json

# expose port 8200
EXPOSE 8200

# run vault
ENTRYPOINT ["vault"]



docker-compose.yml
----------------------------------------------------------------

version: '3.6'

services:

  vault:
    build:
      context: ./vault
      dockerfile: Dockerfile
    ports:
      - 8200:8200
    volumes:
      - ./vault/config:/vault/config
      - ./vault/policies:/vault/policies
      - ./vault/data:/vault/data
      - ./vault/logs:/vault/logs
    environment:
      - VAULT_ADDR=http://127.0.0.1:8200
    command: server -config=/vault/config/vault-config.json
    cap_add:
      - IPC_LOCK


Here, we configured Vault to use the Filesystem backend, defined the listener for Vault, disabled TLS, and enabled the Vault UI. Review the docs for more info on configuring Vault.

Now we can build the image and spin up the container:

	$ docker-compose up -d --build

Pull up the Docker logs to make sure there were no errors in the build:


	$ docker-compose logs


vault/config/vault-config.json
-------------------------------

{
  "backend": {
    "file": {
      "path": "vault/data"
    }
  },
  "listener": {
    "tcp":{
      "address": "0.0.0.0:8200",
      "tls_disable": 1
    }
  },
  "ui": true
}


Initialize and Unseal
=====================

Start a bash session within the running container:

	$ docker-compose exec vault bash

Within the shell, initialize Vault:

	$ vault operator init


	Unseal Key 1: kz0gLEahu4ZCBfI9aqRl3XPGSw0zFW9pDT09rmy+Ldbd
	Unseal Key 2: VqfB5/5+TEHIjQflSPQWAXVJki+qmGGKFlnGlEzCWW3Z
	Unseal Key 3: EGZxnViIvUdbyvGd34qVoJ2zBrdmNRbNbXI+ETP7GpRQ
	Unseal Key 4: x7eggIrlG7F3Vw8uom7ZYevLxGP/P9g6Gl99vW0H67wI
	Unseal Key 5: +9Smk7C6BgofOZawJSoZtFx98EeeR4FmVU9pKFYF/aMJ

	Initial Root Token: 295c879b-5d1e-1ffc-7e74-745b443970c8

		Vault initialized with 5 key shares and a key threshold of 3. Please securely
		distribute the key shares printed above. When the Vault is re-sealed,
		restarted, or stopped, you must supply at least 3 of these keys to unseal it
		before it can start servicing requests.

		Vault does not store the generated master key. Without at least 3 key to
		reconstruct the master key, Vault will remain permanently sealed!

		It is possible to generate new unseal keys, provided you have a quorum of
		existing unseal keys shares. See "vault operator rekey" for more information.

================================================================================

Installing
--------------------------------------------------------------------------------
https://learn.hashicorp.com/vault/operations/ops-deployment-guide


Download
VAULT_VERSION="0.10.3"
curl --silent --remote-name https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip
curl --silent --remote-name https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_SHA256SUMS
curl --silent --remote-name https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_SHA256SUMS.sig


Install

Unzip the downloaded package and move the vault binary to /usr/local/bin/. Check vault is available on the system path.

	unzip vault_${VAULT_VERSION}_linux_amd64.zip
	sudo chown root:root vault
	sudo mv vault /usr/local/bin/
	vault --version

The vault command features opt-in autocompletion for flags, subcommands, and arguments (where supported). Enable autocompletion.

	$ vault -autocomplete-install
	$ complete -C /usr/local/bin/vault vault

Give Vault the ability to use the mlock syscall without running the process as root. The mlock syscall prevents memory from being swapped to disk.

	sudo setcap cap_ipc_lock=+ep /usr/local/bin/vault

Create a unique, non-privileged system user to run Vault.

	sudo useradd --system --home /etc/vault.d --shell /bin/false vault


Step 3: Configure systemd
--------------------------------------------------------------------------------
Systemd uses documented sane defaults so only non-default values must be set in the configuration file.

Create a Vault service file at /etc/systemd/system/vault.service.

	sudo touch /etc/systemd/system/vault.service

Add the below configuration to the Vault service file:

[Unit]
Description="HashiCorp Vault - A tool for managing secrets"
Documentation=https://www.vaultproject.io/docs/
Requires=network-online.target
After=network-online.target
ConditionFileNotEmpty=/etc/vault.d/vault.hcl

[Service]
User=vault
Group=vault
ProtectSystem=full
ProtectHome=read-only
PrivateTmp=yes
PrivateDevices=yes
SecureBits=keep-caps
AmbientCapabilities=CAP_IPC_LOCK
Capabilities=CAP_IPC_LOCK+ep
CapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK
NoNewPrivileges=yes
ExecStart=/usr/local/bin/vault server -config=/etc/vault.d/vault.hcl
ExecReload=/bin/kill --signal HUP $MAINPID
KillMode=process
KillSignal=SIGINT
Restart=on-failure
RestartSec=5
TimeoutStopSec=30
StartLimitIntervalSec=60
StartLimitBurst=3

[Install]
WantedBy=multi-user.target


================================================================================
================================================================================
================================================================================
================================================================================

	*************
		Consul
	*************

Consul Architecture
--------------------------------------------------------------------------------

Consul server agents 
	responsible for maintaining the cluster state
	respond to RPC queries (read ops)
	process all write ops

Consul cluster 
	typically 3-5 servers plus client agents
	may be deployed in a single physical datacenter or span multiple DCs

	Single datacenter
		recommended for apps deployed in the same datacenter

Consule agent
	core process of Consul
		- maintains membership info
		- registers services
		- runs checks
		- responds to queries 
	agent must run on every node that is part of Consul cluster
	agent may run in one of two modes:
		1. client, or
		2. server


Consul server agents
	require a superset of config required by client agents
	server agent takes on the additional responsibility of being part of the consensus quorum.


Consul client agents
	client nodes make up the majority of the cluster, are very lightweight
	interface with server nodes for most operations, maintain little state of their own
	require a subset of config required by Consul server agents.
	all Consul clients can use the `consul.hcl` confi file created when
	configuring Consul servers.



Installing
--------------------------------------------------------------------------------
https://www.consul.io/docs/guides/deployment-guide.html

Precompiled Consul binaries are available for download at https://releases.hashicorp.com/consul/ and Consul Enterprise binaries are available for download by following the instructions made available to HashiCorp Consul customers.


CONSUL_VERSION="1.2.0"
curl --silent --remote-name https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_linux_amd64.zip
curl --silent --remote-name https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_SHA256SUMS
curl --silent --remote-name https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_SHA256SUMS.sig


Unzip the downloaded package and move the consul binary to /usr/local/bin/. Check consul is available on the system path.

	unzip consul_${CONSUL_VERSION}_linux_amd64.zip
	sudo chown root:root consul
	sudo mv consul /usr/local/bin/
	consul --version

The consul command features opt-in autocompletion for flags, subcommands, and arguments (where supported). Enable autocompletion.

	consul -autocomplete-install
	complete -C /usr/local/bin/consul consul

Create a unique, non-privileged system user to run Consul and create its data directory.

	sudo useradd --system --home /etc/consul.d --shell /bin/false consul
	sudo mkdir --parents /opt/consul
	sudo chown --recursive consul:consul /opt/consul

Configure systemd
--------------------------------------------------------------------------------A
Systemd uses documented sane defaults so only non-default values must be set in the configuration file.

Create a Consul service file at /etc/systemd/system/consul.service.

	sudo touch /etc/systemd/system/consul.service

Add this configuration to the Consul service file:

[Unit]
Description="HashiCorp Consul - A service mesh solution"
Documentation=https://www.consul.io/
Requires=network-online.target
After=network-online.target
ConditionFileNotEmpty=/etc/consul.d/consul.hcl

[Service]
User=consul
Group=consul
ExecStart=/usr/local/bin/consul agent -config-dir=/etc/consul.d/
ExecReload=/usr/local/bin/consul reload
KillMode=process
Restart=on-failure
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target


Configure consul (server)
--------------------------------------------------------------------------------

Consul uses documented sane defaults so only non-default values must be set in the configuration file. 
https://www.consul.io/docs/agent/options.html

Configuration can be read from multiple files and is loaded in lexical order. See the full description for more information about configuration loading and merge semantics.

Consul server agents typically require a superset of configuration required by Consul client agents. 
We will specify common configuration used by all Consul agents in consul.hcl and server specific configuration in server.hcl.


/etc/consul.d/consul.hcl
------------------------
common configuration used by all Consul agents

	sudo mkdir --parents /etc/consul.d
	sudo touch /etc/consul.d/consul.hcl
	sudo chown --recursive consul:consul /etc/consul.d
	sudo chmod 640 /etc/consul.d/consul.hcl

add as content to `consul.hcl`:

datacenter = "dc1"
data_dir = "/opt/consul"
encrypt = "Luj2FZWwlt8475wD1WtwUQ=="


**  Replace the encrypt parameter value with the output from running consul keygen on any host with the consul binary installed.

	$ consul keygen



Cluster auto-join
------------------

	retry_join - Address of another agent to join upon starting up.

The retry_join parameter allows you to configure all Consul agents to automatically form a cluster using a common Consul server accessed via DNS address, IP address or using Cloud Auto-join. This removes the need to manually join the Consul cluster nodes together.

Add the retry_join parameter to the consul.hcl configuration file:

retry_join = ["172.16.0.11"]


/etc/consul.d/server.hcl
---------------------------

	$ sudo mkdir --parents /etc/consul.d
	$ sudo touch /etc/consul.d/server.hcl
	$ sudo chown --recursive consul:consul /etc/consul.d
	$ sudo chmod 640 /etc/consul.d/server.hcl

Add this configuration to the server.hcl configuration file:
** Replace the bootstrap_expect value with the number of Consul servers you will use; 
three or five is recommended.

server = true
bootstrap_expect = 3

	server 
		- This flag is used to control if an agent is in server or client mode
	
	bootstrap-expect 
		- This flag provides the number of expected servers in the datacenter. 
		Either this value should not be provided or the value must agree with 
		other servers in the cluster.

Consul UI
-----------
** You should consider running the Consul UI on select Consul hosts rather than all hosts.
Optionally, add the UI configuration to the server.hcl configuration file to enable the Consul UI:

ui = true


Configure consul (client)
--------------------------------------------------------------------------------




Start Consul
--------------------------------------------------------------------------------

sudo systemctl enable consul
sudo systemctl start consul
sudo systemctl status consul


================================================================================

	Consul test environment
	***********************

# cat /etc/consul.d/consul.hcl 
datacenter = "dc1"
data_dir = "/opt/consul"
encrypt = "bta/qY9al8VtUnwkXt41tQ=="


# cat /etc/consul.d/server.hcl
server = true
bootstrap_expect = 1
ui = true


================================================================================

