================================================================================
=====================          Vault           =================================
================================================================================

	References
	**********
https://github.com/jandd/spring-boot-vault-demo


	Commands
	********

Vault Browser CLI
-----------------	

read -field=id auth/token/lookup-self	


initialize vault
----------------

	$ vault operator init
	$ vault operator init -key-shares=1 -key-threshold=1

unseal vault
-------------

	$ vault operator unseal <unseal-key>

list policies
-------------

	$ vault read sys/policy

or via API

	$ curl \
	  --header "X-Vault-Token: ..." \
	  https://vault.hashicorp.rocks/v1/sys/policy


create policies
----------------

	$ vault policy write policy-name policy-file.hcl

or 

	$ curl \
	  --request POST \
	  --header "X-Vault-Token: ..." \
	  --data '{"policy":"path \"...\" {...} "}' \
	  https://vault.hashicorp.rocks/v1/sys/policy/policy-name

update policies
---------------

	$ vault write sys/policy/my-existing-policy policy=@updated-policy.json

or

	$ curl \
	  --request POST \
	  --header "X-Vault-Token: ..." \
	  --data '{"policy":"path \"...\" {...} "}' \
	  https://vault.hashicorp.rocks/v1/sys/policy/my-existing-policy


associate policy to a token
---------------------------

A Vault administrator or someone from the security team would create the user in Vault with a list of associated policies:

	$ vault write auth/userpass/users/sethvargo \
	    password="s3cr3t!" \
	    policies="dev-readonly,logs"

This creates an authentication mapping to the policy such that, when the user authenticates successfully to Vault, they will be given a token which has the list of policies attached.

The user wishing to authenticate would run

	$ vault login -method="userpass" username="sethvargo"
	Password (will be hidden): ...

If the provided information is correct, Vault will generate a token, assign the list of configured policies to the token, and return that token to the authenticated user.


================================================================================

	Vault Initialization
	********************

After you start vault (or vault container) you need to initialize it

	$ vault operator init

by default, vault will be initialized with 5 keyshares and a key threshold of 3.
this is configurable for dev purposes:

	$ vault operator init -key-shares=1 -key-threshold=1 

================================================================================

	Vault Secrets
	*************

There are two types of secrets in Vault - static and dynamic.

Static
======

Static secrets (think encrypted Redis or Memcached) have refresh intervals but they do not expire unless explicitly revoked. They are defined ahead of time with the Key/Value backend (formerly the "generic" backend) and then shared.

Vault can be managed through the CLI, HTTP API, or UI...

Dynamic
=======

Dynamic secrets are generated on demand. They have enforced leases and generally expire after a short period of time. Since they do not exist until they are accessed, there's less exposure - so dynamic secrets are much more secure. Vault ships with a number of dynamic backends - i.e., AWS, Databases, Google Cloud, Consul, and RabbitMQ.

================================================================================

	Vault Policies
	**************

built-in policies cannot be removed. 

default policy

	provides a common set of permissions and is included on all tokens by default

root policy

	The root policy is a builtin Vault policy that can not be modified or removed. Any user associated with this policy becomes a root user. A root user can do anything within Vault. As such, it is highly recommended that you revoke any root tokens before running Vault in production.

	When a Vault server is first initialized, there always exists one root user. This user is used to do the initial configuration and setup of Vault. After configured, the initial root token should be revoked and more strictly controlled users and authentication should be used.

To revoke a root token, run:

	$ vault token revoke "<token>"


Policies are authored in HCL but it is  JSON compatible.

Write a policy
---------------

  $ vault policy write my-policy my-policy.hcl
  Success!

creating a policy from terminal

	$ vault policy write my-policy -<<EOF
	# Normal servers have version 1 of KV mounted by default, so will need these
	# paths:
	path "secret/*" {
	  capabilities = ["create"]
	}
	path "secret/foo" {
	  capabilities = ["read"]
	}

	# Dev servers have version 2 of KV mounted by default, so will need these
	# paths:
	path "secret/data/*" {
	  capabilities = ["create"]
	}
	path "secret/data/foo" {
	  capabilities = ["read"]
	}
	EOF

List policies
-------------

	$ vault policy list

View contents of a policy
-------------------------

	$ vault policy read my-policy

Test a policy
--------------

To use a policy, create a token and assign it to that policy:

	$ vault  token create -policy=my-policy
	token      <some-token-value>
	$ vault login <some-token-value>

Verify that can you write to `secret/`

	$ vault kv put secret/bar robot=beepboop

Verify that you cannot write (only read) from `secret/foo`

	$ vault kv put seret/foo robot=beepboop
	* 403

	
--------------------------------------------------------------------------------

	Vault Browser UI
	****************

Display your own token
----------------------

javascript:alert(JSON.parse(localStorage.getItem(localStorage.key(0))).token)

or 

launch  Vault Browser CLI:

> vault read -field=id auth/token/lookup-self
5UHsdE0VwGmdelEDWyfMNyq0

> vault read -token=5UHsdE0VwGmdelEDWyfMNyq0 consul/creds/my-group
Key   Value                               
token db09550a-419b-ad7b-3f20-6b1eb1c4e5e0


================================================================================
=====================          Consul          =================================
================================================================================


Consul Commands
--------------------------------------------------------------------------------

Start consul agent:

	$ consul agent -dev [-node <nodename>]
	$ consul agent -server -bind 0.0.0.0 -client 0.0.0.0 -bootstrap-expect 1 -config-file=/consul/config/config.json

Show members

	$ consul members

using HTTP API

	$ curl localhost:8500/v1/catalog/nodes

	[
	    {
	        "Address": "172.21.0.2",
	        "CreateIndex": 472,
	        "Datacenter": "localhost",
	        "ID": "6dd406bf-03d3-d12e-c14b-eedd01ac88b6",
	        "Meta": {
	            "consul-network-segment": ""
	        },
	        "ModifyIndex": 472,
	        "Node": "b6f742be6509",
	        "TaggedAddresses": {
	            "lan": "172.21.0.2",
	            "wan": "172.21.0.2"
	        }
	    }
	]

using DNS interface querying the Consul agent's DNS server on port 8600 (default).

	$ dig @127.0.0.1 -p 8600 machine.node.consul



Consul Architecture
--------------------------------------------------------------------------------

Consul server agents 
	responsible for maintaining the cluster state
	respond to RPC queries (read ops)
	process all write ops

Consul cluster 
	typically 3-5 servers plus client agents
	may be deployed in a single physical datacenter or span multiple DCs

	Single datacenter
		recommended for apps deployed in the same datacenter

Consule agent
	core process of Consul
		- maintains membership info
		- registers services
		- runs checks
		- responds to queries 
	agent must run on every node that is part of Consul cluster
	agent may run in one of two modes:
		1. client, or
		2. server


Consul server agents
	require a superset of config required by client agents
	server agent takes on the additional responsibility of being part of the consensus quorum.


Consul client agents
	client nodes make up the majority of the cluster, are very lightweight
	interface with server nodes for most operations, maintain little state of their own
	require a subset of config required by Consul server agents.
	all Consul clients can use the `consul.hcl` confi file created when
	configuring Consul servers.




Consul ACLs
--------------------------------------------------------------------------------

Consul uses Access Control Lists (ACLs) to secure the UI, API, CLI, service 
communications, and agent communications.

When securing your cluster, you should configure the ACLs first.

At the core, ACLs operate by grouping rules into policies, then associating
one or more policies with a token.

ACL System
==========
has two major components:

ACL Policies
	allow for grouping of a set of rules into a logical unit that can be reused and
	linked with many tokens

ACL Tokens
	requests to Consule are authorized by using bearer token.
	each ACL token has 
	- public Accessor ID which is used to name a token, and 
	- Secret ID which is used as the bearer token used to make requests to Consul

ACL Policies
------------

	ACL Policy is a named set of rules composed of the following elements:
	 - ID: auto-generated public identifier
	 - Name: unique meaningful name for the policy
	 - Rules: set of rules granting or denying permissions
	 - Datacenters: a list of datacenters the policy is valid within.

ACL Tokens
----------

	Accessor ID
	Secret ID
	Description
	Policy Set
	Locality
	


Installing
--------------------------------------------------------------------------------
https://www.consul.io/docs/guides/deployment-guide.html

Precompiled Consul binaries are available for download at https://releases.hashicorp.com/consul/ and Consul Enterprise binaries are available for download by following the instructions made available to HashiCorp Consul customers.


CONSUL_VERSION="1.2.0"
curl --silent --remote-name https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_linux_amd64.zip
curl --silent --remote-name https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_SHA256SUMS
curl --silent --remote-name https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_SHA256SUMS.sig


Unzip the downloaded package and move the consul binary to /usr/local/bin/. Check consul is available on the system path.

	unzip consul_${CONSUL_VERSION}_linux_amd64.zip
	sudo chown root:root consul
	sudo mv consul /usr/local/bin/
	consul --version

The consul command features opt-in autocompletion for flags, subcommands, and arguments (where supported). Enable autocompletion.

	consul -autocomplete-install
	complete -C /usr/local/bin/consul consul

Create a unique, non-privileged system user to run Consul and create its data directory.

	sudo useradd --system --home /etc/consul.d --shell /bin/false consul
	sudo mkdir --parents /opt/consul
	sudo chown --recursive consul:consul /opt/consul

Configure systemd
--------------------------------------------------------------------------------A
Systemd uses documented sane defaults so only non-default values must be set in the configuration file.

Create a Consul service file at /etc/systemd/system/consul.service.

	sudo touch /etc/systemd/system/consul.service

Add this configuration to the Consul service file:

[Unit]
Description="HashiCorp Consul - A service mesh solution"
Documentation=https://www.consul.io/
Requires=network-online.target
After=network-online.target
ConditionFileNotEmpty=/etc/consul.d/consul.hcl

[Service]
User=consul
Group=consul
ExecStart=/usr/local/bin/consul agent -config-dir=/etc/consul.d/
ExecReload=/usr/local/bin/consul reload
KillMode=process
Restart=on-failure
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target


Configure consul (server)
--------------------------------------------------------------------------------

Consul uses documented sane defaults so only non-default values must be set in the configuration file. 
https://www.consul.io/docs/agent/options.html

Configuration can be read from multiple files and is loaded in lexical order. See the full description for more information about configuration loading and merge semantics.

Consul server agents typically require a superset of configuration required by Consul client agents. 
We will specify common configuration used by all Consul agents in consul.hcl and server specific configuration in server.hcl.


/etc/consul.d/consul.hcl
------------------------
common configuration used by all Consul agents

	sudo mkdir --parents /etc/consul.d
	sudo touch /etc/consul.d/consul.hcl
	sudo chown --recursive consul:consul /etc/consul.d
	sudo chmod 640 /etc/consul.d/consul.hcl

add as content to `consul.hcl`:

datacenter = "dc1"
data_dir = "/opt/consul"
encrypt = "Luj2FZWwlt8475wD1WtwUQ=="


**  Replace the encrypt parameter value with the output from running consul keygen on any host with the consul binary installed.

	$ consul keygen



Cluster auto-join
------------------

	retry_join - Address of another agent to join upon starting up.

The retry_join parameter allows you to configure all Consul agents to automatically form a cluster using a common Consul server accessed via DNS address, IP address or using Cloud Auto-join. This removes the need to manually join the Consul cluster nodes together.

Add the retry_join parameter to the consul.hcl configuration file:

retry_join = ["172.16.0.11"]


/etc/consul.d/server.hcl
---------------------------

	$ sudo mkdir --parents /etc/consul.d
	$ sudo touch /etc/consul.d/server.hcl
	$ sudo chown --recursive consul:consul /etc/consul.d
	$ sudo chmod 640 /etc/consul.d/server.hcl

Add this configuration to the server.hcl configuration file:
** Replace the bootstrap_expect value with the number of Consul servers you will use; 
three or five is recommended.

server = true
bootstrap_expect = 3

	server 
		- This flag is used to control if an agent is in server or client mode
	
	bootstrap-expect 
		- This flag provides the number of expected servers in the datacenter. 
		Either this value should not be provided or the value must agree with 
		other servers in the cluster.

Consul UI
-----------
** You should consider running the Consul UI on select Consul hosts rather than all hosts.
Optionally, add the UI configuration to the server.hcl configuration file to enable the Consul UI:

ui = true


Configure consul (client)
--------------------------------------------------------------------------------




Start Consul
--------------------------------------------------------------------------------

sudo systemctl enable consul
sudo systemctl start consul
sudo systemctl status consul


================================================================================

	Consul test environment
	***********************

# cat /etc/consul.d/consul.hcl 
datacenter = "dc1"
data_dir = "/opt/consul"
encrypt = "bta/qY9al8VtUnwkXt41tQ=="


# cat /etc/consul.d/server.hcl
server = true
bootstrap_expect = 1
ui = true


================================================================================







================================================================================
===================== DOCKER VAULT CONSUL DEMO =================================
================================================================================

Start container
----------------

	$ docker-compose up -d --build [<service-name>]

Initialize vault
-----------------

	$ docker-compose --no-ansi exec -e VAULT_CLI_NO_COLOR=1 \
		-e VAULT_CACERT=/vault/config/ssl/vault.crt.pem \
		vault \
		vault operator init -key-shares=1 -key-threshold=1 > vault_data.txt

Unseal Vault
-------------

	$ docker-compose exec \
		-e VAULT_CACERT=/vault/config/ssl/vault.crt.pem \
		vault \
		vault operator unseal <unseal-key>

Check the root token to see Vault is working
---------------------

	$ docker-compose exec \
		-e VAULT_CACERT=/vault/config/ssl/vault.crt.pem \
		-e VAULT_TOKEN=<root token>
		vault \
		vault token lookup



	docker - vault - consul 
	***********************

	https://testdriven.io/blog/managing-secrets-with-vault-and-consul/
	https://github.com/testdrivenio/vault-consul-docker

$ mkdir vault-consul-docker && cd vault-consul-docker

Then add the following folders:

└── vault
    ├── config
    ├── data
    ├── logs
    └── policies

vault/Dockerfile
----------------------------------------------------------------


# base image
FROM alpine:3.7

# set vault version
ENV VAULT_VERSION 0.10.3

# create a new directory
RUN mkdir /vault

# download dependencies
RUN apk --no-cache add \
      bash \
      ca-certificates \
      wget

# download and set up vault
RUN wget --quiet --output-document=/tmp/vault.zip https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip && \
    unzip /tmp/vault.zip -d /vault && \
    rm -f /tmp/vault.zip && \
    chmod +x /vault

# update PATH
ENV PATH="PATH=$PATH:$PWD/vault"

# add the config file
COPY ./config/vault-config.json /vault/config/vault-config.json

# expose port 8200
EXPOSE 8200

# run vault
ENTRYPOINT ["vault"]



docker-compose.yml
----------------------------------------------------------------

version: '3.6'

services:

  vault:
    build:
      context: ./vault
      dockerfile: Dockerfile
    ports:
      - 8200:8200
    volumes:
      - ./vault/config:/vault/config
      - ./vault/policies:/vault/policies
      - ./vault/data:/vault/data
      - ./vault/logs:/vault/logs
    environment:
      - VAULT_ADDR=http://127.0.0.1:8200
    command: server -config=/vault/config/vault-config.json
    cap_add:
      - IPC_LOCK


Here, we configured Vault to use the Filesystem backend, defined the listener for Vault, disabled TLS, and enabled the Vault UI. Review the docs for more info on configuring Vault.

Now we can build the image and spin up the container:

	$ docker-compose up -d --build

Pull up the Docker logs to make sure there were no errors in the build:


	$ docker-compose logs


vault/config/vault-config.json
-------------------------------

{
  "backend": {
    "file": {
      "path": "vault/data"
    }
  },
  "listener": {
    "tcp":{
      "address": "0.0.0.0:8200",
      "tls_disable": 1
    }
  },
  "ui": true
}


Initialize and Unseal
=====================

Start a bash session within the running container:

	$ docker-compose exec vault bash

Within the shell, initialize Vault:

	$ vault operator init


	Unseal Key 1: kz0gLEahu4ZCBfI9aqRl3XPGSw0zFW9pDT09rmy+Ldbd
	Unseal Key 2: VqfB5/5+TEHIjQflSPQWAXVJki+qmGGKFlnGlEzCWW3Z
	Unseal Key 3: EGZxnViIvUdbyvGd34qVoJ2zBrdmNRbNbXI+ETP7GpRQ
	Unseal Key 4: x7eggIrlG7F3Vw8uom7ZYevLxGP/P9g6Gl99vW0H67wI
	Unseal Key 5: +9Smk7C6BgofOZawJSoZtFx98EeeR4FmVU9pKFYF/aMJ

	Initial Root Token: 295c879b-5d1e-1ffc-7e74-745b443970c8

		Vault initialized with 5 key shares and a key threshold of 3. Please securely
		distribute the key shares printed above. When the Vault is re-sealed,
		restarted, or stopped, you must supply at least 3 of these keys to unseal it
		before it can start servicing requests.

		Vault does not store the generated master key. Without at least 3 key to
		reconstruct the master key, Vault will remain permanently sealed!

		It is possible to generate new unseal keys, provided you have a quorum of
		existing unseal keys shares. See "vault operator rekey" for more information.


Now you can unseal Vault using three of the keys:
-------------------------------------------------

$ vault operator unseal
Unseal Key (will be hidden):

until:

	Key             Value
	---             -----
	Seal Type       shamir
	Sealed          false


Now, authenticate using root token:
------------------------------------

bash-4.4# vault login
Token (will be hidden):
Success! You are now authenticated. The token information displayed below
is already stored in the token helper. You do NOT need to run "vault login"
again. Future Vault requests will automatically use this token.

Key                  Value
---                  -----
token                295c879b-5d1e-1ffc-7e74-745b443970c8
token_accessor       18372a9a-8ba7-006d-37d0-ab92365e7295
token_duration       ∞
token_renewable      false
token_policies       ["root"]
identity_policies    []
policies             ["root"]


Audit Device
------------------------

Enable audit device

$ vault audit enable file file_path=/vault/logs/audit.log

Success! Enabled the file audit device at: file/
You should now be able to view the logs locally in "vault/logs". To test, run the following command to view all enabled Audit Devices:

$ vault audit list

Path     Type    Description
----     ----    -----------
file/    file    n/a



Vault CLI
==========


Create a new secret with a key of "bar" and value of "precious" within the secret/foo path:

$ vault kv put secret/foo bar=precious

Success! Data written to: secret/foo
Read:

$ vault kv get secret/foo

=== Data ===
Key    Value
---    -----
bar    precious


To work with different versions of a specific key, we'll need to upgrade to v2 of the Key/Value backend:
-------------------------------------------------

	$ vault kv enable-versioning secret/

	Success! Tuned the secrets engine at: secret/

Add version 2 by updating the value to copper:

	$ vault kv put secret/foo bar=copper

	Key              Value
	---              -----
	created_time     2018-07-24T19:21:05.3966846Z
	deletion_time    n/a
	destroyed        false
	version          2


Read version 1:

	$ vault kv get -version=1 secret/foo

	====== Metadata ======
	Key              Value
	---              -----
	created_time     2018-07-24T19:17:17.5578234Z
	deletion_time    n/a
	destroyed        false
	version          1

	=== Data ===
	Key    Value
	---    -----
	bar    precious


Read version 2:

	$ vault kv get -version=2 secret/foo

	====== Metadata ======
	Key              Value
	---              -----
	created_time     2018-07-26T21:56:39.7152485Z
	deletion_time    n/a
	destroyed        false
	version          2

	=== Data ===
	Key    Value
	---    -----
	bar    copper


Read via REST API


	curl \
	    -H "X-Vault-Token: $VAULT_TOKEN" \
	    -X GET \
	    http://127.0.0.1:8200/v1/secret/foo


Delete the latest version (e.g., version 2):

	$ vault kv delete secret/foo

	Success! Data deleted (if it existed) at: secret/foo

Delete version 1:

	$ vault kv delete -versions=1 secret/foo

	Success! Data deleted (if it existed) at: secret/foo

You can undelete as well:

	$ vault kv undelete -versions=1 secret/foo

Success! Data written to: secret/undelete/foo


Delete is akin to a soft delete. 
If you want to remove the underlying metadata, you'll have to use the destroy command:

	$ vault kv destroy -versions=1 secret/foo

Success! Data written to: secret/destroy/foo



HTTP API
========


You can also interact with Vault via the HTTP API. We'll making requests against v2 of the API. Open a new terminal tab, and then set the root token as an environment variable:

	$ export VAULT_TOKEN=your_token_goes_here

	$ curl \
	    -H "X-Vault-Token: $VAULT_TOKEN" \
	    -H "Content-Type: application/json" \
	    -X POST \
	    -d '{ "data": { "foo": "world" } }' \
	    http://127.0.0.1:8200/v1/secret/data/hello

read:

	$ curl \
	    -H "X-Vault-Token: $VAULT_TOKEN" \
	    -X GET \
	    http://127.0.0.1:8200/v1/secret/data/hello

read via CLI:

	bash-4.4# vault kv get secret/data/hello
	==== Data ====
	Key     Value
	---     -----
	data    map[foo:world]



Policies 
============

create new policy in 

vault/policies/app-policy.json
------------------------------

{
  "path": {
    "secret/data/app/*": {
      "policy": "read"
    }
  }
}

Create a new policy back in the bash session:

	$ vault policy write app /vault/policies/app-policy.json

	Success! Uploaded policy: app


Then, create a new token:

	$ vault token create -policy=app

	ash-4.4# vault token create -policy=app

Key                  Value
---                  -----
token                5e564bff-b3b2-5ba5-30d9-c40e0fa43d0b
token_accessor       362ad2ad-511a-43c4-172b-ff3846c59f74
token_duration       768h
token_renewable      true
token_policies       ["app" "default"]
identity_policies    []
policies             ["app" "default"]




	Add Consul Backend
	******************

./consul

	├── Dockerfile
	├── config
	│   └── consul-config.json
	└── data



update docker-compose.yml
---------------------------

updating the docker-compose.yml file:

version: '3.6'

services:

  vault:
    build:
      context: ./vault
      dockerfile: Dockerfile
    ports:
      - 8200:8200
    volumes:
      - ./vault/config:/vault/config
      - ./vault/policies:/vault/policies
      - ./vault/data:/vault/data
      - ./vault/logs:/vault/logs
    environment:
      - VAULT_ADDR=http://127.0.0.1:8200
    command: server -config=/vault/config/vault-config.json
    cap_add:
      - IPC_LOCK
    depends_on:
      - consul

  consul:
    build:
      context: ./consul
      dockerfile: Dockerfile
    ports:
      - 8500:8500
    command: agent -server -bind 0.0.0.0 -client 0.0.0.0 -bootstrap-expect 1 -config-file=/consul/config/config.json
    volumes:
      - ./consul/config/consul-config.json:/consul/config/config.json
      - ./consul/data:/consul/data



 ./consul/Dockerfile
 -------------------------


 # base image
FROM alpine:3.7

# set consul version
ENV CONSUL_VERSION 1.2.1

# create a new directory
RUN mkdir /consul

# download dependencies
RUN apk --no-cache add \
      bash \
      ca-certificates \
      wget

# download and set up consul
RUN wget --quiet --output-document=/tmp/consul.zip https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_linux_amd64.zip && \
    unzip /tmp/consul.zip -d /consul && \
    rm -f /tmp/consul.zip && \
    chmod +x /consul/consul

# update PATH
ENV PATH="PATH=$PATH:$PWD/consul"

# add the config file
COPY ./config/consul-config.json /consul/config/config.json

# expose ports
EXPOSE 8300 8400 8500 8600

# run consul
ENTRYPOINT ["consul"]





./consul/config/consul-config.json
----------------------------------


{
  "datacenter": "localhost",
  "data_dir": "/consul/data",
  "log_level": "DEBUG",
  "server": true,
  "ui": true,
  "ports": {
    "dns": 53
  }
}



update vault config
-------------------



Exit out of the bash session. Bring the container down, and then update the Vault config file:

{
  "backend": {
    "consul": {
      "address": "consul:8500",
      "path": "vault/"
    }
  },
  "listener": {
    "tcp":{
      "address": "0.0.0.0:8200",
      "tls_disable": 1
    }
  },
  "ui": true
}


the name of the service - consul - as part of the address. The path key defines the path in Consul's key/value store where the Vault data will be stored.

Clear out all files and folders within the "vault/data" directory to remove the Filesystem backend. Build the new images and spin up the containers:

	$ docker-compose down
	$ docker-compose up -d --build


test out the new Consul backend
--------------------------------

CLI

Create a new bash session in the Vault container

	$ docker-compose exec vault bash

Init

	$ vault operator init


Unseal Key 1: 1eOR4bYWtc+htN7KFwse+bhcAZtEE7ciPladCXmb2AKR
Unseal Key 2: 4Ya4iFOV3sh0zkJzcqNegAbh4qz1coRGomHiIXA/vulj
Unseal Key 3: 9/aqyB/nKkzADMp3kOoqgiYtzNo5mBImZleUQfCq0TJG
Unseal Key 4: a18Z39rIBrscyevAhb7HXo5WYLfQ8YkF1aNEWKs6c9sY
Unseal Key 5: Fql6W2mVtZRVgnAyEV4E9uoHSpC84eiKBpkeSPtZBj+a

Initial Root Token: 9f96f399-4400-0930-3a83-917b8acbf618	

Unseal 

	$ vault operator unseal

Authenticate 

	$ vault login

Add a new static secret

	$ vault kv put secret/foo bar=precious

Read it back 

	$ vault kv get secret/foo



Ensure all is well by navigating in your browser to 

	http://localhost:8500/ui




================================================================================
================================================================================
================================================================================


Installing
--------------------------------------------------------------------------------
https://learn.hashicorp.com/vault/operations/ops-deployment-guide


Download
VAULT_VERSION="0.10.3"
curl --silent --remote-name https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip
curl --silent --remote-name https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_SHA256SUMS
curl --silent --remote-name https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_SHA256SUMS.sig


Install

Unzip the downloaded package and move the vault binary to /usr/local/bin/. Check vault is available on the system path.

	unzip vault_${VAULT_VERSION}_linux_amd64.zip
	sudo chown root:root vault
	sudo mv vault /usr/local/bin/
	vault --version

The vault command features opt-in autocompletion for flags, subcommands, and arguments (where supported). Enable autocompletion.

	$ vault -autocomplete-install
	$ complete -C /usr/local/bin/vault vault

Give Vault the ability to use the mlock syscall without running the process as root. The mlock syscall prevents memory from being swapped to disk.

	sudo setcap cap_ipc_lock=+ep /usr/local/bin/vault

Create a unique, non-privileged system user to run Vault.

	sudo useradd --system --home /etc/vault.d --shell /bin/false vault


Step 3: Configure systemd
--------------------------------------------------------------------------------
Systemd uses documented sane defaults so only non-default values must be set in the configuration file.

Create a Vault service file at /etc/systemd/system/vault.service.

	sudo touch /etc/systemd/system/vault.service

Add the below configuration to the Vault service file:

[Unit]
Description="HashiCorp Vault - A tool for managing secrets"
Documentation=https://www.vaultproject.io/docs/
Requires=network-online.target
After=network-online.target
ConditionFileNotEmpty=/etc/vault.d/vault.hcl

[Service]
User=vault
Group=vault
ProtectSystem=full
ProtectHome=read-only
PrivateTmp=yes
PrivateDevices=yes
SecureBits=keep-caps
AmbientCapabilities=CAP_IPC_LOCK
Capabilities=CAP_IPC_LOCK+ep
CapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK
NoNewPrivileges=yes
ExecStart=/usr/local/bin/vault server -config=/etc/vault.d/vault.hcl
ExecReload=/bin/kill --signal HUP $MAINPID
KillMode=process
KillSignal=SIGINT
Restart=on-failure
RestartSec=5
TimeoutStopSec=30
StartLimitIntervalSec=60
StartLimitBurst=3

[Install]
WantedBy=multi-user.target




