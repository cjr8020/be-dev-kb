
	@@@@@@@@@@@@@@@@@@
	
		Hazelcast

	@@@@@@@@@@@@@@@@@@


Resources:

Mastering Hazelcast IMDG
https://hazelcast.org/mastering-hazelcast/

Hazelcast with Java
https://www.baeldung.com/java-hazelcast

How do you secure your data in memory?
Oct 19, 2015 | Articles, Practice - Data
https://www.brickendon.com/articles/how-do-you-secure-your-data-in-memory/

Spring Boot and Hazelcast
https://medium.com/@oscdj113/spring-boot-and-hazelcast-f68d42b2a83d

hazelcast-aws
https://github.com/hazelcast/hazelcast-aws

hazelcast ldap security
http://davebrimley.com/blog/hazelcast-ldap-security/

================================================================================

  Java programmatic configuration
  *******************************

example:
---------------------

@Configuration
public class CacheConfiguration {

  /**
   * Hazelcast map configuration.
   * @return MapConfig
   */
  @Bean
  public MapConfig accessTokenMapConfig() {
    return new MapConfig("white-bunnies")
        .setMaxSizeConfig(new MaxSizeConfig(100, MaxSizePolicy.PER_NODE))
        .setEvictionPolicy(EvictionPolicy.LFU)
        .setTimeToLiveSeconds(3600); // auth token lifespan is 1 hour
  }

  /**
   * Hazelcast config.
   * @return Config
   */
  @Bean
  public Config hazelcastConfig() {
    Config hazelcastConfig = new Config("claims-intake-api-hazelcast-instance");
    hazelcastConfig.setProperty("hazelcast.phone.home.enabled", "false");
    hazelcastConfig.addMapConfig(accessTokenMapConfig());  // tokens map
    // network config
    NetworkConfig networkConfig = hazelcastConfig.getNetworkConfig();
    JoinConfig joinConfig = networkConfig.getJoin();
    joinConfig.getMulticastConfig().setEnabled(false);
    joinConfig.getTcpIpConfig().setEnabled(false);
    return hazelcastConfig;
  }
}


network config
--------------------

Config config = new Config();
NetworkConfig networkConfig = config.getNetworkConfig();
networkConfig.setPort(5701).setPortCount(20);
networkConfig.setPortAutoIncrement(true);


// configuring don't bind to any interface
config.setProperty("hazelcast.socket.bind.any", "false");

InterfacesConfig interfacesConfig = networkConfig.getInterfaces();
interfacesConfig.setEnabled(true)
        .addInterface("127.0.0.1");


multicast
--------------------

JoinConfig join = networkConfig.getJoin();
join.getMulticastConfig().setEnabled(false);


tcpip
-------------------

join.getTcpIpConfig()
  .addMember("machine1")
  .addMember("localhost").setEnabled(true);


advanced configuration
----------------------

https://docs.hazelcast.org/docs/3.0/manual/html/ch12s06.html


hazelcast.socket.bind.any
-------------------------

  By default, Hazelcast binds to all local network interfaces to accept incoming traffic. You can change this behavior using the system property hazelcast.socket.bind.any. If you set this property to false, Hazelcast uses the interfaces specified in the interfaces element (see the Interfaces Configuration section). If no interfaces are provided, then it tries to resolve one interface to bind from the member elements.


standalone mode
---------------

[com.hazelcast.instance.Node] - [[127.0.0.1]:5701 [dev] [3.12.1] No join method is enabled! Starting standalone.]

  @Bean
  public MapConfig someMapConfig() { . . . }

  @Bean
  public Config hazelcastConfig() {
    Config hazelcastConfig = new Config("test-hazelcast-instance");
    hazelcastConfig.setProperty("hazelcast.phone.home.enabled", "false");
    hazelcastConfig.addMapConfig(someMapConfig());  // tokens map

    // network config

    // disable bind to any interface
    hazelcastConfig.setProperty("hazelcast.socket.bind.any", "false");
    NetworkConfig networkConfig = hazelcastConfig.getNetworkConfig();
    InterfacesConfig interfacesConfig = networkConfig.getInterfaces();
    interfacesConfig.setEnabled(true)
        .addInterface("127.0.0.1");

    // join config
    JoinConfig joinConfig = networkConfig.getJoin();
    joinConfig.getMulticastConfig().setEnabled(false);
    joinConfig.getTcpIpConfig().setEnabled(false);
    return hazelcastConfig;
  }


standalone mode - map size
--------------------------

new MaxSizeConfig(271, MaxSizePolicy.PER_NODE)


[2019-10-11 17:00:55,921] [WARN ] [hz.claims-intake-api-hazelcast-instance.partition-operation.thread-3] [com.hazelcast.map.impl.eviction.EvictionChecker] - [[127.0.0.1]:5701 [dev] [3.12.1] The max size configuration for map "access-tokens" does not allow any data in the map. Given the current cluster size of 1 members with 271 partitions, max size should be at least 271. Map size is forced set to 271 for backward compatibility]


================================================================================

	Serialization
	*************

resources:
https://docs.hazelcast.org/docs/3.0/manual/html/ch03.html ch 3: serialization
https://hazelcast.com/blog/serialize-enumerable-ways/


Hazelcast relies heavily on serialization. It is designed to be a distributed cache and honestly it is not very suitable for a local cache.

Sometimes people compare it with other caching solutions and notice that Hazelcast is very slow. This is because a local cache doesn’t need to serialize its entries, but Hazelcast does. And serialization is very costly.

Hazelcast 3 comes with a big update on serialization. 
Not only it provides 2 new way of serialization, now you can plug your own serialization and it works like a charm.



Comparing Serialization Methods
--------------------------------------------------------------------------------

https://hazelcast.com/blog/comparing-serialization-methods/

To summarize; Java serialization is the worst. 

With Custom Serialization you can easily implement and plug Kryo or Jackson Smile serializers. Hazelcast supports Stream based or ByteArray based serializers. 
They are way better than Java Serialization and doesn’t require to change your Classes. 
Can be easily used for third party objects. 
They don’t even have to be Serializable.

However Hazelcast DataSerializable, IdentifiedDataSerializable and Portable are better for serialization and deserialization. They are very optimized and produces less binary. However they have an implementation overhead, you need to implement additional serialization methods for all your Classes. But if you need better query performance without having to add index to all your fields, then it should be worth of trying Portable.


Kryo
	
	https://github.com/EsotericSoftware/kryo
	Kryo is a fast and efficient binary object graph serialization framework for Java.

	The beauty of Kryo is that, you don’t need to make your domain classes implement anything. 
	We just need to implement a StreamSerializer.

	Note that Kryo is not thread-safe. 
	That is why each thread needs to have its own Kryo. 
	Here is the implementation details:
	https://hazelcast.com/blog/comparing-serialization-methods/


Jackson Smile

	Smile is a computer data interchange format based on JSON. It can also be considered a binary serialization of the generic JSON data model, which means tools that operate on JSON may be used with Smile as well, as long as a proper encoder/decoder exists for the tool. 

	The name comes from first 2 bytes of the 4 byte header, which consist of Smiley ":)" followed by a linefeed: choice made to make it easier to recognize Smile-encoded data files using textual command-line tools.

	https://github.com/FasterXML/smile-format-specification

	To use Jackson Smile with Hazelcast, implement it as a ByteArraySearilizer.

	Note that Jackson is already thread-safe:
	https://hazelcast.com/blog/comparing-serialization-methods/

	simplest serialization code so far


Kryo wins in terms of both time and size compared to Jackson Smile.
But you may consider Jackson Smile for simplicity.


--------------------------------------------------------------------------------

All your distributed objects such as your key and value objects, 
objects you offer into distributed queue and your distributed callable/runnable objects 
have to be Serializable.	

Hazelcast serializes all your objects into an instance of

	com.hazelcast.nio.serialization.Data - binary representation of an object.

When Hazelcast serializes an object into `Data`, it first checks whether the object is an instance of 

	com.hazelcast.nio.serialization.DataSerializable, 

if not it checks if it is an instance of 

	com.hazelcast.nio.serialization.Portable 

and serializes it accordingly.



Custom Serialization
--------------------------------------------------------------------------------

Hazelcast allows you to plug a custom serializer.

https://hazelcast.com/blog/serialize-enumerable-ways/

prefer to use either ByteArraySerializer or StreamSerializer, for a couple of reasons:

1. They facilitate separation of concerns, 
   i.e. the serialization code is separate from the class itself.

2. Because they facilitate separation of concerns, there’s no required dependency 
   on Hazelcast in the actual classes being serialized. 
   This is particularly important if you don’t own or control the classes, 
   and thus cannot implement any of the Hazelcast serialization interfaces.

3. Full constructor freedom. 
   Because the instantiation is done in the Serializer class, 
   which you write and control, there’s full freedom in how the class is designed, 
   e.g. no need for a default constructor.


DataSerializable
--------------------------------------------------------------------------------

For a faster serialization of objects, Hazelcast recommends to implement 

	com.hazelcast.nio.serialization.IdentifiedDataSerializable 

which is slightly better version of 

	com.hazelcast.nio.serialization.DataSerializable


Portable Serialization
--------------------------------------------------------------------------------

Portable serialization has the following advantages:

Support multiversion of the same object type.
Fetching individual fields without having to rely on reflection
Querying and indexing support without de-serialization and/or reflection

    @Override
    public void writePortable(PortableWriter writer) throws IOException {
        writer.writeUTF("foo", foo);
    }

    @Override
    public void readPortable(PortableReader reader) throws IOException {
        foo = reader.readUTF("foo");
    }


================================================================================


	Kryo Custom Serialization
	*************************

https://github.com/EsotericSoftware/kryo
Kryo is a fast and efficient binary object graph serialization framework for Java.	

1. facilitates separation of concerns, 
2. Because they facilitate separation of concerns, there’s no required dependency 
   on Hazelcast in the actual classes being serialized. 
3. Full constructor freedom. 

Just need to implement a StreamSerializer.
https://hazelcast.com/blog/serialize-enumerable-ways/

https://github.com/hazelcast/hazelcast/issues/6781


Example
--------------------

Example below comes from this issue:
https://github.com/hazelcast/hazelcast/issues/6781

  NOTE: you must use InputChunked and OutputChunked, rather then Input/Output stream .. 
  -----

other examples are in the documentation:

Custom Serialization:
https://docs.hazelcast.org/docs/latest-dev/manual/html-single/index.html#custom-serialization



GenericHazelCastKryoSerializer.java
-----------------------------------

public abstract class GenericHazelcastKryoSerializer<T> implements StreamSerializer<T> {

  private final int typeId;

  public GenericHazelcastKryoSerializer(int typeId) {
    this.typeId = typeId;
  }

  @Override
  public int getTypeId() {
    return typeId;
  }

  @Override
  public void write(ObjectDataOutput objectDataOutput, T product)
      throws IOException {
    Kryo kryo = getSharedThreadLocalKyro();
    OutputChunked output = new OutputChunked((OutputStream) objectDataOutput, 4096);
    kryo.writeClassAndObject(output, product);
    output.endChunks();
    output.flush();
  }

  protected abstract Kryo getSharedThreadLocalKyro();

  @Override
  public T read(ObjectDataInput objectDataInput)
      throws IOException {
    InputStream in = (InputStream) objectDataInput;
    InputChunked input = new InputChunked(in, 4096);
    Kryo kryo = getSharedThreadLocalKyro();
    return (T) kryo.readClassAndObject(input);
  }

  @Override
  public void destroy() {
  }

}

SerializationId.class
---------------------

public class SerializationId {
  public static final int ID = 1;

  private SerializationId() {
    throw IllegalStateException("this should never be instantiated, even using reflection");
  }
}


FooKryoSerializer.class
------------------------

public class FooKryoSerializer extends GenericHazelcastKryoSerializer<SomeObject> {

  private static final ThreadLocal<Kryo> kryoThreadLocal
      = new ThreadLocal<Kryo>() {
    @Override
    protected Kryo initialValue() {
      Kryo kryo = new Kryo();
      kryo.register(Foo.class);
      return kryo;
    }
  };

  public SomeObjectKryoSerializer() {
    super(SerializationId.ID);
  }

  @Override
  protected Kryo getSharedThreadLocalKyro() {
    return kryoThreadLocal.get();
  }

}




Issues:
---------------------------------


	HazelcastSerializationException: java.io.EOFException: Cannot read 4 bytes!
	***************************************************************************

https://github.com/hazelcast/hazelcast/issues/6781

was using input & output stream as described in mastering hazelcast guide 
instead of InputChunked & OutputChunked.
After changing to chunked, I no longer see the issue.




================================================================================

Hazelcast as Redis replacement
******************************
https://hazelcast.org/use-cases/redis-replacement/


Architecture
Key architectural differences between Hazelcast IMDG® and Redis include:

Language: Hazelcast IMDG is written in Java, while Redis is implemented in C.
Threading: Redis is single-threaded. Hazelcast IMDG can benefit from all available CPU cores.
Design: Hazelcast IMDG is designed from the ground up to be used in a distributed environment; Redis was initially intended to be used in standalone mode. Clustered Redis does not support SELECT command, meaning it only supports a single DB (namespace) per cluster. In contrast, Hazelcast IMDG supports unlimited number of maps and caches per cluster.
High availability: More on this in failover section


Hazelcast IMDG provides a Discovery Service Provider Interface (SPI), which allows users to implement custom member discovery mechanisms to deploy Hazelcast IMDG on any platform. Hazelcast® Discovery SPI also allows you to use third-party software like Zookeeper, Eureka, Consul, etcd for implementing custom discovery mechanism.

Failover
When it comes to providing fault-tolerance, Redis uses a traditional master-slave approach, where each primary site for the data is backed up by one or more slaves that are promoted if the master goes down.

In a Hazelcast IMDG cluster, all members are equal and hold primary data as well as backup of the primary on other members in the cluster. Thus, Hazelcast IMDG requires fewer physical machines to establish the same level of resilience. Also, Redis slave nodes do not process read requests, which reduces the throughput of the entire system.

High availability of Redis is provided by Redis Sentinel, which continuously monitors the Redis cluster and initiates a slave promotion if it detects a master failure. At least three instances of Sentinel are recommended for a reliable deployment, which unnecessarily uses resources.



================================================================================

	
https://octoperf.com/blog/2018/06/12/spring-boot-hazelcast-tutorial/
https://github.com/jloisel/spring-boot-hazelcast


look at multiple problems arising when clustering a web application 
(and especially Rest APIs):

1. Get an understanding of why clustering is inherently difficult (but not insurmountable),

2. How to hide clustering problematics behind a service that handles the difficult work for us,

3. How to enable clustering in a Spring Boot Rest API? Which framework should I use? (obviously we’re talking about Hazelcast here)

4. How to make your Spring Boot App configurable to support High Availability without changing a single line of code, (using @ConditionalOnProperty)

5. How to implement a very simple Leader Election mechanism using Hazelcast and know when your instance is the leader.

================================================================================