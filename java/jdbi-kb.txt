
	@@@@@@@@@@@@

		JDBI

	@@@@@@@@@@@@


Examples:

https://github.com/qualidafial/jdbi-examples/tree/master/src/test/java/org/jdbi/examples/v3

================================================================================

	JDBI 3	

================================================================================	

	Handle
	******
Handles represent an active database connection.	
A Handle inherits configuration from the Jdbi at the time it is created.
Handles must be closed.

The easiest way to work with handles, and have them automatically closed, is by using lambda expressions:

	jdbi.useHandle(handle -> {
	    doStuffWith(handle);
	});

We call useHandle when we don’t have to return a value.

Otherwise, we use withHandle:

	jdbi.withHandle(handle -> {
	    return computeValue(handle);
	});

It’s also possible, though not recommended, to manually open a connection handle; in that case, we have to close it when we’re done:

	Jdbi jdbi = Jdbi.create("jdbc:hsqldb:mem:testDB", "sa", "");
	try (Handle handle = jdbi.open()) {
	    doStuffWith(handle);
	}

Luckily, as we can see, Handle implements Closeable, so it can be used with try-with-resources.

================================================================================	

	Transactions
	************

Handle objects provide two ways to open a transaction:

1. inTransaction

	allows you to return a result

2. useTransaction

	has no return value.



As with connection handles, we introduce a transaction by calling a method with a closure:


handle.useTransaction((Handle h) -> {
    haveFunWith(h);
});

And, as with handles, the transaction is automatically closed when the closure returns.

However, we must commit or rollback the transaction before returning:

handle.useTransaction((Handle h) -> {
    h.execute("...");
    h.commit();
});

If, however, an exception is thrown from the closure, Jdbi automatically rolls back the transaction.

handle.inTransaction((Handle h) -> {
    h.execute("...");
    h.commit();
    return true;
});


================================================================================	