
	*******************

		General Java

	*******************


================================================================================

	ThreadLocal with REST
	*********************

http://www.baeldung.com/java-threadlocal	
https://veerasundar.com/blog/2010/11/java-thread-local-how-to-use-and-code-sample/


The TheadLocal construct allows us to store data that will be accessible only by a specific thread.

Let’s say that we want to have an Integer value that will be bundled with the specific thread:

	ThreadLocal<Integer> threadLocalValue = new ThreadLocal<>();

Next, when we want to use this value from a thread we only need to call a get() or set() method.

ThreadLocal stores data inside of a map – with the thread as the key.

	threadLocalValue.set(1);
	Integer result = threadLocalValue.get();

with initial value:

	ThreadLocal<Integer> threadLocal = ThreadLocal.withInitial(() -> 1);

to remove a value from the ThreadLocal

	threadLocal.remove();


Do not use ThreadLocal with ExecutorService
-------------------------------------------

If we want to use an ExecutorService and submit a Runnable to it, using ThreadLocal will yield non-deterministic results – because we do not have a guarantee that every Runnable action for a given userId will be handled by the same thread every time it is executed.

Because of that, our ThreadLocal will be shared among different userIds. That’s why we should not use a TheadLocal together with ExecutorService. It should only be used when we have full control over which thread will pick which runnable action to execute.


Prevent memory leaks while using ThreadLocal
--------------------------------------------

https://stackoverflow.com/questions/17968803/threadlocal-memory-leak/17975255#17975255

	Imagine an application server which has a pool of worker threads.
	They will be kept alive until application server termination.

	If the web application fails to clear the reference to the ThreadLocal on shutdown, bad things will happen

		permgen leak

https://plumbr.io/blog/locked-threads/how-to-shoot-yourself-in-foot-with-threadlocals

Be aware:

	ThreadLocal gives you the opportunity to use the variables without explicitly passing them down through the method invocation chain. Which could be useful on certain occasions. But you guys out there who have created a n-layer architecture to abstract away different communication interfaces. And then grab HttpServletRequest from ThreadLocals in your DAO objects … what were you smoking when making this decision?

	It is darn easy to introduce a memory leak to your code when using a ThreadLocal. Which serves as a nice demonstration about the complexities surrounding classloaders. If you are deploying your code in an application server then your application classes are loaded/unloaded with a different classloader than the one used by the application server itself.  Which is not bad per se. But now considering that modern application servers also pool threads instead of creating a new one on each HttpRequest, we have built the foundation to a problem.


If one of the application classes stores a value in ThreadLocal variable and doesn’t remove it after the task at hand is completed, a copy of that Object will remain with the Thread (from the application server thread pool). Since lifespan of the pooled Thread surpasses that of the application, it will prevent the object and thus a ClassLoader being responsible for loading the application from being garbage collected. And we have created a leak, which has a chance to surface in a good old java.lang.OutOfMemoryError: PermGen space form.

So should we avoid using ThreadLocal considering the harm it can cause? Maybe not so fast Joshua Bloch has said half a decade ago:

	“Can you cause unintended object retention with thread locals? Sure you can. But you can do this with arrays too. That doesn’t mean that thread locals (or arrays) are bad things. Merely that you have to use them with some care. The use of thread pools demands extreme care. Sloppy use of thread pools in combination with sloppy use of thread locals can cause unintended object retention, as has been noted in many places. But placing the blame on thread locals is unwarranted.”



================================================================================



	maven artifact version at runtime
	*********************************

https://stackoverflow.com/questions/2712970/get-maven-artifact-version-at-runtime

should be able to use

	getClass().getPackage().getImplementationVersion() 

to get the version information stored in MANIFEST.MF

	Manifest-Version: 1.0
	Implementation-Version: 1.0.0-SNAPSHOT
	Spring-Boot-Version: 1.5.9.RELEASE
	Implementation-Vendor: Pivotal Software, Inc.
	Main-Class: org.springframework.boot.loader.JarLauncher
	Spring-Boot-Classes: BOOT-INF/classes/
	Spring-Boot-Lib: BOOT-INF/lib/
	Created-By: Apache Maven 3.3.9
	Build-Jdk: 1.8.0_45

If the correct is not written to the MANIFEST.MF by default:

<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-jar-plugin</artifactId>
    <configuration>
        <archive>                   
            <manifest>
                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
            </manifest>
        </archive>
    </configuration>
</plugin>

or if it is a WAR

	maven-war-plugin 

		same configuration


================================================================================

	executing method name at runtime
	********************************
http://www.baeldung.com/java-name-of-executing-method

Method 1: getEnclosingMethod
-------------------------------

return the immediately enclosing method of the underlying class, if that class
is local or anonymous;
else - null

Example

	public void givenObject_whenGetEnclosingMethod_theFindMethod() {
		String methodName = new Object() {}
			.getClass()
			.getEnclosingMethod()
			.getName();

		assertEquals("givenObject_whenGetEnclosingMethod_theFindMethod", methodName);
	}


Example

public class GetEnclosingMethodExample {
	
	public static void main(String[] args) {
		GetEnclosingMethodExample test = new GetEnclosingMethodExample();
		Runnable runnable = test.getMyRunnable();

		System.out.println(runnable.getClass().getEnclosingMethod());
	}

	private Runnable getMyRunnable() {
		return new Runnable() {
			@Override
			public void run() {
				// do something
			}
		};
	}
}


Method 2: Throwable Stack Trace
--------------------------------

Using a Throwable stack trace gives us stack trace with the method currently being executed:

System.out.println(new Throwable().getStackTrace()[0].getMethodName());

Example:

	public void givenThrowable_whenGetStacktrace_thenFindMethod() {
	    StackTraceElement[] stackTrace = new Throwable().getStackTrace();
	  
	    assertEquals(
	      "givenThrowable_whenGetStacktrace_thenFindMethod",
	      stackTrace[0].getMethodName());
	}

================================================================================

	Jackson FasterXML
	*****************

Deserialize unknown JSON into Java Map
--------------------------------------

   Map<String, Object> errorResponse = objectMapper.readValue(
              httpResponse.getEntity().getContent(),
              new TypeReference<Map<String,Object>>() {});	


================================================================================

	HMAC
	****


HMAC-SHA1 generation
--------------------
In cryptography, an HMAC (sometimes expanded as either keyed-hash message authentication code or hash-based message authentication code) is a specific type of message authentication code (MAC) involving a cryptographic hash function and a secret cryptographic key. It may be used to simultaneously verify both the data integrity and the authentication of a message, as with any MAC.	

Resources:
----------
https://linkmobility.atlassian.net/wiki/spaces/DD/pages/88670850/Authentication
https://linkmobility.atlassian.net/wiki/spaces/DD/pages/250282553/Hmac+example+java
https://www.jokecamp.com/blog/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/#java


HMAC Util
------------

import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

/**
 * HMAC utilities.
 */
public class HmacUtil {

  /**
   * The encoding used for the header.
   */
  private static final String ENCODING = "UTF-8";

  /**
   * Identifier for the HmacSHA256 algorithm as expected from {@link javax.crypto.Mac}.
   */
  private static final String HMAC_SHA256_ALGORITHM_NAME = "HmacSHA256";

  /**
   * Identifier for the MD5 algorithm as expected.
   * from {@link MessageDigest java.security.MessageDigest}
   */
  private static final String MD5_ALGORITHM_NAME = "MD5";


  /**
   * Creates HmacSHA256 hash of a message using the provided secret key.
   *
   * @param message the message to be hashed and authenticated/validated later
   * @param secretKey a secret key used to create the hash
   * @return the created hash as binary data
   * @throws NoSuchAlgorithmException in case the selected algorithm (HmacSHA256) is not supported
   * @throws InvalidKeyException in case the provided key is inappropriate for the MAC
   */
  public static byte[] createSha256Hash(
      byte[] message,
      byte[] secretKey
  ) throws NoSuchAlgorithmException, InvalidKeyException {
    Mac algorithm = Mac.getInstance(HMAC_SHA256_ALGORITHM_NAME);
    SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey, HMAC_SHA256_ALGORITHM_NAME);
    algorithm.init(secretKeySpec);
    byte[] hash = algorithm.doFinal(message);

    return hash;
  }

  /**
   * Creates a MD5 hash from the provided input.
   *
   * @param input the input string to hash
   * @return the creates hash as binary data
   * @throws NoSuchAlgorithmException in case the selected algorithm (MD4) is not supported
   * @throws UnsupportedEncodingException
   *         in case the encoding of the input character set is not supported
   */
  public static byte[] createMd5Hash(String input)
      throws NoSuchAlgorithmException, UnsupportedEncodingException {
    MessageDigest md5Digest = MessageDigest.getInstance(MD5_ALGORITHM_NAME);
    md5Digest.update(input.getBytes(ENCODING));
    byte[] hash = md5Digest.digest();

    return hash;
  }

  /**
   * Converts bytes to hex string.
   *
   * @param bytes array
   * @return string
   */
  public static String bytesToHex(byte[] bytes) {
    final char[] hexArray = "0123456789ABCDEF".toCharArray();
    char[] hexChars = new char[bytes.length * 2];
    for (int j = 0; j < bytes.length; j++) {
      int v = bytes[j] & 0xFF;
      hexChars[j * 2] = hexArray[v >>> 4];
      hexChars[j * 2 + 1] = hexArray[v & 0x0F];
    }
    return new String(hexChars);
  }


  /**
   * Encodes to base64.
   *
   * @param bytes array
   * @return string
   */
  public static String base64Encode(byte[] bytes) {
    return Base64.getEncoder().encodeToString(bytes);
  }

  /**
   * Encodes to base64 without padding.
   *
   * @param bytes array
   * @return string
   */
  public static String base64EncodeWithoutPadding(byte[] bytes) {
    return Base64.getEncoder().withoutPadding().encodeToString(bytes);
  }


Generate HMAC Headers
---------------------------

  private Map<String, String> getHmacHeaders(
      final String targerApiHttpVerb,
      final String targerApiUri,
      final String requestBody) {

    Map<String, String> headers = new HashMap<>();

    try {
      final String hmacApplicationUuid = config.getHmacApplicationUuid();
      final String hmacSecretKey = config.getHmacApplicationKey();

      // The MD5 base64 encoded string for an empty string is "1B2M2Y8AsgTpgAmY7PhCfg=="
      final String targetApiRequestBodyMd5Hash
          = HmacUtil.base64Encode(HmacUtil.createMd5Hash(requestBody));

      final String formattedCurrentTimeStamp = ZonedDateTime.now().format(timestampFormatter);

      // removes `https://` from URL
      Matcher matcher = _URI_NO_PROTOCOL_PATTERN.matcher(targerApiUri);
      String canonicalizedUriNoProtocol = matcher.replaceFirst("");

      if (logger.isDebugEnabled()) {
        logger.debug("targetApiRequestBodyMd5Hash base64-encoded={}", targetApiRequestBodyMd5Hash);
        logger.debug("formattedCurrentTimeStamp={}", formattedCurrentTimeStamp);
        logger.debug("canonicalizedUriNoProtocol={}", canonicalizedUriNoProtocol);
      }

      final String contentToSign = targerApiHttpVerb + '\n'
          + targetApiRequestBodyMd5Hash + '\n'
          + formattedCurrentTimeStamp + '\n'
          + canonicalizedUriNoProtocol + '\n';

      byte[] sha256SignedContent = HmacUtil.createSha256Hash(
          contentToSign.getBytes(Charset.forName("UTF-8")),
          hmacSecretKey.getBytes(Charset.forName("UTF-8")));

      String base64EncodedSignedContent = HmacUtil.base64Encode(sha256SignedContent);

      String authorizationHeader = "-hmac" + " "
          + hmacApplicationUuid + ":" + base64EncodedSignedContent + ":" + "internal-applications";
      String base64OfEncodedRequest
          = HmacUtil.base64Encode(contentToSign.getBytes(Charset.forName("UTF-8")));

      logger.info("x--authorization: {}", authorizationHeader);
      logger.info("x--request: {}", base64OfEncodedRequest);
      logger.info("x--date: {}", formattedCurrentTimeStamp);

      headers.put(_HEADER_NAME_AUTHORIZATION, authorizationHeader);
      headers.put(_HEADER_NAME_REQUEST, base64OfEncodedRequest);
      headers.put(_HEADER_NAME_DATE, formattedCurrentTimeStamp);
      headers.put(HttpHeaders.CONTENT_TYPE, "application/json");
    } catch (NoSuchAlgorithmException
        | UnsupportedEncodingException
        | InvalidKeyException exception) {
      logger.error(
          "{}, method=getHmacUserByUuid failed: {}",
          sfgAuditor.auditableLogMessage(ExecutionContextHolder.get()),
          exception
      );
      throw new IllegalStateException("Error generating OrhcIS HMAC authorization headers. ");
    }

    return headers;
  }


================================================================================

	lambda expressions
	******************

interface DoSomething {
	void do(Object o);
}	

DoSomething cool = (o) -> (o.doHighFive();
DoSomething meh = (0) -> (o.meh());

Object highFive = new HighFive();
cool.do(highFive);

Object lowFive = new LowFive();
meh.do(lowFive);

Examples:

	() -> {}                     // No parameters; void result

	() -> 42                     // No parameters, expression body
	() -> null                   // No parameters, expression body
	() -> { return 42; }         // No parameters, block body with return
	() -> { System.gc(); }       // No parameters, void block body

	(int x) -> x+1             	// Single declared-type argument
	(int x) -> { return x+1; }  // same as above
	(x) -> x+1                  // Single inferred-type argument, same as below
	x -> x+1                    // Parenthesis optional for single inferred-type case

	(String s) -> s.length()     // Single declared-type argument
	(Thread t) -> { t.start(); } // Single declared-type argument
	s -> s.length()              // Single inferred-type argument
	t -> { t.start(); }          // Single inferred-type argument

	(int x, int y) -> x+y      // Multiple declared-type parameters
	(x,y) -> x+y               // Multiple inferred-type parameters
	(x, final y) -> x+y        // Illegal: can't modify inferred-type parameters
	(x, int y) -> x+y          // Illegal: can't mix inferred and declared types


// Complex block body with multiple returns

	() -> {
	  if (true) return 10;
	  else {
	    int result = 15;
	    for (int i = 1; i < 10; i++)
	      result *= i;
	    return result;
	  }
	} 

Method and Constructor References
---------------------------------

method reference is used to refer to a method without invoking it.
a constructor reference is used to refer to a constructor without creating
a new instance of the named class or array type.

	System::getProperty
	System.out::println
	"abc"::length
	ArrayList::new
	int[]::new

================================================================================

	Functional Inteface
	*******************

Represents a function that accepts exactly one argument and produces a result:
	R apply(T t);

@FunctionalInterface
	should use this annotation with functional interface to avoid addition of
	extra methods accidentally.

Main benefit of functional interfaces is that we can use lambda expressions
to instantiate them and avoid bulky anon class implementation.

java.lang.Runnable is an example of a functional interface with one method:
	run()



================================================================================

	finally is always executed
	==========================

public static void main(String[] args) {
    System.out.println(Test.test());
}

public static int test() {
    try {
        return 0;
    }
    finally {
        System.out.println("finally trumps return.");
    }
}

Output:

finally trumps return. 
0	

================================================================================

  null check object chain with Optional
  *************************************

negative test

    OuterObject outerObject = null;

    Optional<Pearl> optionalPearl = Optional.ofNullable(outerObject) 
        .map(o -> o.getInnerObject())
        .map(i -> i.getInnerMostObject())
        .map(m -> m.getPearl());

    assertFalse(optionalPearl.isPresent());
  
  positive test

      // innermost with pearl
    Pearl pearl = new Pearl();
    InnerMostObject innerMostObject = new InnerMostObject();
    innerMostObject.setPearl(pearl);

    // inner
    InnerObject innerObject = new InnerObject();
    innerObject.setInnerMostObject(innerMostObject);

    // outer
    OuterObject outerObject = new OuterObject();
    outerObject.setInnerObject(innerObject);

    Optional<Pearl> optionalPearl = Optional.ofNullable(outerObject)
        .map(o -> o.getInnerObject())
        .map(i -> i.getInnerMostObject())
        .map(m -> m.getPearl());

    assertTrue(optionalPearl.isPresent());
    assertThat(optionalPearl.get().toString(), equalTo("My precious"));

================================================================================

