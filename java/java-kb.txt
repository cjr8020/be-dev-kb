
	*******************

		General Java

	*******************


================================================================================

	ThreadLocal with REST
	*********************

http://www.baeldung.com/java-threadlocal	
https://veerasundar.com/blog/2010/11/java-thread-local-how-to-use-and-code-sample/


The TheadLocal construct allows us to store data that will be accessible only by a specific thread.

Let’s say that we want to have an Integer value that will be bundled with the specific thread:

	ThreadLocal<Integer> threadLocalValue = new ThreadLocal<>();

Next, when we want to use this value from a thread we only need to call a get() or set() method.

ThreadLocal stores data inside of a map – with the thread as the key.

	threadLocalValue.set(1);
	Integer result = threadLocalValue.get();

with initial value:

	ThreadLocal<Integer> threadLocal = ThreadLocal.withInitial(() -> 1);

to remove a value from the ThreadLocal

	threadLocal.remove();


Do not use ThreadLocal with ExecutorService
-------------------------------------------

If we want to use an ExecutorService and submit a Runnable to it, using ThreadLocal will yield non-deterministic results – because we do not have a guarantee that every Runnable action for a given userId will be handled by the same thread every time it is executed.

Because of that, our ThreadLocal will be shared among different userIds. That’s why we should not use a TheadLocal together with ExecutorService. It should only be used when we have full control over which thread will pick which runnable action to execute.


Prevent memory leaks while using ThreadLocal
--------------------------------------------

https://stackoverflow.com/questions/17968803/threadlocal-memory-leak/17975255#17975255

	Imagine an application server which has a pool of worker threads.
	They will be kept alive until application server termination.

	If the web application fails to clear the reference to the ThreadLocal on shutdown, bad things will happen

		permgen leak

https://plumbr.io/blog/locked-threads/how-to-shoot-yourself-in-foot-with-threadlocals

Be aware:

	ThreadLocal gives you the opportunity to use the variables without explicitly passing them down through the method invocation chain. Which could be useful on certain occasions. But you guys out there who have created a n-layer architecture to abstract away different communication interfaces. And then grab HttpServletRequest from ThreadLocals in your DAO objects … what were you smoking when making this decision?

	It is darn easy to introduce a memory leak to your code when using a ThreadLocal. Which serves as a nice demonstration about the complexities surrounding classloaders. If you are deploying your code in an application server then your application classes are loaded/unloaded with a different classloader than the one used by the application server itself.  Which is not bad per se. But now considering that modern application servers also pool threads instead of creating a new one on each HttpRequest, we have built the foundation to a problem.


If one of the application classes stores a value in ThreadLocal variable and doesn’t remove it after the task at hand is completed, a copy of that Object will remain with the Thread (from the application server thread pool). Since lifespan of the pooled Thread surpasses that of the application, it will prevent the object and thus a ClassLoader being responsible for loading the application from being garbage collected. And we have created a leak, which has a chance to surface in a good old java.lang.OutOfMemoryError: PermGen space form.

So should we avoid using ThreadLocal considering the harm it can cause? Maybe not so fast Joshua Bloch has said half a decade ago:

	“Can you cause unintended object retention with thread locals? Sure you can. But you can do this with arrays too. That doesn’t mean that thread locals (or arrays) are bad things. Merely that you have to use them with some care. The use of thread pools demands extreme care. Sloppy use of thread pools in combination with sloppy use of thread locals can cause unintended object retention, as has been noted in many places. But placing the blame on thread locals is unwarranted.”



================================================================================



	maven artifact version at runtime
	*********************************

https://stackoverflow.com/questions/2712970/get-maven-artifact-version-at-runtime

should be able to use

	getClass().getPackage().getImplementationVersion() 

to get the version information stored in MANIFEST.MF

	Manifest-Version: 1.0
	Implementation-Version: 1.0.0-SNAPSHOT
	Spring-Boot-Version: 1.5.9.RELEASE
	Implementation-Vendor: Pivotal Software, Inc.
	Main-Class: org.springframework.boot.loader.JarLauncher
	Spring-Boot-Classes: BOOT-INF/classes/
	Spring-Boot-Lib: BOOT-INF/lib/
	Created-By: Apache Maven 3.3.9
	Build-Jdk: 1.8.0_45

If the correct is not written to the MANIFEST.MF by default:

<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-jar-plugin</artifactId>
    <configuration>
        <archive>                   
            <manifest>
                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
            </manifest>
        </archive>
    </configuration>
</plugin>

or if it is a WAR

	maven-war-plugin 

		same configuration


================================================================================

	executing method name at runtime
	********************************
http://www.baeldung.com/java-name-of-executing-method

Method 1: getEnclosingMethod
-------------------------------

return the immediately enclosing method of the underlying class, if that class
is local or anonymous;
else - null

Example

	public void givenObject_whenGetEnclosingMethod_theFindMethod() {
		String methodName = new Object() {}
			.getClass()
			.getEnclosingMethod()
			.getName();

		assertEquals("givenObject_whenGetEnclosingMethod_theFindMethod", methodName);
	}


Example

public class GetEnclosingMethodExample {
	
	public static void main(String[] args) {
		GetEnclosingMethodExample test = new GetEnclosingMethodExample();
		Runnable runnable = test.getMyRunnable();

		System.out.println(runnable.getClass().getEnclosingMethod());
	}

	private Runnable getMyRunnable() {
		return new Runnable() {
			@Override
			public void run() {
				// do something
			}
		};
	}
}


Method 2: Throwable Stack Trace
--------------------------------

Using a Throwable stack trace gives us stack trace with the method currently being executed:

System.out.println(new Throwable().getStackTrace()[0].getMethodName());

Example:

	public void givenThrowable_whenGetStacktrace_thenFindMethod() {
	    StackTraceElement[] stackTrace = new Throwable().getStackTrace();
	  
	    assertEquals(
	      "givenThrowable_whenGetStacktrace_thenFindMethod",
	      stackTrace[0].getMethodName());
	}

================================================================================

	Jackson FasterXML
	*****************

Deserialize unknown JSON into Java Map
--------------------------------------

   Map<String, Object> errorResponse = objectMapper.readValue(
              httpResponse.getEntity().getContent(),
              new TypeReference<Map<String,Object>>() {});	


================================================================================

